
guitar-actuator-board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a50  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08002b10  08002b10  00012b10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b48  08002b48  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08002b48  08002b48  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002b48  08002b48  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b48  08002b48  00012b48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002b4c  08002b4c  00012b4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08002b50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ec  20000014  08002b64  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000100  08002b64  00020100  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009814  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000019b2  00000000  00000000  00029850  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b38  00000000  00000000  0002b208  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a50  00000000  00000000  0002bd40  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000c350  00000000  00000000  0002c790  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008b57  00000000  00000000  00038ae0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00046e4d  00000000  00000000  00041637  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00088484  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027a8  00000000  00000000  00088500  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000014 	.word	0x20000014
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002af8 	.word	0x08002af8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000018 	.word	0x20000018
 8000104:	08002af8 	.word	0x08002af8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <process_midi_message>:
uint8_t get_one_byte();

extern UART_HandleTypeDef huart1;

//processes a MIDI message. we return a 1 if we need to strum. Some messages can be 2 bytes, so the third byte might just be 0x0.
int process_midi_message(uint8_t byte1) { //TODO: later change this to array
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
 8000226:	0002      	movs	r2, r0
 8000228:	1dfb      	adds	r3, r7, #7
 800022a:	701a      	strb	r2, [r3, #0]


	if(byte1 >= 128) { //check to see if the first bit of the first byte this means that its a system message and we need to switch to that status
 800022c:	1dfb      	adds	r3, r7, #7
 800022e:	781b      	ldrb	r3, [r3, #0]
 8000230:	b25b      	sxtb	r3, r3
 8000232:	2b00      	cmp	r3, #0
 8000234:	da2a      	bge.n	800028c <process_midi_message+0x6c>
        CURRENT_STATUS = byte1; //unused for now
 8000236:	1dfb      	adds	r3, r7, #7
 8000238:	781a      	ldrb	r2, [r3, #0]
 800023a:	4b1e      	ldr	r3, [pc, #120]	; (80002b4 <process_midi_message+0x94>)
 800023c:	601a      	str	r2, [r3, #0]

        switch (byte1) { //now, interpret the message itself
 800023e:	1dfb      	adds	r3, r7, #7
 8000240:	781b      	ldrb	r3, [r3, #0]
 8000242:	2bb0      	cmp	r3, #176	; 0xb0
 8000244:	d018      	beq.n	8000278 <process_midi_message+0x58>
 8000246:	dc06      	bgt.n	8000256 <process_midi_message+0x36>
 8000248:	2b90      	cmp	r3, #144	; 0x90
 800024a:	d00b      	beq.n	8000264 <process_midi_message+0x44>
 800024c:	2ba0      	cmp	r3, #160	; 0xa0
 800024e:	d011      	beq.n	8000274 <process_midi_message+0x54>
 8000250:	2b80      	cmp	r3, #128	; 0x80
 8000252:	d00b      	beq.n	800026c <process_midi_message+0x4c>
 8000254:	e018      	b.n	8000288 <process_midi_message+0x68>
 8000256:	2bd0      	cmp	r3, #208	; 0xd0
 8000258:	d012      	beq.n	8000280 <process_midi_message+0x60>
 800025a:	2be0      	cmp	r3, #224	; 0xe0
 800025c:	d012      	beq.n	8000284 <process_midi_message+0x64>
 800025e:	2bc0      	cmp	r3, #192	; 0xc0
 8000260:	d00c      	beq.n	800027c <process_midi_message+0x5c>
 8000262:	e011      	b.n	8000288 <process_midi_message+0x68>
        case STATUS_NOTE_ON:
        	return note_on();
 8000264:	f000 f83a 	bl	80002dc <note_on>
 8000268:	0003      	movs	r3, r0
 800026a:	e01e      	b.n	80002aa <process_midi_message+0x8a>
            break;

        case STATUS_NOTE_OFF:
            return note_off();
 800026c:	f000 f856 	bl	800031c <note_off>
 8000270:	0003      	movs	r3, r0
 8000272:	e01a      	b.n	80002aa <process_midi_message+0x8a>
            break;

        case STATUS_AFTERTOUCH:
            return 0;
 8000274:	2300      	movs	r3, #0
 8000276:	e018      	b.n	80002aa <process_midi_message+0x8a>
            break;

        case STATUS_CONTROL_CHANGE:
            return 0;
 8000278:	2300      	movs	r3, #0
 800027a:	e016      	b.n	80002aa <process_midi_message+0x8a>
            break;

        case STATUS_PROGRAM_CHANGE:
            return 0;
 800027c:	2300      	movs	r3, #0
 800027e:	e014      	b.n	80002aa <process_midi_message+0x8a>
            break;

        case STATUS_CHANNEL_PRESSURE:
            return 0;
 8000280:	2300      	movs	r3, #0
 8000282:	e012      	b.n	80002aa <process_midi_message+0x8a>
            break;

        case STATUS_PITCH_BEND:
            return 0;
 8000284:	2300      	movs	r3, #0
 8000286:	e010      	b.n	80002aa <process_midi_message+0x8a>
            break;

        default:
            return 0;
 8000288:	2300      	movs	r3, #0
 800028a:	e00e      	b.n	80002aa <process_midi_message+0x8a>
            break;
        }
    }
    else {
        //if the first byte isn’t a status byte, then we are in the previous status. aka running status. depending on current status
        switch(CURRENT_STATUS) {
 800028c:	4b09      	ldr	r3, [pc, #36]	; (80002b4 <process_midi_message+0x94>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	2b80      	cmp	r3, #128	; 0x80
 8000292:	d005      	beq.n	80002a0 <process_midi_message+0x80>
 8000294:	2b90      	cmp	r3, #144	; 0x90
 8000296:	d107      	bne.n	80002a8 <process_midi_message+0x88>
        case STATUS_NOTE_ON:
            return note_on();
 8000298:	f000 f820 	bl	80002dc <note_on>
 800029c:	0003      	movs	r3, r0
 800029e:	e004      	b.n	80002aa <process_midi_message+0x8a>
            break;

        case STATUS_NOTE_OFF:
            return note_off();
 80002a0:	f000 f83c 	bl	800031c <note_off>
 80002a4:	0003      	movs	r3, r0
 80002a6:	e000      	b.n	80002aa <process_midi_message+0x8a>
            break;

        default:
            return 0;
 80002a8:	2300      	movs	r3, #0
        }
    }
}
 80002aa:	0018      	movs	r0, r3
 80002ac:	46bd      	mov	sp, r7
 80002ae:	b002      	add	sp, #8
 80002b0:	bd80      	pop	{r7, pc}
 80002b2:	46c0      	nop			; (mov r8, r8)
 80002b4:	20000030 	.word	0x20000030

080002b8 <get_one_byte>:

uint8_t get_one_byte() {
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b082      	sub	sp, #8
 80002bc:	af00      	add	r7, sp, #0
	uint8_t b;
	HAL_UART_Receive(&huart1, &b, 1, HAL_MAX_DELAY);
 80002be:	2301      	movs	r3, #1
 80002c0:	425b      	negs	r3, r3
 80002c2:	1df9      	adds	r1, r7, #7
 80002c4:	4804      	ldr	r0, [pc, #16]	; (80002d8 <get_one_byte+0x20>)
 80002c6:	2201      	movs	r2, #1
 80002c8:	f002 f82c 	bl	8002324 <HAL_UART_Receive>
	return b;
 80002cc:	1dfb      	adds	r3, r7, #7
 80002ce:	781b      	ldrb	r3, [r3, #0]
}
 80002d0:	0018      	movs	r0, r3
 80002d2:	46bd      	mov	sp, r7
 80002d4:	b002      	add	sp, #8
 80002d6:	bd80      	pop	{r7, pc}
 80002d8:	2000003c 	.word	0x2000003c

080002dc <note_on>:

int note_on() {
 80002dc:	b590      	push	{r4, r7, lr}
 80002de:	b083      	sub	sp, #12
 80002e0:	af00      	add	r7, sp, #0
	uint8_t a = get_one_byte();
 80002e2:	1dfc      	adds	r4, r7, #7
 80002e4:	f7ff ffe8 	bl	80002b8 <get_one_byte>
 80002e8:	0003      	movs	r3, r0
 80002ea:	7023      	strb	r3, [r4, #0]
	uint8_t b = get_one_byte();
 80002ec:	1dbc      	adds	r4, r7, #6
 80002ee:	f7ff ffe3 	bl	80002b8 <get_one_byte>
 80002f2:	0003      	movs	r3, r0
 80002f4:	7023      	strb	r3, [r4, #0]
	if(a == note) {
 80002f6:	1dfb      	adds	r3, r7, #7
 80002f8:	781a      	ldrb	r2, [r3, #0]
 80002fa:	4b07      	ldr	r3, [pc, #28]	; (8000318 <note_on+0x3c>)
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	429a      	cmp	r2, r3
 8000300:	d105      	bne.n	800030e <note_on+0x32>
		if(b != 0) {
 8000302:	1dbb      	adds	r3, r7, #6
 8000304:	781b      	ldrb	r3, [r3, #0]
 8000306:	2b00      	cmp	r3, #0
 8000308:	d001      	beq.n	800030e <note_on+0x32>
			return 1;
 800030a:	2301      	movs	r3, #1
 800030c:	e000      	b.n	8000310 <note_on+0x34>
		}
	}
	return 0;
 800030e:	2300      	movs	r3, #0
}
 8000310:	0018      	movs	r0, r3
 8000312:	46bd      	mov	sp, r7
 8000314:	b003      	add	sp, #12
 8000316:	bd90      	pop	{r4, r7, pc}
 8000318:	20000000 	.word	0x20000000

0800031c <note_off>:

int note_off() {
 800031c:	b580      	push	{r7, lr}
 800031e:	af00      	add	r7, sp, #0
	get_one_byte();
 8000320:	f7ff ffca 	bl	80002b8 <get_one_byte>
	get_one_byte();
 8000324:	f7ff ffc8 	bl	80002b8 <get_one_byte>
}
 8000328:	46c0      	nop			; (mov r8, r8)
 800032a:	0018      	movs	r0, r3
 800032c:	46bd      	mov	sp, r7
 800032e:	bd80      	pop	{r7, pc}

08000330 <set_pulse>:

int is_flipped = 0;
TIM_HandleTypeDef * servoPWM; //pwm controller of the servo

//code used to set PWM pulse. parts of this function were copied from auto-generated STM32 code setup
void set_pulse(int p) {
 8000330:	b590      	push	{r4, r7, lr}
 8000332:	b08b      	sub	sp, #44	; 0x2c
 8000334:	af00      	add	r7, sp, #0
 8000336:	6078      	str	r0, [r7, #4]
    TIM_OC_InitTypeDef sConfigOC = {0};
 8000338:	210c      	movs	r1, #12
 800033a:	000c      	movs	r4, r1
 800033c:	187b      	adds	r3, r7, r1
 800033e:	0018      	movs	r0, r3
 8000340:	231c      	movs	r3, #28
 8000342:	001a      	movs	r2, r3
 8000344:	2100      	movs	r1, #0
 8000346:	f002 fbcf 	bl	8002ae8 <memset>
    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800034a:	0021      	movs	r1, r4
 800034c:	187b      	adds	r3, r7, r1
 800034e:	2260      	movs	r2, #96	; 0x60
 8000350:	601a      	str	r2, [r3, #0]
    sConfigOC.Pulse = p;
 8000352:	687a      	ldr	r2, [r7, #4]
 8000354:	187b      	adds	r3, r7, r1
 8000356:	605a      	str	r2, [r3, #4]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000358:	187b      	adds	r3, r7, r1
 800035a:	2200      	movs	r2, #0
 800035c:	609a      	str	r2, [r3, #8]
    sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800035e:	187b      	adds	r3, r7, r1
 8000360:	2200      	movs	r2, #0
 8000362:	60da      	str	r2, [r3, #12]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000364:	187b      	adds	r3, r7, r1
 8000366:	2200      	movs	r2, #0
 8000368:	611a      	str	r2, [r3, #16]
    sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800036a:	187b      	adds	r3, r7, r1
 800036c:	2200      	movs	r2, #0
 800036e:	615a      	str	r2, [r3, #20]
    sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000370:	187b      	adds	r3, r7, r1
 8000372:	2200      	movs	r2, #0
 8000374:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_PWM_ConfigChannel(&servoPWM, &sConfigOC, TIM_CHANNEL_2) != HAL_OK) {
 8000376:	1879      	adds	r1, r7, r1
 8000378:	4b08      	ldr	r3, [pc, #32]	; (800039c <set_pulse+0x6c>)
 800037a:	2204      	movs	r2, #4
 800037c:	0018      	movs	r0, r3
 800037e:	f001 fba5 	bl	8001acc <HAL_TIM_PWM_ConfigChannel>
 8000382:	1e03      	subs	r3, r0, #0
 8000384:	d001      	beq.n	800038a <set_pulse+0x5a>
        Error_Handler();
 8000386:	f000 f9f3 	bl	8000770 <Error_Handler>
    }
    HAL_TIM_PWM_Start(&servoPWM, TIM_CHANNEL_2);
 800038a:	4b04      	ldr	r3, [pc, #16]	; (800039c <set_pulse+0x6c>)
 800038c:	2104      	movs	r1, #4
 800038e:	0018      	movs	r0, r3
 8000390:	f001 fb56 	bl	8001a40 <HAL_TIM_PWM_Start>
}
 8000394:	46c0      	nop			; (mov r8, r8)
 8000396:	46bd      	mov	sp, r7
 8000398:	b00b      	add	sp, #44	; 0x2c
 800039a:	bd90      	pop	{r4, r7, pc}
 800039c:	20000038 	.word	0x20000038

080003a0 <strum>:

void strum() {
 80003a0:	b580      	push	{r7, lr}
 80003a2:	af00      	add	r7, sp, #0
    if(is_flipped == 0) {
 80003a4:	4b09      	ldr	r3, [pc, #36]	; (80003cc <strum+0x2c>)
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d106      	bne.n	80003ba <strum+0x1a>
        set_pulse(STRUMMED_ON_POSITION);
 80003ac:	2010      	movs	r0, #16
 80003ae:	f7ff ffbf 	bl	8000330 <set_pulse>
        is_flipped = 1;
 80003b2:	4b06      	ldr	r3, [pc, #24]	; (80003cc <strum+0x2c>)
 80003b4:	2201      	movs	r2, #1
 80003b6:	601a      	str	r2, [r3, #0]
    }
    else {
        set_pulse(STRUMMED_OFF_POSITION);
        is_flipped = 0;
    }
}
 80003b8:	e005      	b.n	80003c6 <strum+0x26>
        set_pulse(STRUMMED_OFF_POSITION);
 80003ba:	200f      	movs	r0, #15
 80003bc:	f7ff ffb8 	bl	8000330 <set_pulse>
        is_flipped = 0;
 80003c0:	4b02      	ldr	r3, [pc, #8]	; (80003cc <strum+0x2c>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	601a      	str	r2, [r3, #0]
}
 80003c6:	46c0      	nop			; (mov r8, r8)
 80003c8:	46bd      	mov	sp, r7
 80003ca:	bd80      	pop	{r7, pc}
 80003cc:	20000034 	.word	0x20000034

080003d0 <pass_servo_pwm>:

void pass_servo_pwm(TIM_HandleTypeDef *s) { //used when the system is being initalized to pass the servo pwm controller. Todo: change to extern statement
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b082      	sub	sp, #8
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	6078      	str	r0, [r7, #4]
    servoPWM = s->Instance;
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	681a      	ldr	r2, [r3, #0]
 80003dc:	4b02      	ldr	r3, [pc, #8]	; (80003e8 <pass_servo_pwm+0x18>)
 80003de:	601a      	str	r2, [r3, #0]
}
 80003e0:	46c0      	nop			; (mov r8, r8)
 80003e2:	46bd      	mov	sp, r7
 80003e4:	b002      	add	sp, #8
 80003e6:	bd80      	pop	{r7, pc}
 80003e8:	20000038 	.word	0x20000038

080003ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003f0:	f000 fadc 	bl	80009ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003f4:	f000 f832 	bl	800045c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003f8:	f000 f95a 	bl	80006b0 <MX_GPIO_Init>
  MX_TIM1_Init();
 80003fc:	f000 f890 	bl	8000520 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000400:	f000 f924 	bl	800064c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000404:	4b12      	ldr	r3, [pc, #72]	; (8000450 <main+0x64>)
 8000406:	2104      	movs	r1, #4
 8000408:	0018      	movs	r0, r3
 800040a:	f001 fb19 	bl	8001a40 <HAL_TIM_PWM_Start>
  pass_servo_pwm(&htim1);
 800040e:	4b10      	ldr	r3, [pc, #64]	; (8000450 <main+0x64>)
 8000410:	0018      	movs	r0, r3
 8000412:	f7ff ffdd 	bl	80003d0 <pass_servo_pwm>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  blink(3);
 8000416:	2003      	movs	r0, #3
 8000418:	f000 f982 	bl	8000720 <blink>
  toggleLED();
 800041c:	f000 f99c 	bl	8000758 <toggleLED>
  strum();
 8000420:	f7ff ffbe 	bl	80003a0 <strum>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	if(HAL_UART_Receive(&huart1, &message, 1, HAL_MAX_DELAY) == HAL_OK) {
 8000424:	2301      	movs	r3, #1
 8000426:	425b      	negs	r3, r3
 8000428:	490a      	ldr	r1, [pc, #40]	; (8000454 <main+0x68>)
 800042a:	480b      	ldr	r0, [pc, #44]	; (8000458 <main+0x6c>)
 800042c:	2201      	movs	r2, #1
 800042e:	f001 ff79 	bl	8002324 <HAL_UART_Receive>
 8000432:	1e03      	subs	r3, r0, #0
 8000434:	d1f6      	bne.n	8000424 <main+0x38>
		if(process_midi_message(message)) {
 8000436:	4b07      	ldr	r3, [pc, #28]	; (8000454 <main+0x68>)
 8000438:	781b      	ldrb	r3, [r3, #0]
 800043a:	0018      	movs	r0, r3
 800043c:	f7ff fef0 	bl	8000220 <process_midi_message>
 8000440:	1e03      	subs	r3, r0, #0
 8000442:	d0ef      	beq.n	8000424 <main+0x38>
			toggleLED();
 8000444:	f000 f988 	bl	8000758 <toggleLED>
			strum();
 8000448:	f7ff ffaa 	bl	80003a0 <strum>
	if(HAL_UART_Receive(&huart1, &message, 1, HAL_MAX_DELAY) == HAL_OK) {
 800044c:	e7ea      	b.n	8000424 <main+0x38>
 800044e:	46c0      	nop			; (mov r8, r8)
 8000450:	200000bc 	.word	0x200000bc
 8000454:	20000004 	.word	0x20000004
 8000458:	2000003c 	.word	0x2000003c

0800045c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800045c:	b590      	push	{r4, r7, lr}
 800045e:	b095      	sub	sp, #84	; 0x54
 8000460:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000462:	2420      	movs	r4, #32
 8000464:	193b      	adds	r3, r7, r4
 8000466:	0018      	movs	r0, r3
 8000468:	2330      	movs	r3, #48	; 0x30
 800046a:	001a      	movs	r2, r3
 800046c:	2100      	movs	r1, #0
 800046e:	f002 fb3b 	bl	8002ae8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000472:	2310      	movs	r3, #16
 8000474:	18fb      	adds	r3, r7, r3
 8000476:	0018      	movs	r0, r3
 8000478:	2310      	movs	r3, #16
 800047a:	001a      	movs	r2, r3
 800047c:	2100      	movs	r1, #0
 800047e:	f002 fb33 	bl	8002ae8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000482:	003b      	movs	r3, r7
 8000484:	0018      	movs	r0, r3
 8000486:	2310      	movs	r3, #16
 8000488:	001a      	movs	r2, r3
 800048a:	2100      	movs	r1, #0
 800048c:	f002 fb2c 	bl	8002ae8 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000490:	0021      	movs	r1, r4
 8000492:	187b      	adds	r3, r7, r1
 8000494:	2202      	movs	r2, #2
 8000496:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000498:	187b      	adds	r3, r7, r1
 800049a:	2201      	movs	r2, #1
 800049c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800049e:	187b      	adds	r3, r7, r1
 80004a0:	2210      	movs	r2, #16
 80004a2:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004a4:	187b      	adds	r3, r7, r1
 80004a6:	2202      	movs	r2, #2
 80004a8:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80004aa:	187b      	adds	r3, r7, r1
 80004ac:	2200      	movs	r2, #0
 80004ae:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80004b0:	187b      	adds	r3, r7, r1
 80004b2:	22a0      	movs	r2, #160	; 0xa0
 80004b4:	0392      	lsls	r2, r2, #14
 80004b6:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80004b8:	187b      	adds	r3, r7, r1
 80004ba:	2200      	movs	r2, #0
 80004bc:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004be:	187b      	adds	r3, r7, r1
 80004c0:	0018      	movs	r0, r3
 80004c2:	f000 fd55 	bl	8000f70 <HAL_RCC_OscConfig>
 80004c6:	1e03      	subs	r3, r0, #0
 80004c8:	d001      	beq.n	80004ce <SystemClock_Config+0x72>
  {
    Error_Handler();
 80004ca:	f000 f951 	bl	8000770 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004ce:	2110      	movs	r1, #16
 80004d0:	187b      	adds	r3, r7, r1
 80004d2:	2207      	movs	r2, #7
 80004d4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004d6:	187b      	adds	r3, r7, r1
 80004d8:	2202      	movs	r2, #2
 80004da:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004dc:	187b      	adds	r3, r7, r1
 80004de:	2200      	movs	r2, #0
 80004e0:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004e2:	187b      	adds	r3, r7, r1
 80004e4:	2200      	movs	r2, #0
 80004e6:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80004e8:	187b      	adds	r3, r7, r1
 80004ea:	2101      	movs	r1, #1
 80004ec:	0018      	movs	r0, r3
 80004ee:	f001 f85b 	bl	80015a8 <HAL_RCC_ClockConfig>
 80004f2:	1e03      	subs	r3, r0, #0
 80004f4:	d001      	beq.n	80004fa <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80004f6:	f000 f93b 	bl	8000770 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80004fa:	003b      	movs	r3, r7
 80004fc:	2201      	movs	r2, #1
 80004fe:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000500:	003b      	movs	r3, r7
 8000502:	2200      	movs	r2, #0
 8000504:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000506:	003b      	movs	r3, r7
 8000508:	0018      	movs	r0, r3
 800050a:	f001 f99f 	bl	800184c <HAL_RCCEx_PeriphCLKConfig>
 800050e:	1e03      	subs	r3, r0, #0
 8000510:	d001      	beq.n	8000516 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000512:	f000 f92d 	bl	8000770 <Error_Handler>
  }
}
 8000516:	46c0      	nop			; (mov r8, r8)
 8000518:	46bd      	mov	sp, r7
 800051a:	b015      	add	sp, #84	; 0x54
 800051c:	bd90      	pop	{r4, r7, pc}
	...

08000520 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b092      	sub	sp, #72	; 0x48
 8000524:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000526:	2340      	movs	r3, #64	; 0x40
 8000528:	18fb      	adds	r3, r7, r3
 800052a:	0018      	movs	r0, r3
 800052c:	2308      	movs	r3, #8
 800052e:	001a      	movs	r2, r3
 8000530:	2100      	movs	r1, #0
 8000532:	f002 fad9 	bl	8002ae8 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000536:	2324      	movs	r3, #36	; 0x24
 8000538:	18fb      	adds	r3, r7, r3
 800053a:	0018      	movs	r0, r3
 800053c:	231c      	movs	r3, #28
 800053e:	001a      	movs	r2, r3
 8000540:	2100      	movs	r1, #0
 8000542:	f002 fad1 	bl	8002ae8 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000546:	1d3b      	adds	r3, r7, #4
 8000548:	0018      	movs	r0, r3
 800054a:	2320      	movs	r3, #32
 800054c:	001a      	movs	r2, r3
 800054e:	2100      	movs	r1, #0
 8000550:	f002 faca 	bl	8002ae8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000554:	4b3a      	ldr	r3, [pc, #232]	; (8000640 <MX_TIM1_Init+0x120>)
 8000556:	4a3b      	ldr	r2, [pc, #236]	; (8000644 <MX_TIM1_Init+0x124>)
 8000558:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 4650;
 800055a:	4b39      	ldr	r3, [pc, #228]	; (8000640 <MX_TIM1_Init+0x120>)
 800055c:	4a3a      	ldr	r2, [pc, #232]	; (8000648 <MX_TIM1_Init+0x128>)
 800055e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000560:	4b37      	ldr	r3, [pc, #220]	; (8000640 <MX_TIM1_Init+0x120>)
 8000562:	2200      	movs	r2, #0
 8000564:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100;
 8000566:	4b36      	ldr	r3, [pc, #216]	; (8000640 <MX_TIM1_Init+0x120>)
 8000568:	2264      	movs	r2, #100	; 0x64
 800056a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800056c:	4b34      	ldr	r3, [pc, #208]	; (8000640 <MX_TIM1_Init+0x120>)
 800056e:	2200      	movs	r2, #0
 8000570:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000572:	4b33      	ldr	r3, [pc, #204]	; (8000640 <MX_TIM1_Init+0x120>)
 8000574:	2200      	movs	r2, #0
 8000576:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000578:	4b31      	ldr	r3, [pc, #196]	; (8000640 <MX_TIM1_Init+0x120>)
 800057a:	2200      	movs	r2, #0
 800057c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800057e:	4b30      	ldr	r3, [pc, #192]	; (8000640 <MX_TIM1_Init+0x120>)
 8000580:	0018      	movs	r0, r3
 8000582:	f001 fa31 	bl	80019e8 <HAL_TIM_PWM_Init>
 8000586:	1e03      	subs	r3, r0, #0
 8000588:	d001      	beq.n	800058e <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 800058a:	f000 f8f1 	bl	8000770 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800058e:	2140      	movs	r1, #64	; 0x40
 8000590:	187b      	adds	r3, r7, r1
 8000592:	2200      	movs	r2, #0
 8000594:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000596:	187b      	adds	r3, r7, r1
 8000598:	2200      	movs	r2, #0
 800059a:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800059c:	187a      	adds	r2, r7, r1
 800059e:	4b28      	ldr	r3, [pc, #160]	; (8000640 <MX_TIM1_Init+0x120>)
 80005a0:	0011      	movs	r1, r2
 80005a2:	0018      	movs	r0, r3
 80005a4:	f001 fdba 	bl	800211c <HAL_TIMEx_MasterConfigSynchronization>
 80005a8:	1e03      	subs	r3, r0, #0
 80005aa:	d001      	beq.n	80005b0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80005ac:	f000 f8e0 	bl	8000770 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80005b0:	2124      	movs	r1, #36	; 0x24
 80005b2:	187b      	adds	r3, r7, r1
 80005b4:	2260      	movs	r2, #96	; 0x60
 80005b6:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80005b8:	187b      	adds	r3, r7, r1
 80005ba:	2200      	movs	r2, #0
 80005bc:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80005be:	187b      	adds	r3, r7, r1
 80005c0:	2200      	movs	r2, #0
 80005c2:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80005c4:	187b      	adds	r3, r7, r1
 80005c6:	2200      	movs	r2, #0
 80005c8:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80005ca:	187b      	adds	r3, r7, r1
 80005cc:	2200      	movs	r2, #0
 80005ce:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80005d0:	187b      	adds	r3, r7, r1
 80005d2:	2200      	movs	r2, #0
 80005d4:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80005d6:	187b      	adds	r3, r7, r1
 80005d8:	2200      	movs	r2, #0
 80005da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80005dc:	1879      	adds	r1, r7, r1
 80005de:	4b18      	ldr	r3, [pc, #96]	; (8000640 <MX_TIM1_Init+0x120>)
 80005e0:	2204      	movs	r2, #4
 80005e2:	0018      	movs	r0, r3
 80005e4:	f001 fa72 	bl	8001acc <HAL_TIM_PWM_ConfigChannel>
 80005e8:	1e03      	subs	r3, r0, #0
 80005ea:	d001      	beq.n	80005f0 <MX_TIM1_Init+0xd0>
  {
    Error_Handler();
 80005ec:	f000 f8c0 	bl	8000770 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80005f0:	1d3b      	adds	r3, r7, #4
 80005f2:	2200      	movs	r2, #0
 80005f4:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80005f6:	1d3b      	adds	r3, r7, #4
 80005f8:	2200      	movs	r2, #0
 80005fa:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80005fc:	1d3b      	adds	r3, r7, #4
 80005fe:	2200      	movs	r2, #0
 8000600:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000602:	1d3b      	adds	r3, r7, #4
 8000604:	2200      	movs	r2, #0
 8000606:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000608:	1d3b      	adds	r3, r7, #4
 800060a:	2200      	movs	r2, #0
 800060c:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800060e:	1d3b      	adds	r3, r7, #4
 8000610:	2280      	movs	r2, #128	; 0x80
 8000612:	0192      	lsls	r2, r2, #6
 8000614:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000616:	1d3b      	adds	r3, r7, #4
 8000618:	2200      	movs	r2, #0
 800061a:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800061c:	1d3a      	adds	r2, r7, #4
 800061e:	4b08      	ldr	r3, [pc, #32]	; (8000640 <MX_TIM1_Init+0x120>)
 8000620:	0011      	movs	r1, r2
 8000622:	0018      	movs	r0, r3
 8000624:	f001 fdcc 	bl	80021c0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000628:	1e03      	subs	r3, r0, #0
 800062a:	d001      	beq.n	8000630 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 800062c:	f000 f8a0 	bl	8000770 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000630:	4b03      	ldr	r3, [pc, #12]	; (8000640 <MX_TIM1_Init+0x120>)
 8000632:	0018      	movs	r0, r3
 8000634:	f000 f8e6 	bl	8000804 <HAL_TIM_MspPostInit>

}
 8000638:	46c0      	nop			; (mov r8, r8)
 800063a:	46bd      	mov	sp, r7
 800063c:	b012      	add	sp, #72	; 0x48
 800063e:	bd80      	pop	{r7, pc}
 8000640:	200000bc 	.word	0x200000bc
 8000644:	40012c00 	.word	0x40012c00
 8000648:	0000122a 	.word	0x0000122a

0800064c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000650:	4b14      	ldr	r3, [pc, #80]	; (80006a4 <MX_USART1_UART_Init+0x58>)
 8000652:	4a15      	ldr	r2, [pc, #84]	; (80006a8 <MX_USART1_UART_Init+0x5c>)
 8000654:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 31250;
 8000656:	4b13      	ldr	r3, [pc, #76]	; (80006a4 <MX_USART1_UART_Init+0x58>)
 8000658:	4a14      	ldr	r2, [pc, #80]	; (80006ac <MX_USART1_UART_Init+0x60>)
 800065a:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800065c:	4b11      	ldr	r3, [pc, #68]	; (80006a4 <MX_USART1_UART_Init+0x58>)
 800065e:	2200      	movs	r2, #0
 8000660:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000662:	4b10      	ldr	r3, [pc, #64]	; (80006a4 <MX_USART1_UART_Init+0x58>)
 8000664:	2200      	movs	r2, #0
 8000666:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000668:	4b0e      	ldr	r3, [pc, #56]	; (80006a4 <MX_USART1_UART_Init+0x58>)
 800066a:	2200      	movs	r2, #0
 800066c:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800066e:	4b0d      	ldr	r3, [pc, #52]	; (80006a4 <MX_USART1_UART_Init+0x58>)
 8000670:	220c      	movs	r2, #12
 8000672:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000674:	4b0b      	ldr	r3, [pc, #44]	; (80006a4 <MX_USART1_UART_Init+0x58>)
 8000676:	2200      	movs	r2, #0
 8000678:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800067a:	4b0a      	ldr	r3, [pc, #40]	; (80006a4 <MX_USART1_UART_Init+0x58>)
 800067c:	2200      	movs	r2, #0
 800067e:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000680:	4b08      	ldr	r3, [pc, #32]	; (80006a4 <MX_USART1_UART_Init+0x58>)
 8000682:	2200      	movs	r2, #0
 8000684:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000686:	4b07      	ldr	r3, [pc, #28]	; (80006a4 <MX_USART1_UART_Init+0x58>)
 8000688:	2200      	movs	r2, #0
 800068a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800068c:	4b05      	ldr	r3, [pc, #20]	; (80006a4 <MX_USART1_UART_Init+0x58>)
 800068e:	0018      	movs	r0, r3
 8000690:	f001 fdf4 	bl	800227c <HAL_UART_Init>
 8000694:	1e03      	subs	r3, r0, #0
 8000696:	d001      	beq.n	800069c <MX_USART1_UART_Init+0x50>
  {
    Error_Handler();
 8000698:	f000 f86a 	bl	8000770 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800069c:	46c0      	nop			; (mov r8, r8)
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	46c0      	nop			; (mov r8, r8)
 80006a4:	2000003c 	.word	0x2000003c
 80006a8:	40013800 	.word	0x40013800
 80006ac:	00007a12 	.word	0x00007a12

080006b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b086      	sub	sp, #24
 80006b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b6:	1d3b      	adds	r3, r7, #4
 80006b8:	0018      	movs	r0, r3
 80006ba:	2314      	movs	r3, #20
 80006bc:	001a      	movs	r2, r3
 80006be:	2100      	movs	r1, #0
 80006c0:	f002 fa12 	bl	8002ae8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006c4:	4b15      	ldr	r3, [pc, #84]	; (800071c <MX_GPIO_Init+0x6c>)
 80006c6:	695a      	ldr	r2, [r3, #20]
 80006c8:	4b14      	ldr	r3, [pc, #80]	; (800071c <MX_GPIO_Init+0x6c>)
 80006ca:	2180      	movs	r1, #128	; 0x80
 80006cc:	0289      	lsls	r1, r1, #10
 80006ce:	430a      	orrs	r2, r1
 80006d0:	615a      	str	r2, [r3, #20]
 80006d2:	4b12      	ldr	r3, [pc, #72]	; (800071c <MX_GPIO_Init+0x6c>)
 80006d4:	695a      	ldr	r2, [r3, #20]
 80006d6:	2380      	movs	r3, #128	; 0x80
 80006d8:	029b      	lsls	r3, r3, #10
 80006da:	4013      	ands	r3, r2
 80006dc:	603b      	str	r3, [r7, #0]
 80006de:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, GPIO_PIN_RESET);
 80006e0:	2390      	movs	r3, #144	; 0x90
 80006e2:	05db      	lsls	r3, r3, #23
 80006e4:	2200      	movs	r2, #0
 80006e6:	2110      	movs	r1, #16
 80006e8:	0018      	movs	r0, r3
 80006ea:	f000 fc09 	bl	8000f00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : led_Pin */
  GPIO_InitStruct.Pin = led_Pin;
 80006ee:	1d3b      	adds	r3, r7, #4
 80006f0:	2210      	movs	r2, #16
 80006f2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006f4:	1d3b      	adds	r3, r7, #4
 80006f6:	2201      	movs	r2, #1
 80006f8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fa:	1d3b      	adds	r3, r7, #4
 80006fc:	2200      	movs	r2, #0
 80006fe:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000700:	1d3b      	adds	r3, r7, #4
 8000702:	2200      	movs	r2, #0
 8000704:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(led_GPIO_Port, &GPIO_InitStruct);
 8000706:	1d3a      	adds	r2, r7, #4
 8000708:	2390      	movs	r3, #144	; 0x90
 800070a:	05db      	lsls	r3, r3, #23
 800070c:	0011      	movs	r1, r2
 800070e:	0018      	movs	r0, r3
 8000710:	f000 fa86 	bl	8000c20 <HAL_GPIO_Init>

}
 8000714:	46c0      	nop			; (mov r8, r8)
 8000716:	46bd      	mov	sp, r7
 8000718:	b006      	add	sp, #24
 800071a:	bd80      	pop	{r7, pc}
 800071c:	40021000 	.word	0x40021000

08000720 <blink>:

/* USER CODE BEGIN 4 */
void blink(int x) {
 8000720:	b580      	push	{r7, lr}
 8000722:	b084      	sub	sp, #16
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < x * 2; i++) {
 8000728:	2300      	movs	r3, #0
 800072a:	60fb      	str	r3, [r7, #12]
 800072c:	e00b      	b.n	8000746 <blink+0x26>
		HAL_GPIO_TogglePin(led_GPIO_Port, led_Pin);
 800072e:	2390      	movs	r3, #144	; 0x90
 8000730:	05db      	lsls	r3, r3, #23
 8000732:	2110      	movs	r1, #16
 8000734:	0018      	movs	r0, r3
 8000736:	f000 fc00 	bl	8000f3a <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 800073a:	2064      	movs	r0, #100	; 0x64
 800073c:	f000 f99a 	bl	8000a74 <HAL_Delay>
	for(int i = 0; i < x * 2; i++) {
 8000740:	68fb      	ldr	r3, [r7, #12]
 8000742:	3301      	adds	r3, #1
 8000744:	60fb      	str	r3, [r7, #12]
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	005b      	lsls	r3, r3, #1
 800074a:	68fa      	ldr	r2, [r7, #12]
 800074c:	429a      	cmp	r2, r3
 800074e:	dbee      	blt.n	800072e <blink+0xe>
	}
}
 8000750:	46c0      	nop			; (mov r8, r8)
 8000752:	46bd      	mov	sp, r7
 8000754:	b004      	add	sp, #16
 8000756:	bd80      	pop	{r7, pc}

08000758 <toggleLED>:

int toggleLED() {
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(led_GPIO_Port, led_Pin);
 800075c:	2390      	movs	r3, #144	; 0x90
 800075e:	05db      	lsls	r3, r3, #23
 8000760:	2110      	movs	r1, #16
 8000762:	0018      	movs	r0, r3
 8000764:	f000 fbe9 	bl	8000f3a <HAL_GPIO_TogglePin>
	return 0;
 8000768:	2300      	movs	r3, #0
}
 800076a:	0018      	movs	r0, r3
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}

08000770 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000774:	46c0      	nop			; (mov r8, r8)
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
	...

0800077c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000782:	4b0f      	ldr	r3, [pc, #60]	; (80007c0 <HAL_MspInit+0x44>)
 8000784:	699a      	ldr	r2, [r3, #24]
 8000786:	4b0e      	ldr	r3, [pc, #56]	; (80007c0 <HAL_MspInit+0x44>)
 8000788:	2101      	movs	r1, #1
 800078a:	430a      	orrs	r2, r1
 800078c:	619a      	str	r2, [r3, #24]
 800078e:	4b0c      	ldr	r3, [pc, #48]	; (80007c0 <HAL_MspInit+0x44>)
 8000790:	699b      	ldr	r3, [r3, #24]
 8000792:	2201      	movs	r2, #1
 8000794:	4013      	ands	r3, r2
 8000796:	607b      	str	r3, [r7, #4]
 8000798:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800079a:	4b09      	ldr	r3, [pc, #36]	; (80007c0 <HAL_MspInit+0x44>)
 800079c:	69da      	ldr	r2, [r3, #28]
 800079e:	4b08      	ldr	r3, [pc, #32]	; (80007c0 <HAL_MspInit+0x44>)
 80007a0:	2180      	movs	r1, #128	; 0x80
 80007a2:	0549      	lsls	r1, r1, #21
 80007a4:	430a      	orrs	r2, r1
 80007a6:	61da      	str	r2, [r3, #28]
 80007a8:	4b05      	ldr	r3, [pc, #20]	; (80007c0 <HAL_MspInit+0x44>)
 80007aa:	69da      	ldr	r2, [r3, #28]
 80007ac:	2380      	movs	r3, #128	; 0x80
 80007ae:	055b      	lsls	r3, r3, #21
 80007b0:	4013      	ands	r3, r2
 80007b2:	603b      	str	r3, [r7, #0]
 80007b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007b6:	46c0      	nop			; (mov r8, r8)
 80007b8:	46bd      	mov	sp, r7
 80007ba:	b002      	add	sp, #8
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	46c0      	nop			; (mov r8, r8)
 80007c0:	40021000 	.word	0x40021000

080007c4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b084      	sub	sp, #16
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	4a0a      	ldr	r2, [pc, #40]	; (80007fc <HAL_TIM_PWM_MspInit+0x38>)
 80007d2:	4293      	cmp	r3, r2
 80007d4:	d10d      	bne.n	80007f2 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80007d6:	4b0a      	ldr	r3, [pc, #40]	; (8000800 <HAL_TIM_PWM_MspInit+0x3c>)
 80007d8:	699a      	ldr	r2, [r3, #24]
 80007da:	4b09      	ldr	r3, [pc, #36]	; (8000800 <HAL_TIM_PWM_MspInit+0x3c>)
 80007dc:	2180      	movs	r1, #128	; 0x80
 80007de:	0109      	lsls	r1, r1, #4
 80007e0:	430a      	orrs	r2, r1
 80007e2:	619a      	str	r2, [r3, #24]
 80007e4:	4b06      	ldr	r3, [pc, #24]	; (8000800 <HAL_TIM_PWM_MspInit+0x3c>)
 80007e6:	699a      	ldr	r2, [r3, #24]
 80007e8:	2380      	movs	r3, #128	; 0x80
 80007ea:	011b      	lsls	r3, r3, #4
 80007ec:	4013      	ands	r3, r2
 80007ee:	60fb      	str	r3, [r7, #12]
 80007f0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80007f2:	46c0      	nop			; (mov r8, r8)
 80007f4:	46bd      	mov	sp, r7
 80007f6:	b004      	add	sp, #16
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	46c0      	nop			; (mov r8, r8)
 80007fc:	40012c00 	.word	0x40012c00
 8000800:	40021000 	.word	0x40021000

08000804 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b088      	sub	sp, #32
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800080c:	230c      	movs	r3, #12
 800080e:	18fb      	adds	r3, r7, r3
 8000810:	0018      	movs	r0, r3
 8000812:	2314      	movs	r3, #20
 8000814:	001a      	movs	r2, r3
 8000816:	2100      	movs	r1, #0
 8000818:	f002 f966 	bl	8002ae8 <memset>
  if(htim->Instance==TIM1)
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4a16      	ldr	r2, [pc, #88]	; (800087c <HAL_TIM_MspPostInit+0x78>)
 8000822:	4293      	cmp	r3, r2
 8000824:	d125      	bne.n	8000872 <HAL_TIM_MspPostInit+0x6e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000826:	4b16      	ldr	r3, [pc, #88]	; (8000880 <HAL_TIM_MspPostInit+0x7c>)
 8000828:	695a      	ldr	r2, [r3, #20]
 800082a:	4b15      	ldr	r3, [pc, #84]	; (8000880 <HAL_TIM_MspPostInit+0x7c>)
 800082c:	2180      	movs	r1, #128	; 0x80
 800082e:	0289      	lsls	r1, r1, #10
 8000830:	430a      	orrs	r2, r1
 8000832:	615a      	str	r2, [r3, #20]
 8000834:	4b12      	ldr	r3, [pc, #72]	; (8000880 <HAL_TIM_MspPostInit+0x7c>)
 8000836:	695a      	ldr	r2, [r3, #20]
 8000838:	2380      	movs	r3, #128	; 0x80
 800083a:	029b      	lsls	r3, r3, #10
 800083c:	4013      	ands	r3, r2
 800083e:	60bb      	str	r3, [r7, #8]
 8000840:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration    
    PA9     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000842:	210c      	movs	r1, #12
 8000844:	187b      	adds	r3, r7, r1
 8000846:	2280      	movs	r2, #128	; 0x80
 8000848:	0092      	lsls	r2, r2, #2
 800084a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800084c:	187b      	adds	r3, r7, r1
 800084e:	2202      	movs	r2, #2
 8000850:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000852:	187b      	adds	r3, r7, r1
 8000854:	2200      	movs	r2, #0
 8000856:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000858:	187b      	adds	r3, r7, r1
 800085a:	2200      	movs	r2, #0
 800085c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800085e:	187b      	adds	r3, r7, r1
 8000860:	2202      	movs	r2, #2
 8000862:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000864:	187a      	adds	r2, r7, r1
 8000866:	2390      	movs	r3, #144	; 0x90
 8000868:	05db      	lsls	r3, r3, #23
 800086a:	0011      	movs	r1, r2
 800086c:	0018      	movs	r0, r3
 800086e:	f000 f9d7 	bl	8000c20 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000872:	46c0      	nop			; (mov r8, r8)
 8000874:	46bd      	mov	sp, r7
 8000876:	b008      	add	sp, #32
 8000878:	bd80      	pop	{r7, pc}
 800087a:	46c0      	nop			; (mov r8, r8)
 800087c:	40012c00 	.word	0x40012c00
 8000880:	40021000 	.word	0x40021000

08000884 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b08a      	sub	sp, #40	; 0x28
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800088c:	2314      	movs	r3, #20
 800088e:	18fb      	adds	r3, r7, r3
 8000890:	0018      	movs	r0, r3
 8000892:	2314      	movs	r3, #20
 8000894:	001a      	movs	r2, r3
 8000896:	2100      	movs	r1, #0
 8000898:	f002 f926 	bl	8002ae8 <memset>
  if(huart->Instance==USART1)
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	4a1c      	ldr	r2, [pc, #112]	; (8000914 <HAL_UART_MspInit+0x90>)
 80008a2:	4293      	cmp	r3, r2
 80008a4:	d132      	bne.n	800090c <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80008a6:	4b1c      	ldr	r3, [pc, #112]	; (8000918 <HAL_UART_MspInit+0x94>)
 80008a8:	699a      	ldr	r2, [r3, #24]
 80008aa:	4b1b      	ldr	r3, [pc, #108]	; (8000918 <HAL_UART_MspInit+0x94>)
 80008ac:	2180      	movs	r1, #128	; 0x80
 80008ae:	01c9      	lsls	r1, r1, #7
 80008b0:	430a      	orrs	r2, r1
 80008b2:	619a      	str	r2, [r3, #24]
 80008b4:	4b18      	ldr	r3, [pc, #96]	; (8000918 <HAL_UART_MspInit+0x94>)
 80008b6:	699a      	ldr	r2, [r3, #24]
 80008b8:	2380      	movs	r3, #128	; 0x80
 80008ba:	01db      	lsls	r3, r3, #7
 80008bc:	4013      	ands	r3, r2
 80008be:	613b      	str	r3, [r7, #16]
 80008c0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008c2:	4b15      	ldr	r3, [pc, #84]	; (8000918 <HAL_UART_MspInit+0x94>)
 80008c4:	695a      	ldr	r2, [r3, #20]
 80008c6:	4b14      	ldr	r3, [pc, #80]	; (8000918 <HAL_UART_MspInit+0x94>)
 80008c8:	2180      	movs	r1, #128	; 0x80
 80008ca:	0289      	lsls	r1, r1, #10
 80008cc:	430a      	orrs	r2, r1
 80008ce:	615a      	str	r2, [r3, #20]
 80008d0:	4b11      	ldr	r3, [pc, #68]	; (8000918 <HAL_UART_MspInit+0x94>)
 80008d2:	695a      	ldr	r2, [r3, #20]
 80008d4:	2380      	movs	r3, #128	; 0x80
 80008d6:	029b      	lsls	r3, r3, #10
 80008d8:	4013      	ands	r3, r2
 80008da:	60fb      	str	r3, [r7, #12]
 80008dc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA2     ------> USART1_TX
    PA3     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80008de:	2114      	movs	r1, #20
 80008e0:	187b      	adds	r3, r7, r1
 80008e2:	220c      	movs	r2, #12
 80008e4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e6:	187b      	adds	r3, r7, r1
 80008e8:	2202      	movs	r2, #2
 80008ea:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ec:	187b      	adds	r3, r7, r1
 80008ee:	2200      	movs	r2, #0
 80008f0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008f2:	187b      	adds	r3, r7, r1
 80008f4:	2203      	movs	r2, #3
 80008f6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80008f8:	187b      	adds	r3, r7, r1
 80008fa:	2201      	movs	r2, #1
 80008fc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008fe:	187a      	adds	r2, r7, r1
 8000900:	2390      	movs	r3, #144	; 0x90
 8000902:	05db      	lsls	r3, r3, #23
 8000904:	0011      	movs	r1, r2
 8000906:	0018      	movs	r0, r3
 8000908:	f000 f98a 	bl	8000c20 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800090c:	46c0      	nop			; (mov r8, r8)
 800090e:	46bd      	mov	sp, r7
 8000910:	b00a      	add	sp, #40	; 0x28
 8000912:	bd80      	pop	{r7, pc}
 8000914:	40013800 	.word	0x40013800
 8000918:	40021000 	.word	0x40021000

0800091c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000920:	46c0      	nop			; (mov r8, r8)
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}

08000926 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000926:	b580      	push	{r7, lr}
 8000928:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800092a:	e7fe      	b.n	800092a <HardFault_Handler+0x4>

0800092c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000930:	46c0      	nop			; (mov r8, r8)
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}

08000936 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000936:	b580      	push	{r7, lr}
 8000938:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800093a:	46c0      	nop			; (mov r8, r8)
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}

08000940 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000944:	f000 f87a 	bl	8000a3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000948:	46c0      	nop			; (mov r8, r8)
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}

0800094e <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800094e:	b580      	push	{r7, lr}
 8000950:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000952:	46c0      	nop			; (mov r8, r8)
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}

08000958 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000958:	480d      	ldr	r0, [pc, #52]	; (8000990 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800095a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800095c:	480d      	ldr	r0, [pc, #52]	; (8000994 <LoopForever+0x6>)
  ldr r1, =_edata
 800095e:	490e      	ldr	r1, [pc, #56]	; (8000998 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000960:	4a0e      	ldr	r2, [pc, #56]	; (800099c <LoopForever+0xe>)
  movs r3, #0
 8000962:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000964:	e002      	b.n	800096c <LoopCopyDataInit>

08000966 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000966:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000968:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800096a:	3304      	adds	r3, #4

0800096c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800096c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800096e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000970:	d3f9      	bcc.n	8000966 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000972:	4a0b      	ldr	r2, [pc, #44]	; (80009a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000974:	4c0b      	ldr	r4, [pc, #44]	; (80009a4 <LoopForever+0x16>)
  movs r3, #0
 8000976:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000978:	e001      	b.n	800097e <LoopFillZerobss>

0800097a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800097a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800097c:	3204      	adds	r2, #4

0800097e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800097e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000980:	d3fb      	bcc.n	800097a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000982:	f7ff ffe4 	bl	800094e <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000986:	f002 f88b 	bl	8002aa0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800098a:	f7ff fd2f 	bl	80003ec <main>

0800098e <LoopForever>:

LoopForever:
    b LoopForever
 800098e:	e7fe      	b.n	800098e <LoopForever>
  ldr   r0, =_estack
 8000990:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8000994:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000998:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 800099c:	08002b50 	.word	0x08002b50
  ldr r2, =_sbss
 80009a0:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 80009a4:	20000100 	.word	0x20000100

080009a8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009a8:	e7fe      	b.n	80009a8 <ADC1_IRQHandler>
	...

080009ac <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009b0:	4b07      	ldr	r3, [pc, #28]	; (80009d0 <HAL_Init+0x24>)
 80009b2:	681a      	ldr	r2, [r3, #0]
 80009b4:	4b06      	ldr	r3, [pc, #24]	; (80009d0 <HAL_Init+0x24>)
 80009b6:	2110      	movs	r1, #16
 80009b8:	430a      	orrs	r2, r1
 80009ba:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80009bc:	2000      	movs	r0, #0
 80009be:	f000 f809 	bl	80009d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009c2:	f7ff fedb 	bl	800077c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009c6:	2300      	movs	r3, #0
}
 80009c8:	0018      	movs	r0, r3
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	46c0      	nop			; (mov r8, r8)
 80009d0:	40022000 	.word	0x40022000

080009d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009d4:	b590      	push	{r4, r7, lr}
 80009d6:	b083      	sub	sp, #12
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009dc:	4b14      	ldr	r3, [pc, #80]	; (8000a30 <HAL_InitTick+0x5c>)
 80009de:	681c      	ldr	r4, [r3, #0]
 80009e0:	4b14      	ldr	r3, [pc, #80]	; (8000a34 <HAL_InitTick+0x60>)
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	0019      	movs	r1, r3
 80009e6:	23fa      	movs	r3, #250	; 0xfa
 80009e8:	0098      	lsls	r0, r3, #2
 80009ea:	f7ff fb8d 	bl	8000108 <__udivsi3>
 80009ee:	0003      	movs	r3, r0
 80009f0:	0019      	movs	r1, r3
 80009f2:	0020      	movs	r0, r4
 80009f4:	f7ff fb88 	bl	8000108 <__udivsi3>
 80009f8:	0003      	movs	r3, r0
 80009fa:	0018      	movs	r0, r3
 80009fc:	f000 f903 	bl	8000c06 <HAL_SYSTICK_Config>
 8000a00:	1e03      	subs	r3, r0, #0
 8000a02:	d001      	beq.n	8000a08 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000a04:	2301      	movs	r3, #1
 8000a06:	e00f      	b.n	8000a28 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	2b03      	cmp	r3, #3
 8000a0c:	d80b      	bhi.n	8000a26 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a0e:	6879      	ldr	r1, [r7, #4]
 8000a10:	2301      	movs	r3, #1
 8000a12:	425b      	negs	r3, r3
 8000a14:	2200      	movs	r2, #0
 8000a16:	0018      	movs	r0, r3
 8000a18:	f000 f8e0 	bl	8000bdc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a1c:	4b06      	ldr	r3, [pc, #24]	; (8000a38 <HAL_InitTick+0x64>)
 8000a1e:	687a      	ldr	r2, [r7, #4]
 8000a20:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000a22:	2300      	movs	r3, #0
 8000a24:	e000      	b.n	8000a28 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000a26:	2301      	movs	r3, #1
}
 8000a28:	0018      	movs	r0, r3
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	b003      	add	sp, #12
 8000a2e:	bd90      	pop	{r4, r7, pc}
 8000a30:	20000008 	.word	0x20000008
 8000a34:	20000010 	.word	0x20000010
 8000a38:	2000000c 	.word	0x2000000c

08000a3c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a40:	4b05      	ldr	r3, [pc, #20]	; (8000a58 <HAL_IncTick+0x1c>)
 8000a42:	781b      	ldrb	r3, [r3, #0]
 8000a44:	001a      	movs	r2, r3
 8000a46:	4b05      	ldr	r3, [pc, #20]	; (8000a5c <HAL_IncTick+0x20>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	18d2      	adds	r2, r2, r3
 8000a4c:	4b03      	ldr	r3, [pc, #12]	; (8000a5c <HAL_IncTick+0x20>)
 8000a4e:	601a      	str	r2, [r3, #0]
}
 8000a50:	46c0      	nop			; (mov r8, r8)
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	46c0      	nop			; (mov r8, r8)
 8000a58:	20000010 	.word	0x20000010
 8000a5c:	200000fc 	.word	0x200000fc

08000a60 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
  return uwTick;
 8000a64:	4b02      	ldr	r3, [pc, #8]	; (8000a70 <HAL_GetTick+0x10>)
 8000a66:	681b      	ldr	r3, [r3, #0]
}
 8000a68:	0018      	movs	r0, r3
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	46c0      	nop			; (mov r8, r8)
 8000a70:	200000fc 	.word	0x200000fc

08000a74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b084      	sub	sp, #16
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a7c:	f7ff fff0 	bl	8000a60 <HAL_GetTick>
 8000a80:	0003      	movs	r3, r0
 8000a82:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	3301      	adds	r3, #1
 8000a8c:	d005      	beq.n	8000a9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a8e:	4b09      	ldr	r3, [pc, #36]	; (8000ab4 <HAL_Delay+0x40>)
 8000a90:	781b      	ldrb	r3, [r3, #0]
 8000a92:	001a      	movs	r2, r3
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	189b      	adds	r3, r3, r2
 8000a98:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000a9a:	46c0      	nop			; (mov r8, r8)
 8000a9c:	f7ff ffe0 	bl	8000a60 <HAL_GetTick>
 8000aa0:	0002      	movs	r2, r0
 8000aa2:	68bb      	ldr	r3, [r7, #8]
 8000aa4:	1ad3      	subs	r3, r2, r3
 8000aa6:	68fa      	ldr	r2, [r7, #12]
 8000aa8:	429a      	cmp	r2, r3
 8000aaa:	d8f7      	bhi.n	8000a9c <HAL_Delay+0x28>
  {
  }
}
 8000aac:	46c0      	nop			; (mov r8, r8)
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	b004      	add	sp, #16
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	20000010 	.word	0x20000010

08000ab8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ab8:	b590      	push	{r4, r7, lr}
 8000aba:	b083      	sub	sp, #12
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	0002      	movs	r2, r0
 8000ac0:	6039      	str	r1, [r7, #0]
 8000ac2:	1dfb      	adds	r3, r7, #7
 8000ac4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000ac6:	1dfb      	adds	r3, r7, #7
 8000ac8:	781b      	ldrb	r3, [r3, #0]
 8000aca:	2b7f      	cmp	r3, #127	; 0x7f
 8000acc:	d828      	bhi.n	8000b20 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ace:	4a2f      	ldr	r2, [pc, #188]	; (8000b8c <__NVIC_SetPriority+0xd4>)
 8000ad0:	1dfb      	adds	r3, r7, #7
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	b25b      	sxtb	r3, r3
 8000ad6:	089b      	lsrs	r3, r3, #2
 8000ad8:	33c0      	adds	r3, #192	; 0xc0
 8000ada:	009b      	lsls	r3, r3, #2
 8000adc:	589b      	ldr	r3, [r3, r2]
 8000ade:	1dfa      	adds	r2, r7, #7
 8000ae0:	7812      	ldrb	r2, [r2, #0]
 8000ae2:	0011      	movs	r1, r2
 8000ae4:	2203      	movs	r2, #3
 8000ae6:	400a      	ands	r2, r1
 8000ae8:	00d2      	lsls	r2, r2, #3
 8000aea:	21ff      	movs	r1, #255	; 0xff
 8000aec:	4091      	lsls	r1, r2
 8000aee:	000a      	movs	r2, r1
 8000af0:	43d2      	mvns	r2, r2
 8000af2:	401a      	ands	r2, r3
 8000af4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000af6:	683b      	ldr	r3, [r7, #0]
 8000af8:	019b      	lsls	r3, r3, #6
 8000afa:	22ff      	movs	r2, #255	; 0xff
 8000afc:	401a      	ands	r2, r3
 8000afe:	1dfb      	adds	r3, r7, #7
 8000b00:	781b      	ldrb	r3, [r3, #0]
 8000b02:	0018      	movs	r0, r3
 8000b04:	2303      	movs	r3, #3
 8000b06:	4003      	ands	r3, r0
 8000b08:	00db      	lsls	r3, r3, #3
 8000b0a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b0c:	481f      	ldr	r0, [pc, #124]	; (8000b8c <__NVIC_SetPriority+0xd4>)
 8000b0e:	1dfb      	adds	r3, r7, #7
 8000b10:	781b      	ldrb	r3, [r3, #0]
 8000b12:	b25b      	sxtb	r3, r3
 8000b14:	089b      	lsrs	r3, r3, #2
 8000b16:	430a      	orrs	r2, r1
 8000b18:	33c0      	adds	r3, #192	; 0xc0
 8000b1a:	009b      	lsls	r3, r3, #2
 8000b1c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000b1e:	e031      	b.n	8000b84 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b20:	4a1b      	ldr	r2, [pc, #108]	; (8000b90 <__NVIC_SetPriority+0xd8>)
 8000b22:	1dfb      	adds	r3, r7, #7
 8000b24:	781b      	ldrb	r3, [r3, #0]
 8000b26:	0019      	movs	r1, r3
 8000b28:	230f      	movs	r3, #15
 8000b2a:	400b      	ands	r3, r1
 8000b2c:	3b08      	subs	r3, #8
 8000b2e:	089b      	lsrs	r3, r3, #2
 8000b30:	3306      	adds	r3, #6
 8000b32:	009b      	lsls	r3, r3, #2
 8000b34:	18d3      	adds	r3, r2, r3
 8000b36:	3304      	adds	r3, #4
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	1dfa      	adds	r2, r7, #7
 8000b3c:	7812      	ldrb	r2, [r2, #0]
 8000b3e:	0011      	movs	r1, r2
 8000b40:	2203      	movs	r2, #3
 8000b42:	400a      	ands	r2, r1
 8000b44:	00d2      	lsls	r2, r2, #3
 8000b46:	21ff      	movs	r1, #255	; 0xff
 8000b48:	4091      	lsls	r1, r2
 8000b4a:	000a      	movs	r2, r1
 8000b4c:	43d2      	mvns	r2, r2
 8000b4e:	401a      	ands	r2, r3
 8000b50:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b52:	683b      	ldr	r3, [r7, #0]
 8000b54:	019b      	lsls	r3, r3, #6
 8000b56:	22ff      	movs	r2, #255	; 0xff
 8000b58:	401a      	ands	r2, r3
 8000b5a:	1dfb      	adds	r3, r7, #7
 8000b5c:	781b      	ldrb	r3, [r3, #0]
 8000b5e:	0018      	movs	r0, r3
 8000b60:	2303      	movs	r3, #3
 8000b62:	4003      	ands	r3, r0
 8000b64:	00db      	lsls	r3, r3, #3
 8000b66:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b68:	4809      	ldr	r0, [pc, #36]	; (8000b90 <__NVIC_SetPriority+0xd8>)
 8000b6a:	1dfb      	adds	r3, r7, #7
 8000b6c:	781b      	ldrb	r3, [r3, #0]
 8000b6e:	001c      	movs	r4, r3
 8000b70:	230f      	movs	r3, #15
 8000b72:	4023      	ands	r3, r4
 8000b74:	3b08      	subs	r3, #8
 8000b76:	089b      	lsrs	r3, r3, #2
 8000b78:	430a      	orrs	r2, r1
 8000b7a:	3306      	adds	r3, #6
 8000b7c:	009b      	lsls	r3, r3, #2
 8000b7e:	18c3      	adds	r3, r0, r3
 8000b80:	3304      	adds	r3, #4
 8000b82:	601a      	str	r2, [r3, #0]
}
 8000b84:	46c0      	nop			; (mov r8, r8)
 8000b86:	46bd      	mov	sp, r7
 8000b88:	b003      	add	sp, #12
 8000b8a:	bd90      	pop	{r4, r7, pc}
 8000b8c:	e000e100 	.word	0xe000e100
 8000b90:	e000ed00 	.word	0xe000ed00

08000b94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	3b01      	subs	r3, #1
 8000ba0:	4a0c      	ldr	r2, [pc, #48]	; (8000bd4 <SysTick_Config+0x40>)
 8000ba2:	4293      	cmp	r3, r2
 8000ba4:	d901      	bls.n	8000baa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	e010      	b.n	8000bcc <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000baa:	4b0b      	ldr	r3, [pc, #44]	; (8000bd8 <SysTick_Config+0x44>)
 8000bac:	687a      	ldr	r2, [r7, #4]
 8000bae:	3a01      	subs	r2, #1
 8000bb0:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	425b      	negs	r3, r3
 8000bb6:	2103      	movs	r1, #3
 8000bb8:	0018      	movs	r0, r3
 8000bba:	f7ff ff7d 	bl	8000ab8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bbe:	4b06      	ldr	r3, [pc, #24]	; (8000bd8 <SysTick_Config+0x44>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bc4:	4b04      	ldr	r3, [pc, #16]	; (8000bd8 <SysTick_Config+0x44>)
 8000bc6:	2207      	movs	r2, #7
 8000bc8:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bca:	2300      	movs	r3, #0
}
 8000bcc:	0018      	movs	r0, r3
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	b002      	add	sp, #8
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	00ffffff 	.word	0x00ffffff
 8000bd8:	e000e010 	.word	0xe000e010

08000bdc <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b084      	sub	sp, #16
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	60b9      	str	r1, [r7, #8]
 8000be4:	607a      	str	r2, [r7, #4]
 8000be6:	210f      	movs	r1, #15
 8000be8:	187b      	adds	r3, r7, r1
 8000bea:	1c02      	adds	r2, r0, #0
 8000bec:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000bee:	68ba      	ldr	r2, [r7, #8]
 8000bf0:	187b      	adds	r3, r7, r1
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	b25b      	sxtb	r3, r3
 8000bf6:	0011      	movs	r1, r2
 8000bf8:	0018      	movs	r0, r3
 8000bfa:	f7ff ff5d 	bl	8000ab8 <__NVIC_SetPriority>
}
 8000bfe:	46c0      	nop			; (mov r8, r8)
 8000c00:	46bd      	mov	sp, r7
 8000c02:	b004      	add	sp, #16
 8000c04:	bd80      	pop	{r7, pc}

08000c06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c06:	b580      	push	{r7, lr}
 8000c08:	b082      	sub	sp, #8
 8000c0a:	af00      	add	r7, sp, #0
 8000c0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	0018      	movs	r0, r3
 8000c12:	f7ff ffbf 	bl	8000b94 <SysTick_Config>
 8000c16:	0003      	movs	r3, r0
}
 8000c18:	0018      	movs	r0, r3
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	b002      	add	sp, #8
 8000c1e:	bd80      	pop	{r7, pc}

08000c20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b086      	sub	sp, #24
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
 8000c28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c2e:	e14f      	b.n	8000ed0 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	2101      	movs	r1, #1
 8000c36:	697a      	ldr	r2, [r7, #20]
 8000c38:	4091      	lsls	r1, r2
 8000c3a:	000a      	movs	r2, r1
 8000c3c:	4013      	ands	r3, r2
 8000c3e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d100      	bne.n	8000c48 <HAL_GPIO_Init+0x28>
 8000c46:	e140      	b.n	8000eca <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	685b      	ldr	r3, [r3, #4]
 8000c4c:	2b02      	cmp	r3, #2
 8000c4e:	d003      	beq.n	8000c58 <HAL_GPIO_Init+0x38>
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	685b      	ldr	r3, [r3, #4]
 8000c54:	2b12      	cmp	r3, #18
 8000c56:	d123      	bne.n	8000ca0 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000c58:	697b      	ldr	r3, [r7, #20]
 8000c5a:	08da      	lsrs	r2, r3, #3
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	3208      	adds	r2, #8
 8000c60:	0092      	lsls	r2, r2, #2
 8000c62:	58d3      	ldr	r3, [r2, r3]
 8000c64:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000c66:	697b      	ldr	r3, [r7, #20]
 8000c68:	2207      	movs	r2, #7
 8000c6a:	4013      	ands	r3, r2
 8000c6c:	009b      	lsls	r3, r3, #2
 8000c6e:	220f      	movs	r2, #15
 8000c70:	409a      	lsls	r2, r3
 8000c72:	0013      	movs	r3, r2
 8000c74:	43da      	mvns	r2, r3
 8000c76:	693b      	ldr	r3, [r7, #16]
 8000c78:	4013      	ands	r3, r2
 8000c7a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	691a      	ldr	r2, [r3, #16]
 8000c80:	697b      	ldr	r3, [r7, #20]
 8000c82:	2107      	movs	r1, #7
 8000c84:	400b      	ands	r3, r1
 8000c86:	009b      	lsls	r3, r3, #2
 8000c88:	409a      	lsls	r2, r3
 8000c8a:	0013      	movs	r3, r2
 8000c8c:	693a      	ldr	r2, [r7, #16]
 8000c8e:	4313      	orrs	r3, r2
 8000c90:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000c92:	697b      	ldr	r3, [r7, #20]
 8000c94:	08da      	lsrs	r2, r3, #3
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	3208      	adds	r2, #8
 8000c9a:	0092      	lsls	r2, r2, #2
 8000c9c:	6939      	ldr	r1, [r7, #16]
 8000c9e:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000ca6:	697b      	ldr	r3, [r7, #20]
 8000ca8:	005b      	lsls	r3, r3, #1
 8000caa:	2203      	movs	r2, #3
 8000cac:	409a      	lsls	r2, r3
 8000cae:	0013      	movs	r3, r2
 8000cb0:	43da      	mvns	r2, r3
 8000cb2:	693b      	ldr	r3, [r7, #16]
 8000cb4:	4013      	ands	r3, r2
 8000cb6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	685b      	ldr	r3, [r3, #4]
 8000cbc:	2203      	movs	r2, #3
 8000cbe:	401a      	ands	r2, r3
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	005b      	lsls	r3, r3, #1
 8000cc4:	409a      	lsls	r2, r3
 8000cc6:	0013      	movs	r3, r2
 8000cc8:	693a      	ldr	r2, [r7, #16]
 8000cca:	4313      	orrs	r3, r2
 8000ccc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	693a      	ldr	r2, [r7, #16]
 8000cd2:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	685b      	ldr	r3, [r3, #4]
 8000cd8:	2b01      	cmp	r3, #1
 8000cda:	d00b      	beq.n	8000cf4 <HAL_GPIO_Init+0xd4>
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	685b      	ldr	r3, [r3, #4]
 8000ce0:	2b02      	cmp	r3, #2
 8000ce2:	d007      	beq.n	8000cf4 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ce8:	2b11      	cmp	r3, #17
 8000cea:	d003      	beq.n	8000cf4 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	685b      	ldr	r3, [r3, #4]
 8000cf0:	2b12      	cmp	r3, #18
 8000cf2:	d130      	bne.n	8000d56 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	689b      	ldr	r3, [r3, #8]
 8000cf8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000cfa:	697b      	ldr	r3, [r7, #20]
 8000cfc:	005b      	lsls	r3, r3, #1
 8000cfe:	2203      	movs	r2, #3
 8000d00:	409a      	lsls	r2, r3
 8000d02:	0013      	movs	r3, r2
 8000d04:	43da      	mvns	r2, r3
 8000d06:	693b      	ldr	r3, [r7, #16]
 8000d08:	4013      	ands	r3, r2
 8000d0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	68da      	ldr	r2, [r3, #12]
 8000d10:	697b      	ldr	r3, [r7, #20]
 8000d12:	005b      	lsls	r3, r3, #1
 8000d14:	409a      	lsls	r2, r3
 8000d16:	0013      	movs	r3, r2
 8000d18:	693a      	ldr	r2, [r7, #16]
 8000d1a:	4313      	orrs	r3, r2
 8000d1c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	693a      	ldr	r2, [r7, #16]
 8000d22:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	685b      	ldr	r3, [r3, #4]
 8000d28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	697b      	ldr	r3, [r7, #20]
 8000d2e:	409a      	lsls	r2, r3
 8000d30:	0013      	movs	r3, r2
 8000d32:	43da      	mvns	r2, r3
 8000d34:	693b      	ldr	r3, [r7, #16]
 8000d36:	4013      	ands	r3, r2
 8000d38:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	685b      	ldr	r3, [r3, #4]
 8000d3e:	091b      	lsrs	r3, r3, #4
 8000d40:	2201      	movs	r2, #1
 8000d42:	401a      	ands	r2, r3
 8000d44:	697b      	ldr	r3, [r7, #20]
 8000d46:	409a      	lsls	r2, r3
 8000d48:	0013      	movs	r3, r2
 8000d4a:	693a      	ldr	r2, [r7, #16]
 8000d4c:	4313      	orrs	r3, r2
 8000d4e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	693a      	ldr	r2, [r7, #16]
 8000d54:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	68db      	ldr	r3, [r3, #12]
 8000d5a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	005b      	lsls	r3, r3, #1
 8000d60:	2203      	movs	r2, #3
 8000d62:	409a      	lsls	r2, r3
 8000d64:	0013      	movs	r3, r2
 8000d66:	43da      	mvns	r2, r3
 8000d68:	693b      	ldr	r3, [r7, #16]
 8000d6a:	4013      	ands	r3, r2
 8000d6c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	689a      	ldr	r2, [r3, #8]
 8000d72:	697b      	ldr	r3, [r7, #20]
 8000d74:	005b      	lsls	r3, r3, #1
 8000d76:	409a      	lsls	r2, r3
 8000d78:	0013      	movs	r3, r2
 8000d7a:	693a      	ldr	r2, [r7, #16]
 8000d7c:	4313      	orrs	r3, r2
 8000d7e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	693a      	ldr	r2, [r7, #16]
 8000d84:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	685a      	ldr	r2, [r3, #4]
 8000d8a:	2380      	movs	r3, #128	; 0x80
 8000d8c:	055b      	lsls	r3, r3, #21
 8000d8e:	4013      	ands	r3, r2
 8000d90:	d100      	bne.n	8000d94 <HAL_GPIO_Init+0x174>
 8000d92:	e09a      	b.n	8000eca <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d94:	4b54      	ldr	r3, [pc, #336]	; (8000ee8 <HAL_GPIO_Init+0x2c8>)
 8000d96:	699a      	ldr	r2, [r3, #24]
 8000d98:	4b53      	ldr	r3, [pc, #332]	; (8000ee8 <HAL_GPIO_Init+0x2c8>)
 8000d9a:	2101      	movs	r1, #1
 8000d9c:	430a      	orrs	r2, r1
 8000d9e:	619a      	str	r2, [r3, #24]
 8000da0:	4b51      	ldr	r3, [pc, #324]	; (8000ee8 <HAL_GPIO_Init+0x2c8>)
 8000da2:	699b      	ldr	r3, [r3, #24]
 8000da4:	2201      	movs	r2, #1
 8000da6:	4013      	ands	r3, r2
 8000da8:	60bb      	str	r3, [r7, #8]
 8000daa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000dac:	4a4f      	ldr	r2, [pc, #316]	; (8000eec <HAL_GPIO_Init+0x2cc>)
 8000dae:	697b      	ldr	r3, [r7, #20]
 8000db0:	089b      	lsrs	r3, r3, #2
 8000db2:	3302      	adds	r3, #2
 8000db4:	009b      	lsls	r3, r3, #2
 8000db6:	589b      	ldr	r3, [r3, r2]
 8000db8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000dba:	697b      	ldr	r3, [r7, #20]
 8000dbc:	2203      	movs	r2, #3
 8000dbe:	4013      	ands	r3, r2
 8000dc0:	009b      	lsls	r3, r3, #2
 8000dc2:	220f      	movs	r2, #15
 8000dc4:	409a      	lsls	r2, r3
 8000dc6:	0013      	movs	r3, r2
 8000dc8:	43da      	mvns	r2, r3
 8000dca:	693b      	ldr	r3, [r7, #16]
 8000dcc:	4013      	ands	r3, r2
 8000dce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000dd0:	687a      	ldr	r2, [r7, #4]
 8000dd2:	2390      	movs	r3, #144	; 0x90
 8000dd4:	05db      	lsls	r3, r3, #23
 8000dd6:	429a      	cmp	r2, r3
 8000dd8:	d013      	beq.n	8000e02 <HAL_GPIO_Init+0x1e2>
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	4a44      	ldr	r2, [pc, #272]	; (8000ef0 <HAL_GPIO_Init+0x2d0>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d00d      	beq.n	8000dfe <HAL_GPIO_Init+0x1de>
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	4a43      	ldr	r2, [pc, #268]	; (8000ef4 <HAL_GPIO_Init+0x2d4>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d007      	beq.n	8000dfa <HAL_GPIO_Init+0x1da>
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	4a42      	ldr	r2, [pc, #264]	; (8000ef8 <HAL_GPIO_Init+0x2d8>)
 8000dee:	4293      	cmp	r3, r2
 8000df0:	d101      	bne.n	8000df6 <HAL_GPIO_Init+0x1d6>
 8000df2:	2303      	movs	r3, #3
 8000df4:	e006      	b.n	8000e04 <HAL_GPIO_Init+0x1e4>
 8000df6:	2305      	movs	r3, #5
 8000df8:	e004      	b.n	8000e04 <HAL_GPIO_Init+0x1e4>
 8000dfa:	2302      	movs	r3, #2
 8000dfc:	e002      	b.n	8000e04 <HAL_GPIO_Init+0x1e4>
 8000dfe:	2301      	movs	r3, #1
 8000e00:	e000      	b.n	8000e04 <HAL_GPIO_Init+0x1e4>
 8000e02:	2300      	movs	r3, #0
 8000e04:	697a      	ldr	r2, [r7, #20]
 8000e06:	2103      	movs	r1, #3
 8000e08:	400a      	ands	r2, r1
 8000e0a:	0092      	lsls	r2, r2, #2
 8000e0c:	4093      	lsls	r3, r2
 8000e0e:	693a      	ldr	r2, [r7, #16]
 8000e10:	4313      	orrs	r3, r2
 8000e12:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000e14:	4935      	ldr	r1, [pc, #212]	; (8000eec <HAL_GPIO_Init+0x2cc>)
 8000e16:	697b      	ldr	r3, [r7, #20]
 8000e18:	089b      	lsrs	r3, r3, #2
 8000e1a:	3302      	adds	r3, #2
 8000e1c:	009b      	lsls	r3, r3, #2
 8000e1e:	693a      	ldr	r2, [r7, #16]
 8000e20:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e22:	4b36      	ldr	r3, [pc, #216]	; (8000efc <HAL_GPIO_Init+0x2dc>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	43da      	mvns	r2, r3
 8000e2c:	693b      	ldr	r3, [r7, #16]
 8000e2e:	4013      	ands	r3, r2
 8000e30:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	685a      	ldr	r2, [r3, #4]
 8000e36:	2380      	movs	r3, #128	; 0x80
 8000e38:	025b      	lsls	r3, r3, #9
 8000e3a:	4013      	ands	r3, r2
 8000e3c:	d003      	beq.n	8000e46 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8000e3e:	693a      	ldr	r2, [r7, #16]
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	4313      	orrs	r3, r2
 8000e44:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000e46:	4b2d      	ldr	r3, [pc, #180]	; (8000efc <HAL_GPIO_Init+0x2dc>)
 8000e48:	693a      	ldr	r2, [r7, #16]
 8000e4a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000e4c:	4b2b      	ldr	r3, [pc, #172]	; (8000efc <HAL_GPIO_Init+0x2dc>)
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	43da      	mvns	r2, r3
 8000e56:	693b      	ldr	r3, [r7, #16]
 8000e58:	4013      	ands	r3, r2
 8000e5a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	685a      	ldr	r2, [r3, #4]
 8000e60:	2380      	movs	r3, #128	; 0x80
 8000e62:	029b      	lsls	r3, r3, #10
 8000e64:	4013      	ands	r3, r2
 8000e66:	d003      	beq.n	8000e70 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8000e68:	693a      	ldr	r2, [r7, #16]
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	4313      	orrs	r3, r2
 8000e6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000e70:	4b22      	ldr	r3, [pc, #136]	; (8000efc <HAL_GPIO_Init+0x2dc>)
 8000e72:	693a      	ldr	r2, [r7, #16]
 8000e74:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e76:	4b21      	ldr	r3, [pc, #132]	; (8000efc <HAL_GPIO_Init+0x2dc>)
 8000e78:	689b      	ldr	r3, [r3, #8]
 8000e7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	43da      	mvns	r2, r3
 8000e80:	693b      	ldr	r3, [r7, #16]
 8000e82:	4013      	ands	r3, r2
 8000e84:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	685a      	ldr	r2, [r3, #4]
 8000e8a:	2380      	movs	r3, #128	; 0x80
 8000e8c:	035b      	lsls	r3, r3, #13
 8000e8e:	4013      	ands	r3, r2
 8000e90:	d003      	beq.n	8000e9a <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8000e92:	693a      	ldr	r2, [r7, #16]
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	4313      	orrs	r3, r2
 8000e98:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000e9a:	4b18      	ldr	r3, [pc, #96]	; (8000efc <HAL_GPIO_Init+0x2dc>)
 8000e9c:	693a      	ldr	r2, [r7, #16]
 8000e9e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000ea0:	4b16      	ldr	r3, [pc, #88]	; (8000efc <HAL_GPIO_Init+0x2dc>)
 8000ea2:	68db      	ldr	r3, [r3, #12]
 8000ea4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	43da      	mvns	r2, r3
 8000eaa:	693b      	ldr	r3, [r7, #16]
 8000eac:	4013      	ands	r3, r2
 8000eae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	685a      	ldr	r2, [r3, #4]
 8000eb4:	2380      	movs	r3, #128	; 0x80
 8000eb6:	039b      	lsls	r3, r3, #14
 8000eb8:	4013      	ands	r3, r2
 8000eba:	d003      	beq.n	8000ec4 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8000ebc:	693a      	ldr	r2, [r7, #16]
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	4313      	orrs	r3, r2
 8000ec2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000ec4:	4b0d      	ldr	r3, [pc, #52]	; (8000efc <HAL_GPIO_Init+0x2dc>)
 8000ec6:	693a      	ldr	r2, [r7, #16]
 8000ec8:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	3301      	adds	r3, #1
 8000ece:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	681a      	ldr	r2, [r3, #0]
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	40da      	lsrs	r2, r3
 8000ed8:	1e13      	subs	r3, r2, #0
 8000eda:	d000      	beq.n	8000ede <HAL_GPIO_Init+0x2be>
 8000edc:	e6a8      	b.n	8000c30 <HAL_GPIO_Init+0x10>
  } 
}
 8000ede:	46c0      	nop			; (mov r8, r8)
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	b006      	add	sp, #24
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	46c0      	nop			; (mov r8, r8)
 8000ee8:	40021000 	.word	0x40021000
 8000eec:	40010000 	.word	0x40010000
 8000ef0:	48000400 	.word	0x48000400
 8000ef4:	48000800 	.word	0x48000800
 8000ef8:	48000c00 	.word	0x48000c00
 8000efc:	40010400 	.word	0x40010400

08000f00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
 8000f08:	0008      	movs	r0, r1
 8000f0a:	0011      	movs	r1, r2
 8000f0c:	1cbb      	adds	r3, r7, #2
 8000f0e:	1c02      	adds	r2, r0, #0
 8000f10:	801a      	strh	r2, [r3, #0]
 8000f12:	1c7b      	adds	r3, r7, #1
 8000f14:	1c0a      	adds	r2, r1, #0
 8000f16:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f18:	1c7b      	adds	r3, r7, #1
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d004      	beq.n	8000f2a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f20:	1cbb      	adds	r3, r7, #2
 8000f22:	881a      	ldrh	r2, [r3, #0]
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000f28:	e003      	b.n	8000f32 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000f2a:	1cbb      	adds	r3, r7, #2
 8000f2c:	881a      	ldrh	r2, [r3, #0]
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000f32:	46c0      	nop			; (mov r8, r8)
 8000f34:	46bd      	mov	sp, r7
 8000f36:	b002      	add	sp, #8
 8000f38:	bd80      	pop	{r7, pc}

08000f3a <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000f3a:	b580      	push	{r7, lr}
 8000f3c:	b082      	sub	sp, #8
 8000f3e:	af00      	add	r7, sp, #0
 8000f40:	6078      	str	r0, [r7, #4]
 8000f42:	000a      	movs	r2, r1
 8000f44:	1cbb      	adds	r3, r7, #2
 8000f46:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	695b      	ldr	r3, [r3, #20]
 8000f4c:	1cba      	adds	r2, r7, #2
 8000f4e:	8812      	ldrh	r2, [r2, #0]
 8000f50:	4013      	ands	r3, r2
 8000f52:	d005      	beq.n	8000f60 <HAL_GPIO_TogglePin+0x26>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000f54:	1cbb      	adds	r3, r7, #2
 8000f56:	881b      	ldrh	r3, [r3, #0]
 8000f58:	041a      	lsls	r2, r3, #16
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8000f5e:	e003      	b.n	8000f68 <HAL_GPIO_TogglePin+0x2e>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f60:	1cbb      	adds	r3, r7, #2
 8000f62:	881a      	ldrh	r2, [r3, #0]
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	619a      	str	r2, [r3, #24]
}
 8000f68:	46c0      	nop			; (mov r8, r8)
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	b002      	add	sp, #8
 8000f6e:	bd80      	pop	{r7, pc}

08000f70 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b088      	sub	sp, #32
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d101      	bne.n	8000f82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	e303      	b.n	800158a <HAL_RCC_OscConfig+0x61a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	2201      	movs	r2, #1
 8000f88:	4013      	ands	r3, r2
 8000f8a:	d100      	bne.n	8000f8e <HAL_RCC_OscConfig+0x1e>
 8000f8c:	e08d      	b.n	80010aa <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000f8e:	4bc4      	ldr	r3, [pc, #784]	; (80012a0 <HAL_RCC_OscConfig+0x330>)
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	220c      	movs	r2, #12
 8000f94:	4013      	ands	r3, r2
 8000f96:	2b04      	cmp	r3, #4
 8000f98:	d00e      	beq.n	8000fb8 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f9a:	4bc1      	ldr	r3, [pc, #772]	; (80012a0 <HAL_RCC_OscConfig+0x330>)
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	220c      	movs	r2, #12
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	2b08      	cmp	r3, #8
 8000fa4:	d116      	bne.n	8000fd4 <HAL_RCC_OscConfig+0x64>
 8000fa6:	4bbe      	ldr	r3, [pc, #760]	; (80012a0 <HAL_RCC_OscConfig+0x330>)
 8000fa8:	685a      	ldr	r2, [r3, #4]
 8000faa:	2380      	movs	r3, #128	; 0x80
 8000fac:	025b      	lsls	r3, r3, #9
 8000fae:	401a      	ands	r2, r3
 8000fb0:	2380      	movs	r3, #128	; 0x80
 8000fb2:	025b      	lsls	r3, r3, #9
 8000fb4:	429a      	cmp	r2, r3
 8000fb6:	d10d      	bne.n	8000fd4 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fb8:	4bb9      	ldr	r3, [pc, #740]	; (80012a0 <HAL_RCC_OscConfig+0x330>)
 8000fba:	681a      	ldr	r2, [r3, #0]
 8000fbc:	2380      	movs	r3, #128	; 0x80
 8000fbe:	029b      	lsls	r3, r3, #10
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	d100      	bne.n	8000fc6 <HAL_RCC_OscConfig+0x56>
 8000fc4:	e070      	b.n	80010a8 <HAL_RCC_OscConfig+0x138>
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d000      	beq.n	8000fd0 <HAL_RCC_OscConfig+0x60>
 8000fce:	e06b      	b.n	80010a8 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	e2da      	b.n	800158a <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	2b01      	cmp	r3, #1
 8000fda:	d107      	bne.n	8000fec <HAL_RCC_OscConfig+0x7c>
 8000fdc:	4bb0      	ldr	r3, [pc, #704]	; (80012a0 <HAL_RCC_OscConfig+0x330>)
 8000fde:	681a      	ldr	r2, [r3, #0]
 8000fe0:	4baf      	ldr	r3, [pc, #700]	; (80012a0 <HAL_RCC_OscConfig+0x330>)
 8000fe2:	2180      	movs	r1, #128	; 0x80
 8000fe4:	0249      	lsls	r1, r1, #9
 8000fe6:	430a      	orrs	r2, r1
 8000fe8:	601a      	str	r2, [r3, #0]
 8000fea:	e02f      	b.n	800104c <HAL_RCC_OscConfig+0xdc>
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d10c      	bne.n	800100e <HAL_RCC_OscConfig+0x9e>
 8000ff4:	4baa      	ldr	r3, [pc, #680]	; (80012a0 <HAL_RCC_OscConfig+0x330>)
 8000ff6:	681a      	ldr	r2, [r3, #0]
 8000ff8:	4ba9      	ldr	r3, [pc, #676]	; (80012a0 <HAL_RCC_OscConfig+0x330>)
 8000ffa:	49aa      	ldr	r1, [pc, #680]	; (80012a4 <HAL_RCC_OscConfig+0x334>)
 8000ffc:	400a      	ands	r2, r1
 8000ffe:	601a      	str	r2, [r3, #0]
 8001000:	4ba7      	ldr	r3, [pc, #668]	; (80012a0 <HAL_RCC_OscConfig+0x330>)
 8001002:	681a      	ldr	r2, [r3, #0]
 8001004:	4ba6      	ldr	r3, [pc, #664]	; (80012a0 <HAL_RCC_OscConfig+0x330>)
 8001006:	49a8      	ldr	r1, [pc, #672]	; (80012a8 <HAL_RCC_OscConfig+0x338>)
 8001008:	400a      	ands	r2, r1
 800100a:	601a      	str	r2, [r3, #0]
 800100c:	e01e      	b.n	800104c <HAL_RCC_OscConfig+0xdc>
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	2b05      	cmp	r3, #5
 8001014:	d10e      	bne.n	8001034 <HAL_RCC_OscConfig+0xc4>
 8001016:	4ba2      	ldr	r3, [pc, #648]	; (80012a0 <HAL_RCC_OscConfig+0x330>)
 8001018:	681a      	ldr	r2, [r3, #0]
 800101a:	4ba1      	ldr	r3, [pc, #644]	; (80012a0 <HAL_RCC_OscConfig+0x330>)
 800101c:	2180      	movs	r1, #128	; 0x80
 800101e:	02c9      	lsls	r1, r1, #11
 8001020:	430a      	orrs	r2, r1
 8001022:	601a      	str	r2, [r3, #0]
 8001024:	4b9e      	ldr	r3, [pc, #632]	; (80012a0 <HAL_RCC_OscConfig+0x330>)
 8001026:	681a      	ldr	r2, [r3, #0]
 8001028:	4b9d      	ldr	r3, [pc, #628]	; (80012a0 <HAL_RCC_OscConfig+0x330>)
 800102a:	2180      	movs	r1, #128	; 0x80
 800102c:	0249      	lsls	r1, r1, #9
 800102e:	430a      	orrs	r2, r1
 8001030:	601a      	str	r2, [r3, #0]
 8001032:	e00b      	b.n	800104c <HAL_RCC_OscConfig+0xdc>
 8001034:	4b9a      	ldr	r3, [pc, #616]	; (80012a0 <HAL_RCC_OscConfig+0x330>)
 8001036:	681a      	ldr	r2, [r3, #0]
 8001038:	4b99      	ldr	r3, [pc, #612]	; (80012a0 <HAL_RCC_OscConfig+0x330>)
 800103a:	499a      	ldr	r1, [pc, #616]	; (80012a4 <HAL_RCC_OscConfig+0x334>)
 800103c:	400a      	ands	r2, r1
 800103e:	601a      	str	r2, [r3, #0]
 8001040:	4b97      	ldr	r3, [pc, #604]	; (80012a0 <HAL_RCC_OscConfig+0x330>)
 8001042:	681a      	ldr	r2, [r3, #0]
 8001044:	4b96      	ldr	r3, [pc, #600]	; (80012a0 <HAL_RCC_OscConfig+0x330>)
 8001046:	4998      	ldr	r1, [pc, #608]	; (80012a8 <HAL_RCC_OscConfig+0x338>)
 8001048:	400a      	ands	r2, r1
 800104a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d014      	beq.n	800107e <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001054:	f7ff fd04 	bl	8000a60 <HAL_GetTick>
 8001058:	0003      	movs	r3, r0
 800105a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800105c:	e008      	b.n	8001070 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800105e:	f7ff fcff 	bl	8000a60 <HAL_GetTick>
 8001062:	0002      	movs	r2, r0
 8001064:	69bb      	ldr	r3, [r7, #24]
 8001066:	1ad3      	subs	r3, r2, r3
 8001068:	2b64      	cmp	r3, #100	; 0x64
 800106a:	d901      	bls.n	8001070 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 800106c:	2303      	movs	r3, #3
 800106e:	e28c      	b.n	800158a <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001070:	4b8b      	ldr	r3, [pc, #556]	; (80012a0 <HAL_RCC_OscConfig+0x330>)
 8001072:	681a      	ldr	r2, [r3, #0]
 8001074:	2380      	movs	r3, #128	; 0x80
 8001076:	029b      	lsls	r3, r3, #10
 8001078:	4013      	ands	r3, r2
 800107a:	d0f0      	beq.n	800105e <HAL_RCC_OscConfig+0xee>
 800107c:	e015      	b.n	80010aa <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800107e:	f7ff fcef 	bl	8000a60 <HAL_GetTick>
 8001082:	0003      	movs	r3, r0
 8001084:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001086:	e008      	b.n	800109a <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001088:	f7ff fcea 	bl	8000a60 <HAL_GetTick>
 800108c:	0002      	movs	r2, r0
 800108e:	69bb      	ldr	r3, [r7, #24]
 8001090:	1ad3      	subs	r3, r2, r3
 8001092:	2b64      	cmp	r3, #100	; 0x64
 8001094:	d901      	bls.n	800109a <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8001096:	2303      	movs	r3, #3
 8001098:	e277      	b.n	800158a <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800109a:	4b81      	ldr	r3, [pc, #516]	; (80012a0 <HAL_RCC_OscConfig+0x330>)
 800109c:	681a      	ldr	r2, [r3, #0]
 800109e:	2380      	movs	r3, #128	; 0x80
 80010a0:	029b      	lsls	r3, r3, #10
 80010a2:	4013      	ands	r3, r2
 80010a4:	d1f0      	bne.n	8001088 <HAL_RCC_OscConfig+0x118>
 80010a6:	e000      	b.n	80010aa <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010a8:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	2202      	movs	r2, #2
 80010b0:	4013      	ands	r3, r2
 80010b2:	d100      	bne.n	80010b6 <HAL_RCC_OscConfig+0x146>
 80010b4:	e069      	b.n	800118a <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80010b6:	4b7a      	ldr	r3, [pc, #488]	; (80012a0 <HAL_RCC_OscConfig+0x330>)
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	220c      	movs	r2, #12
 80010bc:	4013      	ands	r3, r2
 80010be:	d00b      	beq.n	80010d8 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80010c0:	4b77      	ldr	r3, [pc, #476]	; (80012a0 <HAL_RCC_OscConfig+0x330>)
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	220c      	movs	r2, #12
 80010c6:	4013      	ands	r3, r2
 80010c8:	2b08      	cmp	r3, #8
 80010ca:	d11c      	bne.n	8001106 <HAL_RCC_OscConfig+0x196>
 80010cc:	4b74      	ldr	r3, [pc, #464]	; (80012a0 <HAL_RCC_OscConfig+0x330>)
 80010ce:	685a      	ldr	r2, [r3, #4]
 80010d0:	2380      	movs	r3, #128	; 0x80
 80010d2:	025b      	lsls	r3, r3, #9
 80010d4:	4013      	ands	r3, r2
 80010d6:	d116      	bne.n	8001106 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010d8:	4b71      	ldr	r3, [pc, #452]	; (80012a0 <HAL_RCC_OscConfig+0x330>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	2202      	movs	r2, #2
 80010de:	4013      	ands	r3, r2
 80010e0:	d005      	beq.n	80010ee <HAL_RCC_OscConfig+0x17e>
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	68db      	ldr	r3, [r3, #12]
 80010e6:	2b01      	cmp	r3, #1
 80010e8:	d001      	beq.n	80010ee <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80010ea:	2301      	movs	r3, #1
 80010ec:	e24d      	b.n	800158a <HAL_RCC_OscConfig+0x61a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010ee:	4b6c      	ldr	r3, [pc, #432]	; (80012a0 <HAL_RCC_OscConfig+0x330>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	22f8      	movs	r2, #248	; 0xf8
 80010f4:	4393      	bics	r3, r2
 80010f6:	0019      	movs	r1, r3
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	691b      	ldr	r3, [r3, #16]
 80010fc:	00da      	lsls	r2, r3, #3
 80010fe:	4b68      	ldr	r3, [pc, #416]	; (80012a0 <HAL_RCC_OscConfig+0x330>)
 8001100:	430a      	orrs	r2, r1
 8001102:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001104:	e041      	b.n	800118a <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	68db      	ldr	r3, [r3, #12]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d024      	beq.n	8001158 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800110e:	4b64      	ldr	r3, [pc, #400]	; (80012a0 <HAL_RCC_OscConfig+0x330>)
 8001110:	681a      	ldr	r2, [r3, #0]
 8001112:	4b63      	ldr	r3, [pc, #396]	; (80012a0 <HAL_RCC_OscConfig+0x330>)
 8001114:	2101      	movs	r1, #1
 8001116:	430a      	orrs	r2, r1
 8001118:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800111a:	f7ff fca1 	bl	8000a60 <HAL_GetTick>
 800111e:	0003      	movs	r3, r0
 8001120:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001122:	e008      	b.n	8001136 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001124:	f7ff fc9c 	bl	8000a60 <HAL_GetTick>
 8001128:	0002      	movs	r2, r0
 800112a:	69bb      	ldr	r3, [r7, #24]
 800112c:	1ad3      	subs	r3, r2, r3
 800112e:	2b02      	cmp	r3, #2
 8001130:	d901      	bls.n	8001136 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8001132:	2303      	movs	r3, #3
 8001134:	e229      	b.n	800158a <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001136:	4b5a      	ldr	r3, [pc, #360]	; (80012a0 <HAL_RCC_OscConfig+0x330>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	2202      	movs	r2, #2
 800113c:	4013      	ands	r3, r2
 800113e:	d0f1      	beq.n	8001124 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001140:	4b57      	ldr	r3, [pc, #348]	; (80012a0 <HAL_RCC_OscConfig+0x330>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	22f8      	movs	r2, #248	; 0xf8
 8001146:	4393      	bics	r3, r2
 8001148:	0019      	movs	r1, r3
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	691b      	ldr	r3, [r3, #16]
 800114e:	00da      	lsls	r2, r3, #3
 8001150:	4b53      	ldr	r3, [pc, #332]	; (80012a0 <HAL_RCC_OscConfig+0x330>)
 8001152:	430a      	orrs	r2, r1
 8001154:	601a      	str	r2, [r3, #0]
 8001156:	e018      	b.n	800118a <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001158:	4b51      	ldr	r3, [pc, #324]	; (80012a0 <HAL_RCC_OscConfig+0x330>)
 800115a:	681a      	ldr	r2, [r3, #0]
 800115c:	4b50      	ldr	r3, [pc, #320]	; (80012a0 <HAL_RCC_OscConfig+0x330>)
 800115e:	2101      	movs	r1, #1
 8001160:	438a      	bics	r2, r1
 8001162:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001164:	f7ff fc7c 	bl	8000a60 <HAL_GetTick>
 8001168:	0003      	movs	r3, r0
 800116a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800116c:	e008      	b.n	8001180 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800116e:	f7ff fc77 	bl	8000a60 <HAL_GetTick>
 8001172:	0002      	movs	r2, r0
 8001174:	69bb      	ldr	r3, [r7, #24]
 8001176:	1ad3      	subs	r3, r2, r3
 8001178:	2b02      	cmp	r3, #2
 800117a:	d901      	bls.n	8001180 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 800117c:	2303      	movs	r3, #3
 800117e:	e204      	b.n	800158a <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001180:	4b47      	ldr	r3, [pc, #284]	; (80012a0 <HAL_RCC_OscConfig+0x330>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	2202      	movs	r2, #2
 8001186:	4013      	ands	r3, r2
 8001188:	d1f1      	bne.n	800116e <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	2208      	movs	r2, #8
 8001190:	4013      	ands	r3, r2
 8001192:	d036      	beq.n	8001202 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	69db      	ldr	r3, [r3, #28]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d019      	beq.n	80011d0 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800119c:	4b40      	ldr	r3, [pc, #256]	; (80012a0 <HAL_RCC_OscConfig+0x330>)
 800119e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80011a0:	4b3f      	ldr	r3, [pc, #252]	; (80012a0 <HAL_RCC_OscConfig+0x330>)
 80011a2:	2101      	movs	r1, #1
 80011a4:	430a      	orrs	r2, r1
 80011a6:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011a8:	f7ff fc5a 	bl	8000a60 <HAL_GetTick>
 80011ac:	0003      	movs	r3, r0
 80011ae:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011b0:	e008      	b.n	80011c4 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011b2:	f7ff fc55 	bl	8000a60 <HAL_GetTick>
 80011b6:	0002      	movs	r2, r0
 80011b8:	69bb      	ldr	r3, [r7, #24]
 80011ba:	1ad3      	subs	r3, r2, r3
 80011bc:	2b02      	cmp	r3, #2
 80011be:	d901      	bls.n	80011c4 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80011c0:	2303      	movs	r3, #3
 80011c2:	e1e2      	b.n	800158a <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011c4:	4b36      	ldr	r3, [pc, #216]	; (80012a0 <HAL_RCC_OscConfig+0x330>)
 80011c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011c8:	2202      	movs	r2, #2
 80011ca:	4013      	ands	r3, r2
 80011cc:	d0f1      	beq.n	80011b2 <HAL_RCC_OscConfig+0x242>
 80011ce:	e018      	b.n	8001202 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80011d0:	4b33      	ldr	r3, [pc, #204]	; (80012a0 <HAL_RCC_OscConfig+0x330>)
 80011d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80011d4:	4b32      	ldr	r3, [pc, #200]	; (80012a0 <HAL_RCC_OscConfig+0x330>)
 80011d6:	2101      	movs	r1, #1
 80011d8:	438a      	bics	r2, r1
 80011da:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011dc:	f7ff fc40 	bl	8000a60 <HAL_GetTick>
 80011e0:	0003      	movs	r3, r0
 80011e2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011e4:	e008      	b.n	80011f8 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011e6:	f7ff fc3b 	bl	8000a60 <HAL_GetTick>
 80011ea:	0002      	movs	r2, r0
 80011ec:	69bb      	ldr	r3, [r7, #24]
 80011ee:	1ad3      	subs	r3, r2, r3
 80011f0:	2b02      	cmp	r3, #2
 80011f2:	d901      	bls.n	80011f8 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80011f4:	2303      	movs	r3, #3
 80011f6:	e1c8      	b.n	800158a <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011f8:	4b29      	ldr	r3, [pc, #164]	; (80012a0 <HAL_RCC_OscConfig+0x330>)
 80011fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011fc:	2202      	movs	r2, #2
 80011fe:	4013      	ands	r3, r2
 8001200:	d1f1      	bne.n	80011e6 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	2204      	movs	r2, #4
 8001208:	4013      	ands	r3, r2
 800120a:	d100      	bne.n	800120e <HAL_RCC_OscConfig+0x29e>
 800120c:	e0b6      	b.n	800137c <HAL_RCC_OscConfig+0x40c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800120e:	231f      	movs	r3, #31
 8001210:	18fb      	adds	r3, r7, r3
 8001212:	2200      	movs	r2, #0
 8001214:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001216:	4b22      	ldr	r3, [pc, #136]	; (80012a0 <HAL_RCC_OscConfig+0x330>)
 8001218:	69da      	ldr	r2, [r3, #28]
 800121a:	2380      	movs	r3, #128	; 0x80
 800121c:	055b      	lsls	r3, r3, #21
 800121e:	4013      	ands	r3, r2
 8001220:	d111      	bne.n	8001246 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001222:	4b1f      	ldr	r3, [pc, #124]	; (80012a0 <HAL_RCC_OscConfig+0x330>)
 8001224:	69da      	ldr	r2, [r3, #28]
 8001226:	4b1e      	ldr	r3, [pc, #120]	; (80012a0 <HAL_RCC_OscConfig+0x330>)
 8001228:	2180      	movs	r1, #128	; 0x80
 800122a:	0549      	lsls	r1, r1, #21
 800122c:	430a      	orrs	r2, r1
 800122e:	61da      	str	r2, [r3, #28]
 8001230:	4b1b      	ldr	r3, [pc, #108]	; (80012a0 <HAL_RCC_OscConfig+0x330>)
 8001232:	69da      	ldr	r2, [r3, #28]
 8001234:	2380      	movs	r3, #128	; 0x80
 8001236:	055b      	lsls	r3, r3, #21
 8001238:	4013      	ands	r3, r2
 800123a:	60fb      	str	r3, [r7, #12]
 800123c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800123e:	231f      	movs	r3, #31
 8001240:	18fb      	adds	r3, r7, r3
 8001242:	2201      	movs	r2, #1
 8001244:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001246:	4b19      	ldr	r3, [pc, #100]	; (80012ac <HAL_RCC_OscConfig+0x33c>)
 8001248:	681a      	ldr	r2, [r3, #0]
 800124a:	2380      	movs	r3, #128	; 0x80
 800124c:	005b      	lsls	r3, r3, #1
 800124e:	4013      	ands	r3, r2
 8001250:	d11a      	bne.n	8001288 <HAL_RCC_OscConfig+0x318>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001252:	4b16      	ldr	r3, [pc, #88]	; (80012ac <HAL_RCC_OscConfig+0x33c>)
 8001254:	681a      	ldr	r2, [r3, #0]
 8001256:	4b15      	ldr	r3, [pc, #84]	; (80012ac <HAL_RCC_OscConfig+0x33c>)
 8001258:	2180      	movs	r1, #128	; 0x80
 800125a:	0049      	lsls	r1, r1, #1
 800125c:	430a      	orrs	r2, r1
 800125e:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001260:	f7ff fbfe 	bl	8000a60 <HAL_GetTick>
 8001264:	0003      	movs	r3, r0
 8001266:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001268:	e008      	b.n	800127c <HAL_RCC_OscConfig+0x30c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800126a:	f7ff fbf9 	bl	8000a60 <HAL_GetTick>
 800126e:	0002      	movs	r2, r0
 8001270:	69bb      	ldr	r3, [r7, #24]
 8001272:	1ad3      	subs	r3, r2, r3
 8001274:	2b64      	cmp	r3, #100	; 0x64
 8001276:	d901      	bls.n	800127c <HAL_RCC_OscConfig+0x30c>
        {
          return HAL_TIMEOUT;
 8001278:	2303      	movs	r3, #3
 800127a:	e186      	b.n	800158a <HAL_RCC_OscConfig+0x61a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800127c:	4b0b      	ldr	r3, [pc, #44]	; (80012ac <HAL_RCC_OscConfig+0x33c>)
 800127e:	681a      	ldr	r2, [r3, #0]
 8001280:	2380      	movs	r3, #128	; 0x80
 8001282:	005b      	lsls	r3, r3, #1
 8001284:	4013      	ands	r3, r2
 8001286:	d0f0      	beq.n	800126a <HAL_RCC_OscConfig+0x2fa>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	689b      	ldr	r3, [r3, #8]
 800128c:	2b01      	cmp	r3, #1
 800128e:	d10f      	bne.n	80012b0 <HAL_RCC_OscConfig+0x340>
 8001290:	4b03      	ldr	r3, [pc, #12]	; (80012a0 <HAL_RCC_OscConfig+0x330>)
 8001292:	6a1a      	ldr	r2, [r3, #32]
 8001294:	4b02      	ldr	r3, [pc, #8]	; (80012a0 <HAL_RCC_OscConfig+0x330>)
 8001296:	2101      	movs	r1, #1
 8001298:	430a      	orrs	r2, r1
 800129a:	621a      	str	r2, [r3, #32]
 800129c:	e036      	b.n	800130c <HAL_RCC_OscConfig+0x39c>
 800129e:	46c0      	nop			; (mov r8, r8)
 80012a0:	40021000 	.word	0x40021000
 80012a4:	fffeffff 	.word	0xfffeffff
 80012a8:	fffbffff 	.word	0xfffbffff
 80012ac:	40007000 	.word	0x40007000
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	689b      	ldr	r3, [r3, #8]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d10c      	bne.n	80012d2 <HAL_RCC_OscConfig+0x362>
 80012b8:	4bb6      	ldr	r3, [pc, #728]	; (8001594 <HAL_RCC_OscConfig+0x624>)
 80012ba:	6a1a      	ldr	r2, [r3, #32]
 80012bc:	4bb5      	ldr	r3, [pc, #724]	; (8001594 <HAL_RCC_OscConfig+0x624>)
 80012be:	2101      	movs	r1, #1
 80012c0:	438a      	bics	r2, r1
 80012c2:	621a      	str	r2, [r3, #32]
 80012c4:	4bb3      	ldr	r3, [pc, #716]	; (8001594 <HAL_RCC_OscConfig+0x624>)
 80012c6:	6a1a      	ldr	r2, [r3, #32]
 80012c8:	4bb2      	ldr	r3, [pc, #712]	; (8001594 <HAL_RCC_OscConfig+0x624>)
 80012ca:	2104      	movs	r1, #4
 80012cc:	438a      	bics	r2, r1
 80012ce:	621a      	str	r2, [r3, #32]
 80012d0:	e01c      	b.n	800130c <HAL_RCC_OscConfig+0x39c>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	689b      	ldr	r3, [r3, #8]
 80012d6:	2b05      	cmp	r3, #5
 80012d8:	d10c      	bne.n	80012f4 <HAL_RCC_OscConfig+0x384>
 80012da:	4bae      	ldr	r3, [pc, #696]	; (8001594 <HAL_RCC_OscConfig+0x624>)
 80012dc:	6a1a      	ldr	r2, [r3, #32]
 80012de:	4bad      	ldr	r3, [pc, #692]	; (8001594 <HAL_RCC_OscConfig+0x624>)
 80012e0:	2104      	movs	r1, #4
 80012e2:	430a      	orrs	r2, r1
 80012e4:	621a      	str	r2, [r3, #32]
 80012e6:	4bab      	ldr	r3, [pc, #684]	; (8001594 <HAL_RCC_OscConfig+0x624>)
 80012e8:	6a1a      	ldr	r2, [r3, #32]
 80012ea:	4baa      	ldr	r3, [pc, #680]	; (8001594 <HAL_RCC_OscConfig+0x624>)
 80012ec:	2101      	movs	r1, #1
 80012ee:	430a      	orrs	r2, r1
 80012f0:	621a      	str	r2, [r3, #32]
 80012f2:	e00b      	b.n	800130c <HAL_RCC_OscConfig+0x39c>
 80012f4:	4ba7      	ldr	r3, [pc, #668]	; (8001594 <HAL_RCC_OscConfig+0x624>)
 80012f6:	6a1a      	ldr	r2, [r3, #32]
 80012f8:	4ba6      	ldr	r3, [pc, #664]	; (8001594 <HAL_RCC_OscConfig+0x624>)
 80012fa:	2101      	movs	r1, #1
 80012fc:	438a      	bics	r2, r1
 80012fe:	621a      	str	r2, [r3, #32]
 8001300:	4ba4      	ldr	r3, [pc, #656]	; (8001594 <HAL_RCC_OscConfig+0x624>)
 8001302:	6a1a      	ldr	r2, [r3, #32]
 8001304:	4ba3      	ldr	r3, [pc, #652]	; (8001594 <HAL_RCC_OscConfig+0x624>)
 8001306:	2104      	movs	r1, #4
 8001308:	438a      	bics	r2, r1
 800130a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	689b      	ldr	r3, [r3, #8]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d014      	beq.n	800133e <HAL_RCC_OscConfig+0x3ce>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001314:	f7ff fba4 	bl	8000a60 <HAL_GetTick>
 8001318:	0003      	movs	r3, r0
 800131a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800131c:	e009      	b.n	8001332 <HAL_RCC_OscConfig+0x3c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800131e:	f7ff fb9f 	bl	8000a60 <HAL_GetTick>
 8001322:	0002      	movs	r2, r0
 8001324:	69bb      	ldr	r3, [r7, #24]
 8001326:	1ad3      	subs	r3, r2, r3
 8001328:	4a9b      	ldr	r2, [pc, #620]	; (8001598 <HAL_RCC_OscConfig+0x628>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d901      	bls.n	8001332 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 800132e:	2303      	movs	r3, #3
 8001330:	e12b      	b.n	800158a <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001332:	4b98      	ldr	r3, [pc, #608]	; (8001594 <HAL_RCC_OscConfig+0x624>)
 8001334:	6a1b      	ldr	r3, [r3, #32]
 8001336:	2202      	movs	r2, #2
 8001338:	4013      	ands	r3, r2
 800133a:	d0f0      	beq.n	800131e <HAL_RCC_OscConfig+0x3ae>
 800133c:	e013      	b.n	8001366 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800133e:	f7ff fb8f 	bl	8000a60 <HAL_GetTick>
 8001342:	0003      	movs	r3, r0
 8001344:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001346:	e009      	b.n	800135c <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001348:	f7ff fb8a 	bl	8000a60 <HAL_GetTick>
 800134c:	0002      	movs	r2, r0
 800134e:	69bb      	ldr	r3, [r7, #24]
 8001350:	1ad3      	subs	r3, r2, r3
 8001352:	4a91      	ldr	r2, [pc, #580]	; (8001598 <HAL_RCC_OscConfig+0x628>)
 8001354:	4293      	cmp	r3, r2
 8001356:	d901      	bls.n	800135c <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8001358:	2303      	movs	r3, #3
 800135a:	e116      	b.n	800158a <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800135c:	4b8d      	ldr	r3, [pc, #564]	; (8001594 <HAL_RCC_OscConfig+0x624>)
 800135e:	6a1b      	ldr	r3, [r3, #32]
 8001360:	2202      	movs	r2, #2
 8001362:	4013      	ands	r3, r2
 8001364:	d1f0      	bne.n	8001348 <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001366:	231f      	movs	r3, #31
 8001368:	18fb      	adds	r3, r7, r3
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	2b01      	cmp	r3, #1
 800136e:	d105      	bne.n	800137c <HAL_RCC_OscConfig+0x40c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001370:	4b88      	ldr	r3, [pc, #544]	; (8001594 <HAL_RCC_OscConfig+0x624>)
 8001372:	69da      	ldr	r2, [r3, #28]
 8001374:	4b87      	ldr	r3, [pc, #540]	; (8001594 <HAL_RCC_OscConfig+0x624>)
 8001376:	4989      	ldr	r1, [pc, #548]	; (800159c <HAL_RCC_OscConfig+0x62c>)
 8001378:	400a      	ands	r2, r1
 800137a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	2210      	movs	r2, #16
 8001382:	4013      	ands	r3, r2
 8001384:	d063      	beq.n	800144e <HAL_RCC_OscConfig+0x4de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	695b      	ldr	r3, [r3, #20]
 800138a:	2b01      	cmp	r3, #1
 800138c:	d12a      	bne.n	80013e4 <HAL_RCC_OscConfig+0x474>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800138e:	4b81      	ldr	r3, [pc, #516]	; (8001594 <HAL_RCC_OscConfig+0x624>)
 8001390:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001392:	4b80      	ldr	r3, [pc, #512]	; (8001594 <HAL_RCC_OscConfig+0x624>)
 8001394:	2104      	movs	r1, #4
 8001396:	430a      	orrs	r2, r1
 8001398:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800139a:	4b7e      	ldr	r3, [pc, #504]	; (8001594 <HAL_RCC_OscConfig+0x624>)
 800139c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800139e:	4b7d      	ldr	r3, [pc, #500]	; (8001594 <HAL_RCC_OscConfig+0x624>)
 80013a0:	2101      	movs	r1, #1
 80013a2:	430a      	orrs	r2, r1
 80013a4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013a6:	f7ff fb5b 	bl	8000a60 <HAL_GetTick>
 80013aa:	0003      	movs	r3, r0
 80013ac:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80013ae:	e008      	b.n	80013c2 <HAL_RCC_OscConfig+0x452>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80013b0:	f7ff fb56 	bl	8000a60 <HAL_GetTick>
 80013b4:	0002      	movs	r2, r0
 80013b6:	69bb      	ldr	r3, [r7, #24]
 80013b8:	1ad3      	subs	r3, r2, r3
 80013ba:	2b02      	cmp	r3, #2
 80013bc:	d901      	bls.n	80013c2 <HAL_RCC_OscConfig+0x452>
        {
          return HAL_TIMEOUT;
 80013be:	2303      	movs	r3, #3
 80013c0:	e0e3      	b.n	800158a <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80013c2:	4b74      	ldr	r3, [pc, #464]	; (8001594 <HAL_RCC_OscConfig+0x624>)
 80013c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013c6:	2202      	movs	r2, #2
 80013c8:	4013      	ands	r3, r2
 80013ca:	d0f1      	beq.n	80013b0 <HAL_RCC_OscConfig+0x440>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80013cc:	4b71      	ldr	r3, [pc, #452]	; (8001594 <HAL_RCC_OscConfig+0x624>)
 80013ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013d0:	22f8      	movs	r2, #248	; 0xf8
 80013d2:	4393      	bics	r3, r2
 80013d4:	0019      	movs	r1, r3
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	699b      	ldr	r3, [r3, #24]
 80013da:	00da      	lsls	r2, r3, #3
 80013dc:	4b6d      	ldr	r3, [pc, #436]	; (8001594 <HAL_RCC_OscConfig+0x624>)
 80013de:	430a      	orrs	r2, r1
 80013e0:	635a      	str	r2, [r3, #52]	; 0x34
 80013e2:	e034      	b.n	800144e <HAL_RCC_OscConfig+0x4de>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	695b      	ldr	r3, [r3, #20]
 80013e8:	3305      	adds	r3, #5
 80013ea:	d111      	bne.n	8001410 <HAL_RCC_OscConfig+0x4a0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80013ec:	4b69      	ldr	r3, [pc, #420]	; (8001594 <HAL_RCC_OscConfig+0x624>)
 80013ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80013f0:	4b68      	ldr	r3, [pc, #416]	; (8001594 <HAL_RCC_OscConfig+0x624>)
 80013f2:	2104      	movs	r1, #4
 80013f4:	438a      	bics	r2, r1
 80013f6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80013f8:	4b66      	ldr	r3, [pc, #408]	; (8001594 <HAL_RCC_OscConfig+0x624>)
 80013fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013fc:	22f8      	movs	r2, #248	; 0xf8
 80013fe:	4393      	bics	r3, r2
 8001400:	0019      	movs	r1, r3
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	699b      	ldr	r3, [r3, #24]
 8001406:	00da      	lsls	r2, r3, #3
 8001408:	4b62      	ldr	r3, [pc, #392]	; (8001594 <HAL_RCC_OscConfig+0x624>)
 800140a:	430a      	orrs	r2, r1
 800140c:	635a      	str	r2, [r3, #52]	; 0x34
 800140e:	e01e      	b.n	800144e <HAL_RCC_OscConfig+0x4de>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001410:	4b60      	ldr	r3, [pc, #384]	; (8001594 <HAL_RCC_OscConfig+0x624>)
 8001412:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001414:	4b5f      	ldr	r3, [pc, #380]	; (8001594 <HAL_RCC_OscConfig+0x624>)
 8001416:	2104      	movs	r1, #4
 8001418:	430a      	orrs	r2, r1
 800141a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 800141c:	4b5d      	ldr	r3, [pc, #372]	; (8001594 <HAL_RCC_OscConfig+0x624>)
 800141e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001420:	4b5c      	ldr	r3, [pc, #368]	; (8001594 <HAL_RCC_OscConfig+0x624>)
 8001422:	2101      	movs	r1, #1
 8001424:	438a      	bics	r2, r1
 8001426:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001428:	f7ff fb1a 	bl	8000a60 <HAL_GetTick>
 800142c:	0003      	movs	r3, r0
 800142e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001430:	e008      	b.n	8001444 <HAL_RCC_OscConfig+0x4d4>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001432:	f7ff fb15 	bl	8000a60 <HAL_GetTick>
 8001436:	0002      	movs	r2, r0
 8001438:	69bb      	ldr	r3, [r7, #24]
 800143a:	1ad3      	subs	r3, r2, r3
 800143c:	2b02      	cmp	r3, #2
 800143e:	d901      	bls.n	8001444 <HAL_RCC_OscConfig+0x4d4>
        {
          return HAL_TIMEOUT;
 8001440:	2303      	movs	r3, #3
 8001442:	e0a2      	b.n	800158a <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001444:	4b53      	ldr	r3, [pc, #332]	; (8001594 <HAL_RCC_OscConfig+0x624>)
 8001446:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001448:	2202      	movs	r2, #2
 800144a:	4013      	ands	r3, r2
 800144c:	d1f1      	bne.n	8001432 <HAL_RCC_OscConfig+0x4c2>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6a1b      	ldr	r3, [r3, #32]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d100      	bne.n	8001458 <HAL_RCC_OscConfig+0x4e8>
 8001456:	e097      	b.n	8001588 <HAL_RCC_OscConfig+0x618>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001458:	4b4e      	ldr	r3, [pc, #312]	; (8001594 <HAL_RCC_OscConfig+0x624>)
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	220c      	movs	r2, #12
 800145e:	4013      	ands	r3, r2
 8001460:	2b08      	cmp	r3, #8
 8001462:	d100      	bne.n	8001466 <HAL_RCC_OscConfig+0x4f6>
 8001464:	e06b      	b.n	800153e <HAL_RCC_OscConfig+0x5ce>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6a1b      	ldr	r3, [r3, #32]
 800146a:	2b02      	cmp	r3, #2
 800146c:	d14c      	bne.n	8001508 <HAL_RCC_OscConfig+0x598>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800146e:	4b49      	ldr	r3, [pc, #292]	; (8001594 <HAL_RCC_OscConfig+0x624>)
 8001470:	681a      	ldr	r2, [r3, #0]
 8001472:	4b48      	ldr	r3, [pc, #288]	; (8001594 <HAL_RCC_OscConfig+0x624>)
 8001474:	494a      	ldr	r1, [pc, #296]	; (80015a0 <HAL_RCC_OscConfig+0x630>)
 8001476:	400a      	ands	r2, r1
 8001478:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800147a:	f7ff faf1 	bl	8000a60 <HAL_GetTick>
 800147e:	0003      	movs	r3, r0
 8001480:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001482:	e008      	b.n	8001496 <HAL_RCC_OscConfig+0x526>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001484:	f7ff faec 	bl	8000a60 <HAL_GetTick>
 8001488:	0002      	movs	r2, r0
 800148a:	69bb      	ldr	r3, [r7, #24]
 800148c:	1ad3      	subs	r3, r2, r3
 800148e:	2b02      	cmp	r3, #2
 8001490:	d901      	bls.n	8001496 <HAL_RCC_OscConfig+0x526>
          {
            return HAL_TIMEOUT;
 8001492:	2303      	movs	r3, #3
 8001494:	e079      	b.n	800158a <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001496:	4b3f      	ldr	r3, [pc, #252]	; (8001594 <HAL_RCC_OscConfig+0x624>)
 8001498:	681a      	ldr	r2, [r3, #0]
 800149a:	2380      	movs	r3, #128	; 0x80
 800149c:	049b      	lsls	r3, r3, #18
 800149e:	4013      	ands	r3, r2
 80014a0:	d1f0      	bne.n	8001484 <HAL_RCC_OscConfig+0x514>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014a2:	4b3c      	ldr	r3, [pc, #240]	; (8001594 <HAL_RCC_OscConfig+0x624>)
 80014a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014a6:	220f      	movs	r2, #15
 80014a8:	4393      	bics	r3, r2
 80014aa:	0019      	movs	r1, r3
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014b0:	4b38      	ldr	r3, [pc, #224]	; (8001594 <HAL_RCC_OscConfig+0x624>)
 80014b2:	430a      	orrs	r2, r1
 80014b4:	62da      	str	r2, [r3, #44]	; 0x2c
 80014b6:	4b37      	ldr	r3, [pc, #220]	; (8001594 <HAL_RCC_OscConfig+0x624>)
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	4a3a      	ldr	r2, [pc, #232]	; (80015a4 <HAL_RCC_OscConfig+0x634>)
 80014bc:	4013      	ands	r3, r2
 80014be:	0019      	movs	r1, r3
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014c8:	431a      	orrs	r2, r3
 80014ca:	4b32      	ldr	r3, [pc, #200]	; (8001594 <HAL_RCC_OscConfig+0x624>)
 80014cc:	430a      	orrs	r2, r1
 80014ce:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014d0:	4b30      	ldr	r3, [pc, #192]	; (8001594 <HAL_RCC_OscConfig+0x624>)
 80014d2:	681a      	ldr	r2, [r3, #0]
 80014d4:	4b2f      	ldr	r3, [pc, #188]	; (8001594 <HAL_RCC_OscConfig+0x624>)
 80014d6:	2180      	movs	r1, #128	; 0x80
 80014d8:	0449      	lsls	r1, r1, #17
 80014da:	430a      	orrs	r2, r1
 80014dc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014de:	f7ff fabf 	bl	8000a60 <HAL_GetTick>
 80014e2:	0003      	movs	r3, r0
 80014e4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80014e6:	e008      	b.n	80014fa <HAL_RCC_OscConfig+0x58a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014e8:	f7ff faba 	bl	8000a60 <HAL_GetTick>
 80014ec:	0002      	movs	r2, r0
 80014ee:	69bb      	ldr	r3, [r7, #24]
 80014f0:	1ad3      	subs	r3, r2, r3
 80014f2:	2b02      	cmp	r3, #2
 80014f4:	d901      	bls.n	80014fa <HAL_RCC_OscConfig+0x58a>
          {
            return HAL_TIMEOUT;
 80014f6:	2303      	movs	r3, #3
 80014f8:	e047      	b.n	800158a <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80014fa:	4b26      	ldr	r3, [pc, #152]	; (8001594 <HAL_RCC_OscConfig+0x624>)
 80014fc:	681a      	ldr	r2, [r3, #0]
 80014fe:	2380      	movs	r3, #128	; 0x80
 8001500:	049b      	lsls	r3, r3, #18
 8001502:	4013      	ands	r3, r2
 8001504:	d0f0      	beq.n	80014e8 <HAL_RCC_OscConfig+0x578>
 8001506:	e03f      	b.n	8001588 <HAL_RCC_OscConfig+0x618>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001508:	4b22      	ldr	r3, [pc, #136]	; (8001594 <HAL_RCC_OscConfig+0x624>)
 800150a:	681a      	ldr	r2, [r3, #0]
 800150c:	4b21      	ldr	r3, [pc, #132]	; (8001594 <HAL_RCC_OscConfig+0x624>)
 800150e:	4924      	ldr	r1, [pc, #144]	; (80015a0 <HAL_RCC_OscConfig+0x630>)
 8001510:	400a      	ands	r2, r1
 8001512:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001514:	f7ff faa4 	bl	8000a60 <HAL_GetTick>
 8001518:	0003      	movs	r3, r0
 800151a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800151c:	e008      	b.n	8001530 <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800151e:	f7ff fa9f 	bl	8000a60 <HAL_GetTick>
 8001522:	0002      	movs	r2, r0
 8001524:	69bb      	ldr	r3, [r7, #24]
 8001526:	1ad3      	subs	r3, r2, r3
 8001528:	2b02      	cmp	r3, #2
 800152a:	d901      	bls.n	8001530 <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 800152c:	2303      	movs	r3, #3
 800152e:	e02c      	b.n	800158a <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001530:	4b18      	ldr	r3, [pc, #96]	; (8001594 <HAL_RCC_OscConfig+0x624>)
 8001532:	681a      	ldr	r2, [r3, #0]
 8001534:	2380      	movs	r3, #128	; 0x80
 8001536:	049b      	lsls	r3, r3, #18
 8001538:	4013      	ands	r3, r2
 800153a:	d1f0      	bne.n	800151e <HAL_RCC_OscConfig+0x5ae>
 800153c:	e024      	b.n	8001588 <HAL_RCC_OscConfig+0x618>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6a1b      	ldr	r3, [r3, #32]
 8001542:	2b01      	cmp	r3, #1
 8001544:	d101      	bne.n	800154a <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
 8001546:	2301      	movs	r3, #1
 8001548:	e01f      	b.n	800158a <HAL_RCC_OscConfig+0x61a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800154a:	4b12      	ldr	r3, [pc, #72]	; (8001594 <HAL_RCC_OscConfig+0x624>)
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001550:	4b10      	ldr	r3, [pc, #64]	; (8001594 <HAL_RCC_OscConfig+0x624>)
 8001552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001554:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001556:	697a      	ldr	r2, [r7, #20]
 8001558:	2380      	movs	r3, #128	; 0x80
 800155a:	025b      	lsls	r3, r3, #9
 800155c:	401a      	ands	r2, r3
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001562:	429a      	cmp	r2, r3
 8001564:	d10e      	bne.n	8001584 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	220f      	movs	r2, #15
 800156a:	401a      	ands	r2, r3
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001570:	429a      	cmp	r2, r3
 8001572:	d107      	bne.n	8001584 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001574:	697a      	ldr	r2, [r7, #20]
 8001576:	23f0      	movs	r3, #240	; 0xf0
 8001578:	039b      	lsls	r3, r3, #14
 800157a:	401a      	ands	r2, r3
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001580:	429a      	cmp	r2, r3
 8001582:	d001      	beq.n	8001588 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_ERROR;
 8001584:	2301      	movs	r3, #1
 8001586:	e000      	b.n	800158a <HAL_RCC_OscConfig+0x61a>
        }
      }
    }
  }

  return HAL_OK;
 8001588:	2300      	movs	r3, #0
}
 800158a:	0018      	movs	r0, r3
 800158c:	46bd      	mov	sp, r7
 800158e:	b008      	add	sp, #32
 8001590:	bd80      	pop	{r7, pc}
 8001592:	46c0      	nop			; (mov r8, r8)
 8001594:	40021000 	.word	0x40021000
 8001598:	00001388 	.word	0x00001388
 800159c:	efffffff 	.word	0xefffffff
 80015a0:	feffffff 	.word	0xfeffffff
 80015a4:	ffc2ffff 	.word	0xffc2ffff

080015a8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b084      	sub	sp, #16
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
 80015b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d101      	bne.n	80015bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015b8:	2301      	movs	r3, #1
 80015ba:	e0b3      	b.n	8001724 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80015bc:	4b5b      	ldr	r3, [pc, #364]	; (800172c <HAL_RCC_ClockConfig+0x184>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	2201      	movs	r2, #1
 80015c2:	4013      	ands	r3, r2
 80015c4:	683a      	ldr	r2, [r7, #0]
 80015c6:	429a      	cmp	r2, r3
 80015c8:	d911      	bls.n	80015ee <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015ca:	4b58      	ldr	r3, [pc, #352]	; (800172c <HAL_RCC_ClockConfig+0x184>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	2201      	movs	r2, #1
 80015d0:	4393      	bics	r3, r2
 80015d2:	0019      	movs	r1, r3
 80015d4:	4b55      	ldr	r3, [pc, #340]	; (800172c <HAL_RCC_ClockConfig+0x184>)
 80015d6:	683a      	ldr	r2, [r7, #0]
 80015d8:	430a      	orrs	r2, r1
 80015da:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015dc:	4b53      	ldr	r3, [pc, #332]	; (800172c <HAL_RCC_ClockConfig+0x184>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	2201      	movs	r2, #1
 80015e2:	4013      	ands	r3, r2
 80015e4:	683a      	ldr	r2, [r7, #0]
 80015e6:	429a      	cmp	r2, r3
 80015e8:	d001      	beq.n	80015ee <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80015ea:	2301      	movs	r3, #1
 80015ec:	e09a      	b.n	8001724 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	2202      	movs	r2, #2
 80015f4:	4013      	ands	r3, r2
 80015f6:	d015      	beq.n	8001624 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	2204      	movs	r2, #4
 80015fe:	4013      	ands	r3, r2
 8001600:	d006      	beq.n	8001610 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001602:	4b4b      	ldr	r3, [pc, #300]	; (8001730 <HAL_RCC_ClockConfig+0x188>)
 8001604:	685a      	ldr	r2, [r3, #4]
 8001606:	4b4a      	ldr	r3, [pc, #296]	; (8001730 <HAL_RCC_ClockConfig+0x188>)
 8001608:	21e0      	movs	r1, #224	; 0xe0
 800160a:	00c9      	lsls	r1, r1, #3
 800160c:	430a      	orrs	r2, r1
 800160e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001610:	4b47      	ldr	r3, [pc, #284]	; (8001730 <HAL_RCC_ClockConfig+0x188>)
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	22f0      	movs	r2, #240	; 0xf0
 8001616:	4393      	bics	r3, r2
 8001618:	0019      	movs	r1, r3
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	689a      	ldr	r2, [r3, #8]
 800161e:	4b44      	ldr	r3, [pc, #272]	; (8001730 <HAL_RCC_ClockConfig+0x188>)
 8001620:	430a      	orrs	r2, r1
 8001622:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	2201      	movs	r2, #1
 800162a:	4013      	ands	r3, r2
 800162c:	d040      	beq.n	80016b0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	2b01      	cmp	r3, #1
 8001634:	d107      	bne.n	8001646 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001636:	4b3e      	ldr	r3, [pc, #248]	; (8001730 <HAL_RCC_ClockConfig+0x188>)
 8001638:	681a      	ldr	r2, [r3, #0]
 800163a:	2380      	movs	r3, #128	; 0x80
 800163c:	029b      	lsls	r3, r3, #10
 800163e:	4013      	ands	r3, r2
 8001640:	d114      	bne.n	800166c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	e06e      	b.n	8001724 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	2b02      	cmp	r3, #2
 800164c:	d107      	bne.n	800165e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800164e:	4b38      	ldr	r3, [pc, #224]	; (8001730 <HAL_RCC_ClockConfig+0x188>)
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	2380      	movs	r3, #128	; 0x80
 8001654:	049b      	lsls	r3, r3, #18
 8001656:	4013      	ands	r3, r2
 8001658:	d108      	bne.n	800166c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800165a:	2301      	movs	r3, #1
 800165c:	e062      	b.n	8001724 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800165e:	4b34      	ldr	r3, [pc, #208]	; (8001730 <HAL_RCC_ClockConfig+0x188>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	2202      	movs	r2, #2
 8001664:	4013      	ands	r3, r2
 8001666:	d101      	bne.n	800166c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001668:	2301      	movs	r3, #1
 800166a:	e05b      	b.n	8001724 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800166c:	4b30      	ldr	r3, [pc, #192]	; (8001730 <HAL_RCC_ClockConfig+0x188>)
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	2203      	movs	r2, #3
 8001672:	4393      	bics	r3, r2
 8001674:	0019      	movs	r1, r3
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	685a      	ldr	r2, [r3, #4]
 800167a:	4b2d      	ldr	r3, [pc, #180]	; (8001730 <HAL_RCC_ClockConfig+0x188>)
 800167c:	430a      	orrs	r2, r1
 800167e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001680:	f7ff f9ee 	bl	8000a60 <HAL_GetTick>
 8001684:	0003      	movs	r3, r0
 8001686:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001688:	e009      	b.n	800169e <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800168a:	f7ff f9e9 	bl	8000a60 <HAL_GetTick>
 800168e:	0002      	movs	r2, r0
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	1ad3      	subs	r3, r2, r3
 8001694:	4a27      	ldr	r2, [pc, #156]	; (8001734 <HAL_RCC_ClockConfig+0x18c>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d901      	bls.n	800169e <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800169a:	2303      	movs	r3, #3
 800169c:	e042      	b.n	8001724 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800169e:	4b24      	ldr	r3, [pc, #144]	; (8001730 <HAL_RCC_ClockConfig+0x188>)
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	220c      	movs	r2, #12
 80016a4:	401a      	ands	r2, r3
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	009b      	lsls	r3, r3, #2
 80016ac:	429a      	cmp	r2, r3
 80016ae:	d1ec      	bne.n	800168a <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80016b0:	4b1e      	ldr	r3, [pc, #120]	; (800172c <HAL_RCC_ClockConfig+0x184>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	2201      	movs	r2, #1
 80016b6:	4013      	ands	r3, r2
 80016b8:	683a      	ldr	r2, [r7, #0]
 80016ba:	429a      	cmp	r2, r3
 80016bc:	d211      	bcs.n	80016e2 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016be:	4b1b      	ldr	r3, [pc, #108]	; (800172c <HAL_RCC_ClockConfig+0x184>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	2201      	movs	r2, #1
 80016c4:	4393      	bics	r3, r2
 80016c6:	0019      	movs	r1, r3
 80016c8:	4b18      	ldr	r3, [pc, #96]	; (800172c <HAL_RCC_ClockConfig+0x184>)
 80016ca:	683a      	ldr	r2, [r7, #0]
 80016cc:	430a      	orrs	r2, r1
 80016ce:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016d0:	4b16      	ldr	r3, [pc, #88]	; (800172c <HAL_RCC_ClockConfig+0x184>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	2201      	movs	r2, #1
 80016d6:	4013      	ands	r3, r2
 80016d8:	683a      	ldr	r2, [r7, #0]
 80016da:	429a      	cmp	r2, r3
 80016dc:	d001      	beq.n	80016e2 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	e020      	b.n	8001724 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	2204      	movs	r2, #4
 80016e8:	4013      	ands	r3, r2
 80016ea:	d009      	beq.n	8001700 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80016ec:	4b10      	ldr	r3, [pc, #64]	; (8001730 <HAL_RCC_ClockConfig+0x188>)
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	4a11      	ldr	r2, [pc, #68]	; (8001738 <HAL_RCC_ClockConfig+0x190>)
 80016f2:	4013      	ands	r3, r2
 80016f4:	0019      	movs	r1, r3
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	68da      	ldr	r2, [r3, #12]
 80016fa:	4b0d      	ldr	r3, [pc, #52]	; (8001730 <HAL_RCC_ClockConfig+0x188>)
 80016fc:	430a      	orrs	r2, r1
 80016fe:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001700:	f000 f820 	bl	8001744 <HAL_RCC_GetSysClockFreq>
 8001704:	0001      	movs	r1, r0
 8001706:	4b0a      	ldr	r3, [pc, #40]	; (8001730 <HAL_RCC_ClockConfig+0x188>)
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	091b      	lsrs	r3, r3, #4
 800170c:	220f      	movs	r2, #15
 800170e:	4013      	ands	r3, r2
 8001710:	4a0a      	ldr	r2, [pc, #40]	; (800173c <HAL_RCC_ClockConfig+0x194>)
 8001712:	5cd3      	ldrb	r3, [r2, r3]
 8001714:	000a      	movs	r2, r1
 8001716:	40da      	lsrs	r2, r3
 8001718:	4b09      	ldr	r3, [pc, #36]	; (8001740 <HAL_RCC_ClockConfig+0x198>)
 800171a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800171c:	2000      	movs	r0, #0
 800171e:	f7ff f959 	bl	80009d4 <HAL_InitTick>
  
  return HAL_OK;
 8001722:	2300      	movs	r3, #0
}
 8001724:	0018      	movs	r0, r3
 8001726:	46bd      	mov	sp, r7
 8001728:	b004      	add	sp, #16
 800172a:	bd80      	pop	{r7, pc}
 800172c:	40022000 	.word	0x40022000
 8001730:	40021000 	.word	0x40021000
 8001734:	00001388 	.word	0x00001388
 8001738:	fffff8ff 	.word	0xfffff8ff
 800173c:	08002b30 	.word	0x08002b30
 8001740:	20000008 	.word	0x20000008

08001744 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001744:	b590      	push	{r4, r7, lr}
 8001746:	b08f      	sub	sp, #60	; 0x3c
 8001748:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800174a:	2314      	movs	r3, #20
 800174c:	18fb      	adds	r3, r7, r3
 800174e:	4a2b      	ldr	r2, [pc, #172]	; (80017fc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001750:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001752:	c313      	stmia	r3!, {r0, r1, r4}
 8001754:	6812      	ldr	r2, [r2, #0]
 8001756:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001758:	1d3b      	adds	r3, r7, #4
 800175a:	4a29      	ldr	r2, [pc, #164]	; (8001800 <HAL_RCC_GetSysClockFreq+0xbc>)
 800175c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800175e:	c313      	stmia	r3!, {r0, r1, r4}
 8001760:	6812      	ldr	r2, [r2, #0]
 8001762:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001764:	2300      	movs	r3, #0
 8001766:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001768:	2300      	movs	r3, #0
 800176a:	62bb      	str	r3, [r7, #40]	; 0x28
 800176c:	2300      	movs	r3, #0
 800176e:	637b      	str	r3, [r7, #52]	; 0x34
 8001770:	2300      	movs	r3, #0
 8001772:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001774:	2300      	movs	r3, #0
 8001776:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001778:	4b22      	ldr	r3, [pc, #136]	; (8001804 <HAL_RCC_GetSysClockFreq+0xc0>)
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800177e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001780:	220c      	movs	r2, #12
 8001782:	4013      	ands	r3, r2
 8001784:	2b04      	cmp	r3, #4
 8001786:	d002      	beq.n	800178e <HAL_RCC_GetSysClockFreq+0x4a>
 8001788:	2b08      	cmp	r3, #8
 800178a:	d003      	beq.n	8001794 <HAL_RCC_GetSysClockFreq+0x50>
 800178c:	e02d      	b.n	80017ea <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800178e:	4b1e      	ldr	r3, [pc, #120]	; (8001808 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001790:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001792:	e02d      	b.n	80017f0 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001796:	0c9b      	lsrs	r3, r3, #18
 8001798:	220f      	movs	r2, #15
 800179a:	4013      	ands	r3, r2
 800179c:	2214      	movs	r2, #20
 800179e:	18ba      	adds	r2, r7, r2
 80017a0:	5cd3      	ldrb	r3, [r2, r3]
 80017a2:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80017a4:	4b17      	ldr	r3, [pc, #92]	; (8001804 <HAL_RCC_GetSysClockFreq+0xc0>)
 80017a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017a8:	220f      	movs	r2, #15
 80017aa:	4013      	ands	r3, r2
 80017ac:	1d3a      	adds	r2, r7, #4
 80017ae:	5cd3      	ldrb	r3, [r2, r3]
 80017b0:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80017b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017b4:	2380      	movs	r3, #128	; 0x80
 80017b6:	025b      	lsls	r3, r3, #9
 80017b8:	4013      	ands	r3, r2
 80017ba:	d009      	beq.n	80017d0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80017bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80017be:	4812      	ldr	r0, [pc, #72]	; (8001808 <HAL_RCC_GetSysClockFreq+0xc4>)
 80017c0:	f7fe fca2 	bl	8000108 <__udivsi3>
 80017c4:	0003      	movs	r3, r0
 80017c6:	001a      	movs	r2, r3
 80017c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ca:	4353      	muls	r3, r2
 80017cc:	637b      	str	r3, [r7, #52]	; 0x34
 80017ce:	e009      	b.n	80017e4 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80017d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80017d2:	000a      	movs	r2, r1
 80017d4:	0152      	lsls	r2, r2, #5
 80017d6:	1a52      	subs	r2, r2, r1
 80017d8:	0193      	lsls	r3, r2, #6
 80017da:	1a9b      	subs	r3, r3, r2
 80017dc:	00db      	lsls	r3, r3, #3
 80017de:	185b      	adds	r3, r3, r1
 80017e0:	021b      	lsls	r3, r3, #8
 80017e2:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 80017e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017e6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80017e8:	e002      	b.n	80017f0 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80017ea:	4b07      	ldr	r3, [pc, #28]	; (8001808 <HAL_RCC_GetSysClockFreq+0xc4>)
 80017ec:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80017ee:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80017f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80017f2:	0018      	movs	r0, r3
 80017f4:	46bd      	mov	sp, r7
 80017f6:	b00f      	add	sp, #60	; 0x3c
 80017f8:	bd90      	pop	{r4, r7, pc}
 80017fa:	46c0      	nop			; (mov r8, r8)
 80017fc:	08002b10 	.word	0x08002b10
 8001800:	08002b20 	.word	0x08002b20
 8001804:	40021000 	.word	0x40021000
 8001808:	007a1200 	.word	0x007a1200

0800180c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001810:	4b02      	ldr	r3, [pc, #8]	; (800181c <HAL_RCC_GetHCLKFreq+0x10>)
 8001812:	681b      	ldr	r3, [r3, #0]
}
 8001814:	0018      	movs	r0, r3
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	46c0      	nop			; (mov r8, r8)
 800181c:	20000008 	.word	0x20000008

08001820 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001824:	f7ff fff2 	bl	800180c <HAL_RCC_GetHCLKFreq>
 8001828:	0001      	movs	r1, r0
 800182a:	4b06      	ldr	r3, [pc, #24]	; (8001844 <HAL_RCC_GetPCLK1Freq+0x24>)
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	0a1b      	lsrs	r3, r3, #8
 8001830:	2207      	movs	r2, #7
 8001832:	4013      	ands	r3, r2
 8001834:	4a04      	ldr	r2, [pc, #16]	; (8001848 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001836:	5cd3      	ldrb	r3, [r2, r3]
 8001838:	40d9      	lsrs	r1, r3
 800183a:	000b      	movs	r3, r1
}    
 800183c:	0018      	movs	r0, r3
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	46c0      	nop			; (mov r8, r8)
 8001844:	40021000 	.word	0x40021000
 8001848:	08002b40 	.word	0x08002b40

0800184c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b086      	sub	sp, #24
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001854:	2300      	movs	r3, #0
 8001856:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001858:	2300      	movs	r3, #0
 800185a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	2380      	movs	r3, #128	; 0x80
 8001862:	025b      	lsls	r3, r3, #9
 8001864:	4013      	ands	r3, r2
 8001866:	d100      	bne.n	800186a <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001868:	e08f      	b.n	800198a <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800186a:	2317      	movs	r3, #23
 800186c:	18fb      	adds	r3, r7, r3
 800186e:	2200      	movs	r2, #0
 8001870:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001872:	4b57      	ldr	r3, [pc, #348]	; (80019d0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001874:	69da      	ldr	r2, [r3, #28]
 8001876:	2380      	movs	r3, #128	; 0x80
 8001878:	055b      	lsls	r3, r3, #21
 800187a:	4013      	ands	r3, r2
 800187c:	d111      	bne.n	80018a2 <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800187e:	4b54      	ldr	r3, [pc, #336]	; (80019d0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001880:	69da      	ldr	r2, [r3, #28]
 8001882:	4b53      	ldr	r3, [pc, #332]	; (80019d0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001884:	2180      	movs	r1, #128	; 0x80
 8001886:	0549      	lsls	r1, r1, #21
 8001888:	430a      	orrs	r2, r1
 800188a:	61da      	str	r2, [r3, #28]
 800188c:	4b50      	ldr	r3, [pc, #320]	; (80019d0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800188e:	69da      	ldr	r2, [r3, #28]
 8001890:	2380      	movs	r3, #128	; 0x80
 8001892:	055b      	lsls	r3, r3, #21
 8001894:	4013      	ands	r3, r2
 8001896:	60bb      	str	r3, [r7, #8]
 8001898:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800189a:	2317      	movs	r3, #23
 800189c:	18fb      	adds	r3, r7, r3
 800189e:	2201      	movs	r2, #1
 80018a0:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018a2:	4b4c      	ldr	r3, [pc, #304]	; (80019d4 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	2380      	movs	r3, #128	; 0x80
 80018a8:	005b      	lsls	r3, r3, #1
 80018aa:	4013      	ands	r3, r2
 80018ac:	d11a      	bne.n	80018e4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018ae:	4b49      	ldr	r3, [pc, #292]	; (80019d4 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	4b48      	ldr	r3, [pc, #288]	; (80019d4 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80018b4:	2180      	movs	r1, #128	; 0x80
 80018b6:	0049      	lsls	r1, r1, #1
 80018b8:	430a      	orrs	r2, r1
 80018ba:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018bc:	f7ff f8d0 	bl	8000a60 <HAL_GetTick>
 80018c0:	0003      	movs	r3, r0
 80018c2:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018c4:	e008      	b.n	80018d8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018c6:	f7ff f8cb 	bl	8000a60 <HAL_GetTick>
 80018ca:	0002      	movs	r2, r0
 80018cc:	693b      	ldr	r3, [r7, #16]
 80018ce:	1ad3      	subs	r3, r2, r3
 80018d0:	2b64      	cmp	r3, #100	; 0x64
 80018d2:	d901      	bls.n	80018d8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 80018d4:	2303      	movs	r3, #3
 80018d6:	e077      	b.n	80019c8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018d8:	4b3e      	ldr	r3, [pc, #248]	; (80019d4 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	2380      	movs	r3, #128	; 0x80
 80018de:	005b      	lsls	r3, r3, #1
 80018e0:	4013      	ands	r3, r2
 80018e2:	d0f0      	beq.n	80018c6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80018e4:	4b3a      	ldr	r3, [pc, #232]	; (80019d0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80018e6:	6a1a      	ldr	r2, [r3, #32]
 80018e8:	23c0      	movs	r3, #192	; 0xc0
 80018ea:	009b      	lsls	r3, r3, #2
 80018ec:	4013      	ands	r3, r2
 80018ee:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d034      	beq.n	8001960 <HAL_RCCEx_PeriphCLKConfig+0x114>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	685a      	ldr	r2, [r3, #4]
 80018fa:	23c0      	movs	r3, #192	; 0xc0
 80018fc:	009b      	lsls	r3, r3, #2
 80018fe:	4013      	ands	r3, r2
 8001900:	68fa      	ldr	r2, [r7, #12]
 8001902:	429a      	cmp	r2, r3
 8001904:	d02c      	beq.n	8001960 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001906:	4b32      	ldr	r3, [pc, #200]	; (80019d0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001908:	6a1b      	ldr	r3, [r3, #32]
 800190a:	4a33      	ldr	r2, [pc, #204]	; (80019d8 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 800190c:	4013      	ands	r3, r2
 800190e:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001910:	4b2f      	ldr	r3, [pc, #188]	; (80019d0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001912:	6a1a      	ldr	r2, [r3, #32]
 8001914:	4b2e      	ldr	r3, [pc, #184]	; (80019d0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001916:	2180      	movs	r1, #128	; 0x80
 8001918:	0249      	lsls	r1, r1, #9
 800191a:	430a      	orrs	r2, r1
 800191c:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800191e:	4b2c      	ldr	r3, [pc, #176]	; (80019d0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001920:	6a1a      	ldr	r2, [r3, #32]
 8001922:	4b2b      	ldr	r3, [pc, #172]	; (80019d0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001924:	492d      	ldr	r1, [pc, #180]	; (80019dc <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8001926:	400a      	ands	r2, r1
 8001928:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800192a:	4b29      	ldr	r3, [pc, #164]	; (80019d0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800192c:	68fa      	ldr	r2, [r7, #12]
 800192e:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	2201      	movs	r2, #1
 8001934:	4013      	ands	r3, r2
 8001936:	d013      	beq.n	8001960 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001938:	f7ff f892 	bl	8000a60 <HAL_GetTick>
 800193c:	0003      	movs	r3, r0
 800193e:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001940:	e009      	b.n	8001956 <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001942:	f7ff f88d 	bl	8000a60 <HAL_GetTick>
 8001946:	0002      	movs	r2, r0
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	1ad3      	subs	r3, r2, r3
 800194c:	4a24      	ldr	r2, [pc, #144]	; (80019e0 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d901      	bls.n	8001956 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8001952:	2303      	movs	r3, #3
 8001954:	e038      	b.n	80019c8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001956:	4b1e      	ldr	r3, [pc, #120]	; (80019d0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001958:	6a1b      	ldr	r3, [r3, #32]
 800195a:	2202      	movs	r2, #2
 800195c:	4013      	ands	r3, r2
 800195e:	d0f0      	beq.n	8001942 <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001960:	4b1b      	ldr	r3, [pc, #108]	; (80019d0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001962:	6a1b      	ldr	r3, [r3, #32]
 8001964:	4a1c      	ldr	r2, [pc, #112]	; (80019d8 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8001966:	4013      	ands	r3, r2
 8001968:	0019      	movs	r1, r3
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	685a      	ldr	r2, [r3, #4]
 800196e:	4b18      	ldr	r3, [pc, #96]	; (80019d0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001970:	430a      	orrs	r2, r1
 8001972:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001974:	2317      	movs	r3, #23
 8001976:	18fb      	adds	r3, r7, r3
 8001978:	781b      	ldrb	r3, [r3, #0]
 800197a:	2b01      	cmp	r3, #1
 800197c:	d105      	bne.n	800198a <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800197e:	4b14      	ldr	r3, [pc, #80]	; (80019d0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001980:	69da      	ldr	r2, [r3, #28]
 8001982:	4b13      	ldr	r3, [pc, #76]	; (80019d0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001984:	4917      	ldr	r1, [pc, #92]	; (80019e4 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8001986:	400a      	ands	r2, r1
 8001988:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	2201      	movs	r2, #1
 8001990:	4013      	ands	r3, r2
 8001992:	d009      	beq.n	80019a8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001994:	4b0e      	ldr	r3, [pc, #56]	; (80019d0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001998:	2203      	movs	r2, #3
 800199a:	4393      	bics	r3, r2
 800199c:	0019      	movs	r1, r3
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	689a      	ldr	r2, [r3, #8]
 80019a2:	4b0b      	ldr	r3, [pc, #44]	; (80019d0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80019a4:	430a      	orrs	r2, r1
 80019a6:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	2220      	movs	r2, #32
 80019ae:	4013      	ands	r3, r2
 80019b0:	d009      	beq.n	80019c6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80019b2:	4b07      	ldr	r3, [pc, #28]	; (80019d0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80019b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b6:	2210      	movs	r2, #16
 80019b8:	4393      	bics	r3, r2
 80019ba:	0019      	movs	r1, r3
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	68da      	ldr	r2, [r3, #12]
 80019c0:	4b03      	ldr	r3, [pc, #12]	; (80019d0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80019c2:	430a      	orrs	r2, r1
 80019c4:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80019c6:	2300      	movs	r3, #0
}
 80019c8:	0018      	movs	r0, r3
 80019ca:	46bd      	mov	sp, r7
 80019cc:	b006      	add	sp, #24
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	40021000 	.word	0x40021000
 80019d4:	40007000 	.word	0x40007000
 80019d8:	fffffcff 	.word	0xfffffcff
 80019dc:	fffeffff 	.word	0xfffeffff
 80019e0:	00001388 	.word	0x00001388
 80019e4:	efffffff 	.word	0xefffffff

080019e8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d101      	bne.n	80019fa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	e01e      	b.n	8001a38 <HAL_TIM_PWM_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	223d      	movs	r2, #61	; 0x3d
 80019fe:	5c9b      	ldrb	r3, [r3, r2]
 8001a00:	b2db      	uxtb	r3, r3
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d107      	bne.n	8001a16 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	223c      	movs	r2, #60	; 0x3c
 8001a0a:	2100      	movs	r1, #0
 8001a0c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	0018      	movs	r0, r3
 8001a12:	f7fe fed7 	bl	80007c4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	223d      	movs	r2, #61	; 0x3d
 8001a1a:	2102      	movs	r1, #2
 8001a1c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	3304      	adds	r3, #4
 8001a26:	0019      	movs	r1, r3
 8001a28:	0010      	movs	r0, r2
 8001a2a:	f000 f907 	bl	8001c3c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	223d      	movs	r2, #61	; 0x3d
 8001a32:	2101      	movs	r1, #1
 8001a34:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001a36:	2300      	movs	r3, #0
}
 8001a38:	0018      	movs	r0, r3
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	b002      	add	sp, #8
 8001a3e:	bd80      	pop	{r7, pc}

08001a40 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b084      	sub	sp, #16
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
 8001a48:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	6839      	ldr	r1, [r7, #0]
 8001a50:	2201      	movs	r2, #1
 8001a52:	0018      	movs	r0, r3
 8001a54:	f000 fb3e 	bl	80020d4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a18      	ldr	r2, [pc, #96]	; (8001ac0 <HAL_TIM_PWM_Start+0x80>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d009      	beq.n	8001a76 <HAL_TIM_PWM_Start+0x36>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a17      	ldr	r2, [pc, #92]	; (8001ac4 <HAL_TIM_PWM_Start+0x84>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d004      	beq.n	8001a76 <HAL_TIM_PWM_Start+0x36>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a15      	ldr	r2, [pc, #84]	; (8001ac8 <HAL_TIM_PWM_Start+0x88>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d101      	bne.n	8001a7a <HAL_TIM_PWM_Start+0x3a>
 8001a76:	2301      	movs	r3, #1
 8001a78:	e000      	b.n	8001a7c <HAL_TIM_PWM_Start+0x3c>
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d008      	beq.n	8001a92 <HAL_TIM_PWM_Start+0x52>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	2180      	movs	r1, #128	; 0x80
 8001a8c:	0209      	lsls	r1, r1, #8
 8001a8e:	430a      	orrs	r2, r1
 8001a90:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	2207      	movs	r2, #7
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	2b06      	cmp	r3, #6
 8001aa2:	d007      	beq.n	8001ab4 <HAL_TIM_PWM_Start+0x74>
  {
    __HAL_TIM_ENABLE(htim);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	2101      	movs	r1, #1
 8001ab0:	430a      	orrs	r2, r1
 8001ab2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ab4:	2300      	movs	r3, #0
}
 8001ab6:	0018      	movs	r0, r3
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	b004      	add	sp, #16
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	46c0      	nop			; (mov r8, r8)
 8001ac0:	40012c00 	.word	0x40012c00
 8001ac4:	40014400 	.word	0x40014400
 8001ac8:	40014800 	.word	0x40014800

08001acc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b084      	sub	sp, #16
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	60f8      	str	r0, [r7, #12]
 8001ad4:	60b9      	str	r1, [r7, #8]
 8001ad6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	223c      	movs	r2, #60	; 0x3c
 8001adc:	5c9b      	ldrb	r3, [r3, r2]
 8001ade:	2b01      	cmp	r3, #1
 8001ae0:	d101      	bne.n	8001ae6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8001ae2:	2302      	movs	r3, #2
 8001ae4:	e0a4      	b.n	8001c30 <HAL_TIM_PWM_ConfigChannel+0x164>
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	223c      	movs	r2, #60	; 0x3c
 8001aea:	2101      	movs	r1, #1
 8001aec:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	223d      	movs	r2, #61	; 0x3d
 8001af2:	2102      	movs	r1, #2
 8001af4:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2b04      	cmp	r3, #4
 8001afa:	d029      	beq.n	8001b50 <HAL_TIM_PWM_ConfigChannel+0x84>
 8001afc:	d802      	bhi.n	8001b04 <HAL_TIM_PWM_ConfigChannel+0x38>
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d005      	beq.n	8001b0e <HAL_TIM_PWM_ConfigChannel+0x42>
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
      break;
    }

    default:
      break;
 8001b02:	e08c      	b.n	8001c1e <HAL_TIM_PWM_ConfigChannel+0x152>
  switch (Channel)
 8001b04:	2b08      	cmp	r3, #8
 8001b06:	d046      	beq.n	8001b96 <HAL_TIM_PWM_ConfigChannel+0xca>
 8001b08:	2b0c      	cmp	r3, #12
 8001b0a:	d065      	beq.n	8001bd8 <HAL_TIM_PWM_ConfigChannel+0x10c>
      break;
 8001b0c:	e087      	b.n	8001c1e <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	68ba      	ldr	r2, [r7, #8]
 8001b14:	0011      	movs	r1, r2
 8001b16:	0018      	movs	r0, r3
 8001b18:	f000 f8fc 	bl	8001d14 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	699a      	ldr	r2, [r3, #24]
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	2108      	movs	r1, #8
 8001b28:	430a      	orrs	r2, r1
 8001b2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	699a      	ldr	r2, [r3, #24]
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	2104      	movs	r1, #4
 8001b38:	438a      	bics	r2, r1
 8001b3a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	6999      	ldr	r1, [r3, #24]
 8001b42:	68bb      	ldr	r3, [r7, #8]
 8001b44:	691a      	ldr	r2, [r3, #16]
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	430a      	orrs	r2, r1
 8001b4c:	619a      	str	r2, [r3, #24]
      break;
 8001b4e:	e066      	b.n	8001c1e <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	68ba      	ldr	r2, [r7, #8]
 8001b56:	0011      	movs	r1, r2
 8001b58:	0018      	movs	r0, r3
 8001b5a:	f000 f959 	bl	8001e10 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	699a      	ldr	r2, [r3, #24]
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	2180      	movs	r1, #128	; 0x80
 8001b6a:	0109      	lsls	r1, r1, #4
 8001b6c:	430a      	orrs	r2, r1
 8001b6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	699a      	ldr	r2, [r3, #24]
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	492f      	ldr	r1, [pc, #188]	; (8001c38 <HAL_TIM_PWM_ConfigChannel+0x16c>)
 8001b7c:	400a      	ands	r2, r1
 8001b7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	6999      	ldr	r1, [r3, #24]
 8001b86:	68bb      	ldr	r3, [r7, #8]
 8001b88:	691b      	ldr	r3, [r3, #16]
 8001b8a:	021a      	lsls	r2, r3, #8
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	430a      	orrs	r2, r1
 8001b92:	619a      	str	r2, [r3, #24]
      break;
 8001b94:	e043      	b.n	8001c1e <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	68ba      	ldr	r2, [r7, #8]
 8001b9c:	0011      	movs	r1, r2
 8001b9e:	0018      	movs	r0, r3
 8001ba0:	f000 f9b4 	bl	8001f0c <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	69da      	ldr	r2, [r3, #28]
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	2108      	movs	r1, #8
 8001bb0:	430a      	orrs	r2, r1
 8001bb2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	69da      	ldr	r2, [r3, #28]
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	2104      	movs	r1, #4
 8001bc0:	438a      	bics	r2, r1
 8001bc2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	69d9      	ldr	r1, [r3, #28]
 8001bca:	68bb      	ldr	r3, [r7, #8]
 8001bcc:	691a      	ldr	r2, [r3, #16]
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	430a      	orrs	r2, r1
 8001bd4:	61da      	str	r2, [r3, #28]
      break;
 8001bd6:	e022      	b.n	8001c1e <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	68ba      	ldr	r2, [r7, #8]
 8001bde:	0011      	movs	r1, r2
 8001be0:	0018      	movs	r0, r3
 8001be2:	f000 fa13 	bl	800200c <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	69da      	ldr	r2, [r3, #28]
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	2180      	movs	r1, #128	; 0x80
 8001bf2:	0109      	lsls	r1, r1, #4
 8001bf4:	430a      	orrs	r2, r1
 8001bf6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	69da      	ldr	r2, [r3, #28]
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	490d      	ldr	r1, [pc, #52]	; (8001c38 <HAL_TIM_PWM_ConfigChannel+0x16c>)
 8001c04:	400a      	ands	r2, r1
 8001c06:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	69d9      	ldr	r1, [r3, #28]
 8001c0e:	68bb      	ldr	r3, [r7, #8]
 8001c10:	691b      	ldr	r3, [r3, #16]
 8001c12:	021a      	lsls	r2, r3, #8
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	430a      	orrs	r2, r1
 8001c1a:	61da      	str	r2, [r3, #28]
      break;
 8001c1c:	46c0      	nop			; (mov r8, r8)
  }

  htim->State = HAL_TIM_STATE_READY;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	223d      	movs	r2, #61	; 0x3d
 8001c22:	2101      	movs	r1, #1
 8001c24:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	223c      	movs	r2, #60	; 0x3c
 8001c2a:	2100      	movs	r1, #0
 8001c2c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001c2e:	2300      	movs	r3, #0
}
 8001c30:	0018      	movs	r0, r3
 8001c32:	46bd      	mov	sp, r7
 8001c34:	b004      	add	sp, #16
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	fffffbff 	.word	0xfffffbff

08001c3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b084      	sub	sp, #16
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
 8001c44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	4a2b      	ldr	r2, [pc, #172]	; (8001cfc <TIM_Base_SetConfig+0xc0>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d003      	beq.n	8001c5c <TIM_Base_SetConfig+0x20>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	4a2a      	ldr	r2, [pc, #168]	; (8001d00 <TIM_Base_SetConfig+0xc4>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d108      	bne.n	8001c6e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	2270      	movs	r2, #112	; 0x70
 8001c60:	4393      	bics	r3, r2
 8001c62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	68fa      	ldr	r2, [r7, #12]
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	4a22      	ldr	r2, [pc, #136]	; (8001cfc <TIM_Base_SetConfig+0xc0>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d00f      	beq.n	8001c96 <TIM_Base_SetConfig+0x5a>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	4a21      	ldr	r2, [pc, #132]	; (8001d00 <TIM_Base_SetConfig+0xc4>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d00b      	beq.n	8001c96 <TIM_Base_SetConfig+0x5a>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	4a20      	ldr	r2, [pc, #128]	; (8001d04 <TIM_Base_SetConfig+0xc8>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d007      	beq.n	8001c96 <TIM_Base_SetConfig+0x5a>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	4a1f      	ldr	r2, [pc, #124]	; (8001d08 <TIM_Base_SetConfig+0xcc>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d003      	beq.n	8001c96 <TIM_Base_SetConfig+0x5a>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	4a1e      	ldr	r2, [pc, #120]	; (8001d0c <TIM_Base_SetConfig+0xd0>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d108      	bne.n	8001ca8 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	4a1d      	ldr	r2, [pc, #116]	; (8001d10 <TIM_Base_SetConfig+0xd4>)
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	68db      	ldr	r3, [r3, #12]
 8001ca2:	68fa      	ldr	r2, [r7, #12]
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	2280      	movs	r2, #128	; 0x80
 8001cac:	4393      	bics	r3, r2
 8001cae:	001a      	movs	r2, r3
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	695b      	ldr	r3, [r3, #20]
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	68fa      	ldr	r2, [r7, #12]
 8001cbc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	689a      	ldr	r2, [r3, #8]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	4a0a      	ldr	r2, [pc, #40]	; (8001cfc <TIM_Base_SetConfig+0xc0>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d007      	beq.n	8001ce6 <TIM_Base_SetConfig+0xaa>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	4a0b      	ldr	r2, [pc, #44]	; (8001d08 <TIM_Base_SetConfig+0xcc>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d003      	beq.n	8001ce6 <TIM_Base_SetConfig+0xaa>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	4a0a      	ldr	r2, [pc, #40]	; (8001d0c <TIM_Base_SetConfig+0xd0>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d103      	bne.n	8001cee <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	691a      	ldr	r2, [r3, #16]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	615a      	str	r2, [r3, #20]
}
 8001cf4:	46c0      	nop			; (mov r8, r8)
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	b004      	add	sp, #16
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	40012c00 	.word	0x40012c00
 8001d00:	40000400 	.word	0x40000400
 8001d04:	40002000 	.word	0x40002000
 8001d08:	40014400 	.word	0x40014400
 8001d0c:	40014800 	.word	0x40014800
 8001d10:	fffffcff 	.word	0xfffffcff

08001d14 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b086      	sub	sp, #24
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
 8001d1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6a1b      	ldr	r3, [r3, #32]
 8001d22:	2201      	movs	r2, #1
 8001d24:	4393      	bics	r3, r2
 8001d26:	001a      	movs	r2, r3
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6a1b      	ldr	r3, [r3, #32]
 8001d30:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	699b      	ldr	r3, [r3, #24]
 8001d3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	2270      	movs	r2, #112	; 0x70
 8001d42:	4393      	bics	r3, r2
 8001d44:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	2203      	movs	r2, #3
 8001d4a:	4393      	bics	r3, r2
 8001d4c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	68fa      	ldr	r2, [r7, #12]
 8001d54:	4313      	orrs	r3, r2
 8001d56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	2202      	movs	r2, #2
 8001d5c:	4393      	bics	r3, r2
 8001d5e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	697a      	ldr	r2, [r7, #20]
 8001d66:	4313      	orrs	r3, r2
 8001d68:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	4a23      	ldr	r2, [pc, #140]	; (8001dfc <TIM_OC1_SetConfig+0xe8>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d007      	beq.n	8001d82 <TIM_OC1_SetConfig+0x6e>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	4a22      	ldr	r2, [pc, #136]	; (8001e00 <TIM_OC1_SetConfig+0xec>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d003      	beq.n	8001d82 <TIM_OC1_SetConfig+0x6e>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	4a21      	ldr	r2, [pc, #132]	; (8001e04 <TIM_OC1_SetConfig+0xf0>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d10c      	bne.n	8001d9c <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	2208      	movs	r2, #8
 8001d86:	4393      	bics	r3, r2
 8001d88:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	68db      	ldr	r3, [r3, #12]
 8001d8e:	697a      	ldr	r2, [r7, #20]
 8001d90:	4313      	orrs	r3, r2
 8001d92:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	2204      	movs	r2, #4
 8001d98:	4393      	bics	r3, r2
 8001d9a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	4a17      	ldr	r2, [pc, #92]	; (8001dfc <TIM_OC1_SetConfig+0xe8>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d007      	beq.n	8001db4 <TIM_OC1_SetConfig+0xa0>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	4a16      	ldr	r2, [pc, #88]	; (8001e00 <TIM_OC1_SetConfig+0xec>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d003      	beq.n	8001db4 <TIM_OC1_SetConfig+0xa0>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	4a15      	ldr	r2, [pc, #84]	; (8001e04 <TIM_OC1_SetConfig+0xf0>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d111      	bne.n	8001dd8 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	4a14      	ldr	r2, [pc, #80]	; (8001e08 <TIM_OC1_SetConfig+0xf4>)
 8001db8:	4013      	ands	r3, r2
 8001dba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	4a13      	ldr	r2, [pc, #76]	; (8001e0c <TIM_OC1_SetConfig+0xf8>)
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	695b      	ldr	r3, [r3, #20]
 8001dc8:	693a      	ldr	r2, [r7, #16]
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	699b      	ldr	r3, [r3, #24]
 8001dd2:	693a      	ldr	r2, [r7, #16]
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	693a      	ldr	r2, [r7, #16]
 8001ddc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	68fa      	ldr	r2, [r7, #12]
 8001de2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	685a      	ldr	r2, [r3, #4]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	697a      	ldr	r2, [r7, #20]
 8001df0:	621a      	str	r2, [r3, #32]
}
 8001df2:	46c0      	nop			; (mov r8, r8)
 8001df4:	46bd      	mov	sp, r7
 8001df6:	b006      	add	sp, #24
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	46c0      	nop			; (mov r8, r8)
 8001dfc:	40012c00 	.word	0x40012c00
 8001e00:	40014400 	.word	0x40014400
 8001e04:	40014800 	.word	0x40014800
 8001e08:	fffffeff 	.word	0xfffffeff
 8001e0c:	fffffdff 	.word	0xfffffdff

08001e10 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b086      	sub	sp, #24
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
 8001e18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6a1b      	ldr	r3, [r3, #32]
 8001e1e:	2210      	movs	r2, #16
 8001e20:	4393      	bics	r3, r2
 8001e22:	001a      	movs	r2, r3
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6a1b      	ldr	r3, [r3, #32]
 8001e2c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	699b      	ldr	r3, [r3, #24]
 8001e38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	4a2c      	ldr	r2, [pc, #176]	; (8001ef0 <TIM_OC2_SetConfig+0xe0>)
 8001e3e:	4013      	ands	r3, r2
 8001e40:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	4a2b      	ldr	r2, [pc, #172]	; (8001ef4 <TIM_OC2_SetConfig+0xe4>)
 8001e46:	4013      	ands	r3, r2
 8001e48:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	021b      	lsls	r3, r3, #8
 8001e50:	68fa      	ldr	r2, [r7, #12]
 8001e52:	4313      	orrs	r3, r2
 8001e54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	2220      	movs	r2, #32
 8001e5a:	4393      	bics	r3, r2
 8001e5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	689b      	ldr	r3, [r3, #8]
 8001e62:	011b      	lsls	r3, r3, #4
 8001e64:	697a      	ldr	r2, [r7, #20]
 8001e66:	4313      	orrs	r3, r2
 8001e68:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4a22      	ldr	r2, [pc, #136]	; (8001ef8 <TIM_OC2_SetConfig+0xe8>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d10d      	bne.n	8001e8e <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	2280      	movs	r2, #128	; 0x80
 8001e76:	4393      	bics	r3, r2
 8001e78:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	68db      	ldr	r3, [r3, #12]
 8001e7e:	011b      	lsls	r3, r3, #4
 8001e80:	697a      	ldr	r2, [r7, #20]
 8001e82:	4313      	orrs	r3, r2
 8001e84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	2240      	movs	r2, #64	; 0x40
 8001e8a:	4393      	bics	r3, r2
 8001e8c:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	4a19      	ldr	r2, [pc, #100]	; (8001ef8 <TIM_OC2_SetConfig+0xe8>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d007      	beq.n	8001ea6 <TIM_OC2_SetConfig+0x96>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	4a18      	ldr	r2, [pc, #96]	; (8001efc <TIM_OC2_SetConfig+0xec>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d003      	beq.n	8001ea6 <TIM_OC2_SetConfig+0x96>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	4a17      	ldr	r2, [pc, #92]	; (8001f00 <TIM_OC2_SetConfig+0xf0>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d113      	bne.n	8001ece <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	4a16      	ldr	r2, [pc, #88]	; (8001f04 <TIM_OC2_SetConfig+0xf4>)
 8001eaa:	4013      	ands	r3, r2
 8001eac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	4a15      	ldr	r2, [pc, #84]	; (8001f08 <TIM_OC2_SetConfig+0xf8>)
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	695b      	ldr	r3, [r3, #20]
 8001eba:	009b      	lsls	r3, r3, #2
 8001ebc:	693a      	ldr	r2, [r7, #16]
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	699b      	ldr	r3, [r3, #24]
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	693a      	ldr	r2, [r7, #16]
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	693a      	ldr	r2, [r7, #16]
 8001ed2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	68fa      	ldr	r2, [r7, #12]
 8001ed8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	685a      	ldr	r2, [r3, #4]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	697a      	ldr	r2, [r7, #20]
 8001ee6:	621a      	str	r2, [r3, #32]
}
 8001ee8:	46c0      	nop			; (mov r8, r8)
 8001eea:	46bd      	mov	sp, r7
 8001eec:	b006      	add	sp, #24
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	ffff8fff 	.word	0xffff8fff
 8001ef4:	fffffcff 	.word	0xfffffcff
 8001ef8:	40012c00 	.word	0x40012c00
 8001efc:	40014400 	.word	0x40014400
 8001f00:	40014800 	.word	0x40014800
 8001f04:	fffffbff 	.word	0xfffffbff
 8001f08:	fffff7ff 	.word	0xfffff7ff

08001f0c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b086      	sub	sp, #24
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
 8001f14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6a1b      	ldr	r3, [r3, #32]
 8001f1a:	4a33      	ldr	r2, [pc, #204]	; (8001fe8 <TIM_OC3_SetConfig+0xdc>)
 8001f1c:	401a      	ands	r2, r3
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6a1b      	ldr	r3, [r3, #32]
 8001f26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	69db      	ldr	r3, [r3, #28]
 8001f32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	2270      	movs	r2, #112	; 0x70
 8001f38:	4393      	bics	r3, r2
 8001f3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	2203      	movs	r2, #3
 8001f40:	4393      	bics	r3, r2
 8001f42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	68fa      	ldr	r2, [r7, #12]
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	4a26      	ldr	r2, [pc, #152]	; (8001fec <TIM_OC3_SetConfig+0xe0>)
 8001f52:	4013      	ands	r3, r2
 8001f54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	021b      	lsls	r3, r3, #8
 8001f5c:	697a      	ldr	r2, [r7, #20]
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	4a22      	ldr	r2, [pc, #136]	; (8001ff0 <TIM_OC3_SetConfig+0xe4>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d10d      	bne.n	8001f86 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	4a21      	ldr	r2, [pc, #132]	; (8001ff4 <TIM_OC3_SetConfig+0xe8>)
 8001f6e:	4013      	ands	r3, r2
 8001f70:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	68db      	ldr	r3, [r3, #12]
 8001f76:	021b      	lsls	r3, r3, #8
 8001f78:	697a      	ldr	r2, [r7, #20]
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	4a1d      	ldr	r2, [pc, #116]	; (8001ff8 <TIM_OC3_SetConfig+0xec>)
 8001f82:	4013      	ands	r3, r2
 8001f84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	4a19      	ldr	r2, [pc, #100]	; (8001ff0 <TIM_OC3_SetConfig+0xe4>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d007      	beq.n	8001f9e <TIM_OC3_SetConfig+0x92>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	4a1a      	ldr	r2, [pc, #104]	; (8001ffc <TIM_OC3_SetConfig+0xf0>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d003      	beq.n	8001f9e <TIM_OC3_SetConfig+0x92>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	4a19      	ldr	r2, [pc, #100]	; (8002000 <TIM_OC3_SetConfig+0xf4>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d113      	bne.n	8001fc6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	4a18      	ldr	r2, [pc, #96]	; (8002004 <TIM_OC3_SetConfig+0xf8>)
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	4a17      	ldr	r2, [pc, #92]	; (8002008 <TIM_OC3_SetConfig+0xfc>)
 8001faa:	4013      	ands	r3, r2
 8001fac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	695b      	ldr	r3, [r3, #20]
 8001fb2:	011b      	lsls	r3, r3, #4
 8001fb4:	693a      	ldr	r2, [r7, #16]
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	699b      	ldr	r3, [r3, #24]
 8001fbe:	011b      	lsls	r3, r3, #4
 8001fc0:	693a      	ldr	r2, [r7, #16]
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	693a      	ldr	r2, [r7, #16]
 8001fca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	68fa      	ldr	r2, [r7, #12]
 8001fd0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	685a      	ldr	r2, [r3, #4]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	697a      	ldr	r2, [r7, #20]
 8001fde:	621a      	str	r2, [r3, #32]
}
 8001fe0:	46c0      	nop			; (mov r8, r8)
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	b006      	add	sp, #24
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	fffffeff 	.word	0xfffffeff
 8001fec:	fffffdff 	.word	0xfffffdff
 8001ff0:	40012c00 	.word	0x40012c00
 8001ff4:	fffff7ff 	.word	0xfffff7ff
 8001ff8:	fffffbff 	.word	0xfffffbff
 8001ffc:	40014400 	.word	0x40014400
 8002000:	40014800 	.word	0x40014800
 8002004:	ffffefff 	.word	0xffffefff
 8002008:	ffffdfff 	.word	0xffffdfff

0800200c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b086      	sub	sp, #24
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
 8002014:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6a1b      	ldr	r3, [r3, #32]
 800201a:	4a26      	ldr	r2, [pc, #152]	; (80020b4 <TIM_OC4_SetConfig+0xa8>)
 800201c:	401a      	ands	r2, r3
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6a1b      	ldr	r3, [r3, #32]
 8002026:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	69db      	ldr	r3, [r3, #28]
 8002032:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	4a20      	ldr	r2, [pc, #128]	; (80020b8 <TIM_OC4_SetConfig+0xac>)
 8002038:	4013      	ands	r3, r2
 800203a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	4a1f      	ldr	r2, [pc, #124]	; (80020bc <TIM_OC4_SetConfig+0xb0>)
 8002040:	4013      	ands	r3, r2
 8002042:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	021b      	lsls	r3, r3, #8
 800204a:	68fa      	ldr	r2, [r7, #12]
 800204c:	4313      	orrs	r3, r2
 800204e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	4a1b      	ldr	r2, [pc, #108]	; (80020c0 <TIM_OC4_SetConfig+0xb4>)
 8002054:	4013      	ands	r3, r2
 8002056:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	031b      	lsls	r3, r3, #12
 800205e:	693a      	ldr	r2, [r7, #16]
 8002060:	4313      	orrs	r3, r2
 8002062:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	4a17      	ldr	r2, [pc, #92]	; (80020c4 <TIM_OC4_SetConfig+0xb8>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d007      	beq.n	800207c <TIM_OC4_SetConfig+0x70>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	4a16      	ldr	r2, [pc, #88]	; (80020c8 <TIM_OC4_SetConfig+0xbc>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d003      	beq.n	800207c <TIM_OC4_SetConfig+0x70>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	4a15      	ldr	r2, [pc, #84]	; (80020cc <TIM_OC4_SetConfig+0xc0>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d109      	bne.n	8002090 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	4a14      	ldr	r2, [pc, #80]	; (80020d0 <TIM_OC4_SetConfig+0xc4>)
 8002080:	4013      	ands	r3, r2
 8002082:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	695b      	ldr	r3, [r3, #20]
 8002088:	019b      	lsls	r3, r3, #6
 800208a:	697a      	ldr	r2, [r7, #20]
 800208c:	4313      	orrs	r3, r2
 800208e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	697a      	ldr	r2, [r7, #20]
 8002094:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	68fa      	ldr	r2, [r7, #12]
 800209a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	685a      	ldr	r2, [r3, #4]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	693a      	ldr	r2, [r7, #16]
 80020a8:	621a      	str	r2, [r3, #32]
}
 80020aa:	46c0      	nop			; (mov r8, r8)
 80020ac:	46bd      	mov	sp, r7
 80020ae:	b006      	add	sp, #24
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	46c0      	nop			; (mov r8, r8)
 80020b4:	ffffefff 	.word	0xffffefff
 80020b8:	ffff8fff 	.word	0xffff8fff
 80020bc:	fffffcff 	.word	0xfffffcff
 80020c0:	ffffdfff 	.word	0xffffdfff
 80020c4:	40012c00 	.word	0x40012c00
 80020c8:	40014400 	.word	0x40014400
 80020cc:	40014800 	.word	0x40014800
 80020d0:	ffffbfff 	.word	0xffffbfff

080020d4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b086      	sub	sp, #24
 80020d8:	af00      	add	r7, sp, #0
 80020da:	60f8      	str	r0, [r7, #12]
 80020dc:	60b9      	str	r1, [r7, #8]
 80020de:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	221f      	movs	r2, #31
 80020e4:	4013      	ands	r3, r2
 80020e6:	2201      	movs	r2, #1
 80020e8:	409a      	lsls	r2, r3
 80020ea:	0013      	movs	r3, r2
 80020ec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	6a1b      	ldr	r3, [r3, #32]
 80020f2:	697a      	ldr	r2, [r7, #20]
 80020f4:	43d2      	mvns	r2, r2
 80020f6:	401a      	ands	r2, r3
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	6a1a      	ldr	r2, [r3, #32]
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	211f      	movs	r1, #31
 8002104:	400b      	ands	r3, r1
 8002106:	6879      	ldr	r1, [r7, #4]
 8002108:	4099      	lsls	r1, r3
 800210a:	000b      	movs	r3, r1
 800210c:	431a      	orrs	r2, r3
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	621a      	str	r2, [r3, #32]
}
 8002112:	46c0      	nop			; (mov r8, r8)
 8002114:	46bd      	mov	sp, r7
 8002116:	b006      	add	sp, #24
 8002118:	bd80      	pop	{r7, pc}
	...

0800211c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b084      	sub	sp, #16
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
 8002124:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	223c      	movs	r2, #60	; 0x3c
 800212a:	5c9b      	ldrb	r3, [r3, r2]
 800212c:	2b01      	cmp	r3, #1
 800212e:	d101      	bne.n	8002134 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002130:	2302      	movs	r3, #2
 8002132:	e03c      	b.n	80021ae <HAL_TIMEx_MasterConfigSynchronization+0x92>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	223c      	movs	r2, #60	; 0x3c
 8002138:	2101      	movs	r1, #1
 800213a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	223d      	movs	r2, #61	; 0x3d
 8002140:	2102      	movs	r1, #2
 8002142:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	2270      	movs	r2, #112	; 0x70
 8002158:	4393      	bics	r3, r2
 800215a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	68fa      	ldr	r2, [r7, #12]
 8002162:	4313      	orrs	r3, r2
 8002164:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	68fa      	ldr	r2, [r7, #12]
 800216c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a11      	ldr	r2, [pc, #68]	; (80021b8 <HAL_TIMEx_MasterConfigSynchronization+0x9c>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d004      	beq.n	8002182 <HAL_TIMEx_MasterConfigSynchronization+0x66>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a0f      	ldr	r2, [pc, #60]	; (80021bc <HAL_TIMEx_MasterConfigSynchronization+0xa0>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d10c      	bne.n	800219c <HAL_TIMEx_MasterConfigSynchronization+0x80>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	2280      	movs	r2, #128	; 0x80
 8002186:	4393      	bics	r3, r2
 8002188:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	68ba      	ldr	r2, [r7, #8]
 8002190:	4313      	orrs	r3, r2
 8002192:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	68ba      	ldr	r2, [r7, #8]
 800219a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	223d      	movs	r2, #61	; 0x3d
 80021a0:	2101      	movs	r1, #1
 80021a2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	223c      	movs	r2, #60	; 0x3c
 80021a8:	2100      	movs	r1, #0
 80021aa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80021ac:	2300      	movs	r3, #0
}
 80021ae:	0018      	movs	r0, r3
 80021b0:	46bd      	mov	sp, r7
 80021b2:	b004      	add	sp, #16
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	46c0      	nop			; (mov r8, r8)
 80021b8:	40012c00 	.word	0x40012c00
 80021bc:	40000400 	.word	0x40000400

080021c0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b084      	sub	sp, #16
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
 80021c8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80021ca:	2300      	movs	r3, #0
 80021cc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	223c      	movs	r2, #60	; 0x3c
 80021d2:	5c9b      	ldrb	r3, [r3, r2]
 80021d4:	2b01      	cmp	r3, #1
 80021d6:	d101      	bne.n	80021dc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80021d8:	2302      	movs	r3, #2
 80021da:	e03e      	b.n	800225a <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	223c      	movs	r2, #60	; 0x3c
 80021e0:	2101      	movs	r1, #1
 80021e2:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	22ff      	movs	r2, #255	; 0xff
 80021e8:	4393      	bics	r3, r2
 80021ea:	001a      	movs	r2, r3
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	4313      	orrs	r3, r2
 80021f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	4a1b      	ldr	r2, [pc, #108]	; (8002264 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 80021f8:	401a      	ands	r2, r3
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	4313      	orrs	r3, r2
 8002200:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	4a18      	ldr	r2, [pc, #96]	; (8002268 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 8002206:	401a      	ands	r2, r3
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	4313      	orrs	r3, r2
 800220e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	4a16      	ldr	r2, [pc, #88]	; (800226c <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8002214:	401a      	ands	r2, r3
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4313      	orrs	r3, r2
 800221c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	4a13      	ldr	r2, [pc, #76]	; (8002270 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 8002222:	401a      	ands	r2, r3
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	691b      	ldr	r3, [r3, #16]
 8002228:	4313      	orrs	r3, r2
 800222a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	4a11      	ldr	r2, [pc, #68]	; (8002274 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8002230:	401a      	ands	r2, r3
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	695b      	ldr	r3, [r3, #20]
 8002236:	4313      	orrs	r3, r2
 8002238:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	4a0e      	ldr	r2, [pc, #56]	; (8002278 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 800223e:	401a      	ands	r2, r3
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	69db      	ldr	r3, [r3, #28]
 8002244:	4313      	orrs	r3, r2
 8002246:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	68fa      	ldr	r2, [r7, #12]
 800224e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	223c      	movs	r2, #60	; 0x3c
 8002254:	2100      	movs	r1, #0
 8002256:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002258:	2300      	movs	r3, #0
}
 800225a:	0018      	movs	r0, r3
 800225c:	46bd      	mov	sp, r7
 800225e:	b004      	add	sp, #16
 8002260:	bd80      	pop	{r7, pc}
 8002262:	46c0      	nop			; (mov r8, r8)
 8002264:	fffffcff 	.word	0xfffffcff
 8002268:	fffffbff 	.word	0xfffffbff
 800226c:	fffff7ff 	.word	0xfffff7ff
 8002270:	ffffefff 	.word	0xffffefff
 8002274:	ffffdfff 	.word	0xffffdfff
 8002278:	ffffbfff 	.word	0xffffbfff

0800227c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b082      	sub	sp, #8
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d101      	bne.n	800228e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	e044      	b.n	8002318 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002292:	2b00      	cmp	r3, #0
 8002294:	d107      	bne.n	80022a6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2270      	movs	r2, #112	; 0x70
 800229a:	2100      	movs	r1, #0
 800229c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	0018      	movs	r0, r3
 80022a2:	f7fe faef 	bl	8000884 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2224      	movs	r2, #36	; 0x24
 80022aa:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	2101      	movs	r1, #1
 80022b8:	438a      	bics	r2, r1
 80022ba:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	0018      	movs	r0, r3
 80022c0:	f000 f908 	bl	80024d4 <UART_SetConfig>
 80022c4:	0003      	movs	r3, r0
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	d101      	bne.n	80022ce <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e024      	b.n	8002318 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d003      	beq.n	80022de <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	0018      	movs	r0, r3
 80022da:	f000 fa69 	bl	80027b0 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	685a      	ldr	r2, [r3, #4]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	490d      	ldr	r1, [pc, #52]	; (8002320 <HAL_UART_Init+0xa4>)
 80022ea:	400a      	ands	r2, r1
 80022ec:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	689a      	ldr	r2, [r3, #8]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	2108      	movs	r1, #8
 80022fa:	438a      	bics	r2, r1
 80022fc:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	2101      	movs	r1, #1
 800230a:	430a      	orrs	r2, r1
 800230c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	0018      	movs	r0, r3
 8002312:	f000 fb01 	bl	8002918 <UART_CheckIdleState>
 8002316:	0003      	movs	r3, r0
}
 8002318:	0018      	movs	r0, r3
 800231a:	46bd      	mov	sp, r7
 800231c:	b002      	add	sp, #8
 800231e:	bd80      	pop	{r7, pc}
 8002320:	fffff7ff 	.word	0xfffff7ff

08002324 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b08a      	sub	sp, #40	; 0x28
 8002328:	af02      	add	r7, sp, #8
 800232a:	60f8      	str	r0, [r7, #12]
 800232c:	60b9      	str	r1, [r7, #8]
 800232e:	603b      	str	r3, [r7, #0]
 8002330:	1dbb      	adds	r3, r7, #6
 8002332:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002338:	2b20      	cmp	r3, #32
 800233a:	d000      	beq.n	800233e <HAL_UART_Receive+0x1a>
 800233c:	e0c2      	b.n	80024c4 <HAL_UART_Receive+0x1a0>
  {
    if ((pData == NULL) || (Size == 0U))
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d003      	beq.n	800234c <HAL_UART_Receive+0x28>
 8002344:	1dbb      	adds	r3, r7, #6
 8002346:	881b      	ldrh	r3, [r3, #0]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d101      	bne.n	8002350 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	e0ba      	b.n	80024c6 <HAL_UART_Receive+0x1a2>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	689a      	ldr	r2, [r3, #8]
 8002354:	2380      	movs	r3, #128	; 0x80
 8002356:	015b      	lsls	r3, r3, #5
 8002358:	429a      	cmp	r2, r3
 800235a:	d109      	bne.n	8002370 <HAL_UART_Receive+0x4c>
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	691b      	ldr	r3, [r3, #16]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d105      	bne.n	8002370 <HAL_UART_Receive+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	2201      	movs	r2, #1
 8002368:	4013      	ands	r3, r2
 800236a:	d001      	beq.n	8002370 <HAL_UART_Receive+0x4c>
      {
        return  HAL_ERROR;
 800236c:	2301      	movs	r3, #1
 800236e:	e0aa      	b.n	80024c6 <HAL_UART_Receive+0x1a2>
      }
    }

    __HAL_LOCK(huart);
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	2270      	movs	r2, #112	; 0x70
 8002374:	5c9b      	ldrb	r3, [r3, r2]
 8002376:	2b01      	cmp	r3, #1
 8002378:	d101      	bne.n	800237e <HAL_UART_Receive+0x5a>
 800237a:	2302      	movs	r3, #2
 800237c:	e0a3      	b.n	80024c6 <HAL_UART_Receive+0x1a2>
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	2270      	movs	r2, #112	; 0x70
 8002382:	2101      	movs	r1, #1
 8002384:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	2200      	movs	r2, #0
 800238a:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	2222      	movs	r2, #34	; 0x22
 8002390:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8002392:	f7fe fb65 	bl	8000a60 <HAL_GetTick>
 8002396:	0003      	movs	r3, r0
 8002398:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	1dba      	adds	r2, r7, #6
 800239e:	2158      	movs	r1, #88	; 0x58
 80023a0:	8812      	ldrh	r2, [r2, #0]
 80023a2:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	1dba      	adds	r2, r7, #6
 80023a8:	215a      	movs	r1, #90	; 0x5a
 80023aa:	8812      	ldrh	r2, [r2, #0]
 80023ac:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	689a      	ldr	r2, [r3, #8]
 80023b2:	2380      	movs	r3, #128	; 0x80
 80023b4:	015b      	lsls	r3, r3, #5
 80023b6:	429a      	cmp	r2, r3
 80023b8:	d10d      	bne.n	80023d6 <HAL_UART_Receive+0xb2>
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	691b      	ldr	r3, [r3, #16]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d104      	bne.n	80023cc <HAL_UART_Receive+0xa8>
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	225c      	movs	r2, #92	; 0x5c
 80023c6:	4942      	ldr	r1, [pc, #264]	; (80024d0 <HAL_UART_Receive+0x1ac>)
 80023c8:	5299      	strh	r1, [r3, r2]
 80023ca:	e01a      	b.n	8002402 <HAL_UART_Receive+0xde>
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	225c      	movs	r2, #92	; 0x5c
 80023d0:	21ff      	movs	r1, #255	; 0xff
 80023d2:	5299      	strh	r1, [r3, r2]
 80023d4:	e015      	b.n	8002402 <HAL_UART_Receive+0xde>
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d10d      	bne.n	80023fa <HAL_UART_Receive+0xd6>
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	691b      	ldr	r3, [r3, #16]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d104      	bne.n	80023f0 <HAL_UART_Receive+0xcc>
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	225c      	movs	r2, #92	; 0x5c
 80023ea:	21ff      	movs	r1, #255	; 0xff
 80023ec:	5299      	strh	r1, [r3, r2]
 80023ee:	e008      	b.n	8002402 <HAL_UART_Receive+0xde>
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	225c      	movs	r2, #92	; 0x5c
 80023f4:	217f      	movs	r1, #127	; 0x7f
 80023f6:	5299      	strh	r1, [r3, r2]
 80023f8:	e003      	b.n	8002402 <HAL_UART_Receive+0xde>
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	225c      	movs	r2, #92	; 0x5c
 80023fe:	2100      	movs	r1, #0
 8002400:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8002402:	2312      	movs	r3, #18
 8002404:	18fb      	adds	r3, r7, r3
 8002406:	68fa      	ldr	r2, [r7, #12]
 8002408:	215c      	movs	r1, #92	; 0x5c
 800240a:	5a52      	ldrh	r2, [r2, r1]
 800240c:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	689a      	ldr	r2, [r3, #8]
 8002412:	2380      	movs	r3, #128	; 0x80
 8002414:	015b      	lsls	r3, r3, #5
 8002416:	429a      	cmp	r2, r3
 8002418:	d108      	bne.n	800242c <HAL_UART_Receive+0x108>
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	691b      	ldr	r3, [r3, #16]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d104      	bne.n	800242c <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8002422:	2300      	movs	r3, #0
 8002424:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	61bb      	str	r3, [r7, #24]
 800242a:	e003      	b.n	8002434 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002430:	2300      	movs	r3, #0
 8002432:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002434:	e037      	b.n	80024a6 <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002436:	697a      	ldr	r2, [r7, #20]
 8002438:	68f8      	ldr	r0, [r7, #12]
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	9300      	str	r3, [sp, #0]
 800243e:	0013      	movs	r3, r2
 8002440:	2200      	movs	r2, #0
 8002442:	2120      	movs	r1, #32
 8002444:	f000 faae 	bl	80029a4 <UART_WaitOnFlagUntilTimeout>
 8002448:	1e03      	subs	r3, r0, #0
 800244a:	d001      	beq.n	8002450 <HAL_UART_Receive+0x12c>
      {
        return HAL_TIMEOUT;
 800244c:	2303      	movs	r3, #3
 800244e:	e03a      	b.n	80024c6 <HAL_UART_Receive+0x1a2>
      }
      if (pdata8bits == NULL)
 8002450:	69fb      	ldr	r3, [r7, #28]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d10e      	bne.n	8002474 <HAL_UART_Receive+0x150>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800245c:	b29b      	uxth	r3, r3
 800245e:	2212      	movs	r2, #18
 8002460:	18ba      	adds	r2, r7, r2
 8002462:	8812      	ldrh	r2, [r2, #0]
 8002464:	4013      	ands	r3, r2
 8002466:	b29a      	uxth	r2, r3
 8002468:	69bb      	ldr	r3, [r7, #24]
 800246a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800246c:	69bb      	ldr	r3, [r7, #24]
 800246e:	3302      	adds	r3, #2
 8002470:	61bb      	str	r3, [r7, #24]
 8002472:	e00f      	b.n	8002494 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800247a:	b29b      	uxth	r3, r3
 800247c:	b2db      	uxtb	r3, r3
 800247e:	2212      	movs	r2, #18
 8002480:	18ba      	adds	r2, r7, r2
 8002482:	8812      	ldrh	r2, [r2, #0]
 8002484:	b2d2      	uxtb	r2, r2
 8002486:	4013      	ands	r3, r2
 8002488:	b2da      	uxtb	r2, r3
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800248e:	69fb      	ldr	r3, [r7, #28]
 8002490:	3301      	adds	r3, #1
 8002492:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	225a      	movs	r2, #90	; 0x5a
 8002498:	5a9b      	ldrh	r3, [r3, r2]
 800249a:	b29b      	uxth	r3, r3
 800249c:	3b01      	subs	r3, #1
 800249e:	b299      	uxth	r1, r3
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	225a      	movs	r2, #90	; 0x5a
 80024a4:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	225a      	movs	r2, #90	; 0x5a
 80024aa:	5a9b      	ldrh	r3, [r3, r2]
 80024ac:	b29b      	uxth	r3, r3
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d1c1      	bne.n	8002436 <HAL_UART_Receive+0x112>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	2220      	movs	r2, #32
 80024b6:	679a      	str	r2, [r3, #120]	; 0x78

    __HAL_UNLOCK(huart);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	2270      	movs	r2, #112	; 0x70
 80024bc:	2100      	movs	r1, #0
 80024be:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80024c0:	2300      	movs	r3, #0
 80024c2:	e000      	b.n	80024c6 <HAL_UART_Receive+0x1a2>
  }
  else
  {
    return HAL_BUSY;
 80024c4:	2302      	movs	r3, #2
  }
}
 80024c6:	0018      	movs	r0, r3
 80024c8:	46bd      	mov	sp, r7
 80024ca:	b008      	add	sp, #32
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	46c0      	nop			; (mov r8, r8)
 80024d0:	000001ff 	.word	0x000001ff

080024d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b088      	sub	sp, #32
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80024dc:	2300      	movs	r3, #0
 80024de:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 80024e0:	2317      	movs	r3, #23
 80024e2:	18fb      	adds	r3, r7, r3
 80024e4:	2200      	movs	r2, #0
 80024e6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	689a      	ldr	r2, [r3, #8]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	691b      	ldr	r3, [r3, #16]
 80024f0:	431a      	orrs	r2, r3
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	695b      	ldr	r3, [r3, #20]
 80024f6:	431a      	orrs	r2, r3
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	69db      	ldr	r3, [r3, #28]
 80024fc:	4313      	orrs	r3, r2
 80024fe:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4aa3      	ldr	r2, [pc, #652]	; (8002794 <UART_SetConfig+0x2c0>)
 8002508:	4013      	ands	r3, r2
 800250a:	0019      	movs	r1, r3
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	693a      	ldr	r2, [r7, #16]
 8002512:	430a      	orrs	r2, r1
 8002514:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	4a9e      	ldr	r2, [pc, #632]	; (8002798 <UART_SetConfig+0x2c4>)
 800251e:	4013      	ands	r3, r2
 8002520:	0019      	movs	r1, r3
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	68da      	ldr	r2, [r3, #12]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	430a      	orrs	r2, r1
 800252c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	699b      	ldr	r3, [r3, #24]
 8002532:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6a1b      	ldr	r3, [r3, #32]
 8002538:	693a      	ldr	r2, [r7, #16]
 800253a:	4313      	orrs	r3, r2
 800253c:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	4a95      	ldr	r2, [pc, #596]	; (800279c <UART_SetConfig+0x2c8>)
 8002546:	4013      	ands	r3, r2
 8002548:	0019      	movs	r1, r3
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	693a      	ldr	r2, [r7, #16]
 8002550:	430a      	orrs	r2, r1
 8002552:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002554:	4b92      	ldr	r3, [pc, #584]	; (80027a0 <UART_SetConfig+0x2cc>)
 8002556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002558:	2203      	movs	r2, #3
 800255a:	4013      	ands	r3, r2
 800255c:	2b01      	cmp	r3, #1
 800255e:	d00f      	beq.n	8002580 <UART_SetConfig+0xac>
 8002560:	d304      	bcc.n	800256c <UART_SetConfig+0x98>
 8002562:	2b02      	cmp	r3, #2
 8002564:	d011      	beq.n	800258a <UART_SetConfig+0xb6>
 8002566:	2b03      	cmp	r3, #3
 8002568:	d005      	beq.n	8002576 <UART_SetConfig+0xa2>
 800256a:	e013      	b.n	8002594 <UART_SetConfig+0xc0>
 800256c:	231f      	movs	r3, #31
 800256e:	18fb      	adds	r3, r7, r3
 8002570:	2200      	movs	r2, #0
 8002572:	701a      	strb	r2, [r3, #0]
 8002574:	e012      	b.n	800259c <UART_SetConfig+0xc8>
 8002576:	231f      	movs	r3, #31
 8002578:	18fb      	adds	r3, r7, r3
 800257a:	2202      	movs	r2, #2
 800257c:	701a      	strb	r2, [r3, #0]
 800257e:	e00d      	b.n	800259c <UART_SetConfig+0xc8>
 8002580:	231f      	movs	r3, #31
 8002582:	18fb      	adds	r3, r7, r3
 8002584:	2204      	movs	r2, #4
 8002586:	701a      	strb	r2, [r3, #0]
 8002588:	e008      	b.n	800259c <UART_SetConfig+0xc8>
 800258a:	231f      	movs	r3, #31
 800258c:	18fb      	adds	r3, r7, r3
 800258e:	2208      	movs	r2, #8
 8002590:	701a      	strb	r2, [r3, #0]
 8002592:	e003      	b.n	800259c <UART_SetConfig+0xc8>
 8002594:	231f      	movs	r3, #31
 8002596:	18fb      	adds	r3, r7, r3
 8002598:	2210      	movs	r2, #16
 800259a:	701a      	strb	r2, [r3, #0]
 800259c:	46c0      	nop			; (mov r8, r8)

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	69da      	ldr	r2, [r3, #28]
 80025a2:	2380      	movs	r3, #128	; 0x80
 80025a4:	021b      	lsls	r3, r3, #8
 80025a6:	429a      	cmp	r2, r3
 80025a8:	d000      	beq.n	80025ac <UART_SetConfig+0xd8>
 80025aa:	e07d      	b.n	80026a8 <UART_SetConfig+0x1d4>
  {
    switch (clocksource)
 80025ac:	231f      	movs	r3, #31
 80025ae:	18fb      	adds	r3, r7, r3
 80025b0:	781b      	ldrb	r3, [r3, #0]
 80025b2:	2b02      	cmp	r3, #2
 80025b4:	d01c      	beq.n	80025f0 <UART_SetConfig+0x11c>
 80025b6:	dc02      	bgt.n	80025be <UART_SetConfig+0xea>
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d005      	beq.n	80025c8 <UART_SetConfig+0xf4>
 80025bc:	e04b      	b.n	8002656 <UART_SetConfig+0x182>
 80025be:	2b04      	cmp	r3, #4
 80025c0:	d025      	beq.n	800260e <UART_SetConfig+0x13a>
 80025c2:	2b08      	cmp	r3, #8
 80025c4:	d037      	beq.n	8002636 <UART_SetConfig+0x162>
 80025c6:	e046      	b.n	8002656 <UART_SetConfig+0x182>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80025c8:	f7ff f92a 	bl	8001820 <HAL_RCC_GetPCLK1Freq>
 80025cc:	0003      	movs	r3, r0
 80025ce:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	005a      	lsls	r2, r3, #1
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	085b      	lsrs	r3, r3, #1
 80025da:	18d2      	adds	r2, r2, r3
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	0019      	movs	r1, r3
 80025e2:	0010      	movs	r0, r2
 80025e4:	f7fd fd90 	bl	8000108 <__udivsi3>
 80025e8:	0003      	movs	r3, r0
 80025ea:	b29b      	uxth	r3, r3
 80025ec:	61bb      	str	r3, [r7, #24]
        break;
 80025ee:	e037      	b.n	8002660 <UART_SetConfig+0x18c>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	085b      	lsrs	r3, r3, #1
 80025f6:	4a6b      	ldr	r2, [pc, #428]	; (80027a4 <UART_SetConfig+0x2d0>)
 80025f8:	189a      	adds	r2, r3, r2
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	0019      	movs	r1, r3
 8002600:	0010      	movs	r0, r2
 8002602:	f7fd fd81 	bl	8000108 <__udivsi3>
 8002606:	0003      	movs	r3, r0
 8002608:	b29b      	uxth	r3, r3
 800260a:	61bb      	str	r3, [r7, #24]
        break;
 800260c:	e028      	b.n	8002660 <UART_SetConfig+0x18c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800260e:	f7ff f899 	bl	8001744 <HAL_RCC_GetSysClockFreq>
 8002612:	0003      	movs	r3, r0
 8002614:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	005a      	lsls	r2, r3, #1
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	085b      	lsrs	r3, r3, #1
 8002620:	18d2      	adds	r2, r2, r3
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	0019      	movs	r1, r3
 8002628:	0010      	movs	r0, r2
 800262a:	f7fd fd6d 	bl	8000108 <__udivsi3>
 800262e:	0003      	movs	r3, r0
 8002630:	b29b      	uxth	r3, r3
 8002632:	61bb      	str	r3, [r7, #24]
        break;
 8002634:	e014      	b.n	8002660 <UART_SetConfig+0x18c>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	085b      	lsrs	r3, r3, #1
 800263c:	2280      	movs	r2, #128	; 0x80
 800263e:	0252      	lsls	r2, r2, #9
 8002640:	189a      	adds	r2, r3, r2
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	0019      	movs	r1, r3
 8002648:	0010      	movs	r0, r2
 800264a:	f7fd fd5d 	bl	8000108 <__udivsi3>
 800264e:	0003      	movs	r3, r0
 8002650:	b29b      	uxth	r3, r3
 8002652:	61bb      	str	r3, [r7, #24]
        break;
 8002654:	e004      	b.n	8002660 <UART_SetConfig+0x18c>
      default:
        ret = HAL_ERROR;
 8002656:	2317      	movs	r3, #23
 8002658:	18fb      	adds	r3, r7, r3
 800265a:	2201      	movs	r2, #1
 800265c:	701a      	strb	r2, [r3, #0]
        break;
 800265e:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002660:	69bb      	ldr	r3, [r7, #24]
 8002662:	2b0f      	cmp	r3, #15
 8002664:	d91b      	bls.n	800269e <UART_SetConfig+0x1ca>
 8002666:	69bb      	ldr	r3, [r7, #24]
 8002668:	4a4f      	ldr	r2, [pc, #316]	; (80027a8 <UART_SetConfig+0x2d4>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d817      	bhi.n	800269e <UART_SetConfig+0x1ca>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800266e:	69bb      	ldr	r3, [r7, #24]
 8002670:	b29a      	uxth	r2, r3
 8002672:	200a      	movs	r0, #10
 8002674:	183b      	adds	r3, r7, r0
 8002676:	210f      	movs	r1, #15
 8002678:	438a      	bics	r2, r1
 800267a:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800267c:	69bb      	ldr	r3, [r7, #24]
 800267e:	085b      	lsrs	r3, r3, #1
 8002680:	b29b      	uxth	r3, r3
 8002682:	2207      	movs	r2, #7
 8002684:	4013      	ands	r3, r2
 8002686:	b299      	uxth	r1, r3
 8002688:	183b      	adds	r3, r7, r0
 800268a:	183a      	adds	r2, r7, r0
 800268c:	8812      	ldrh	r2, [r2, #0]
 800268e:	430a      	orrs	r2, r1
 8002690:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	183a      	adds	r2, r7, r0
 8002698:	8812      	ldrh	r2, [r2, #0]
 800269a:	60da      	str	r2, [r3, #12]
 800269c:	e06c      	b.n	8002778 <UART_SetConfig+0x2a4>
    }
    else
    {
      ret = HAL_ERROR;
 800269e:	2317      	movs	r3, #23
 80026a0:	18fb      	adds	r3, r7, r3
 80026a2:	2201      	movs	r2, #1
 80026a4:	701a      	strb	r2, [r3, #0]
 80026a6:	e067      	b.n	8002778 <UART_SetConfig+0x2a4>
    }
  }
  else
  {
    switch (clocksource)
 80026a8:	231f      	movs	r3, #31
 80026aa:	18fb      	adds	r3, r7, r3
 80026ac:	781b      	ldrb	r3, [r3, #0]
 80026ae:	2b02      	cmp	r3, #2
 80026b0:	d01b      	beq.n	80026ea <UART_SetConfig+0x216>
 80026b2:	dc02      	bgt.n	80026ba <UART_SetConfig+0x1e6>
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d005      	beq.n	80026c4 <UART_SetConfig+0x1f0>
 80026b8:	e049      	b.n	800274e <UART_SetConfig+0x27a>
 80026ba:	2b04      	cmp	r3, #4
 80026bc:	d024      	beq.n	8002708 <UART_SetConfig+0x234>
 80026be:	2b08      	cmp	r3, #8
 80026c0:	d035      	beq.n	800272e <UART_SetConfig+0x25a>
 80026c2:	e044      	b.n	800274e <UART_SetConfig+0x27a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80026c4:	f7ff f8ac 	bl	8001820 <HAL_RCC_GetPCLK1Freq>
 80026c8:	0003      	movs	r3, r0
 80026ca:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	085a      	lsrs	r2, r3, #1
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	18d2      	adds	r2, r2, r3
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	0019      	movs	r1, r3
 80026dc:	0010      	movs	r0, r2
 80026de:	f7fd fd13 	bl	8000108 <__udivsi3>
 80026e2:	0003      	movs	r3, r0
 80026e4:	b29b      	uxth	r3, r3
 80026e6:	61bb      	str	r3, [r7, #24]
        break;
 80026e8:	e036      	b.n	8002758 <UART_SetConfig+0x284>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	085b      	lsrs	r3, r3, #1
 80026f0:	4a2e      	ldr	r2, [pc, #184]	; (80027ac <UART_SetConfig+0x2d8>)
 80026f2:	189a      	adds	r2, r3, r2
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	0019      	movs	r1, r3
 80026fa:	0010      	movs	r0, r2
 80026fc:	f7fd fd04 	bl	8000108 <__udivsi3>
 8002700:	0003      	movs	r3, r0
 8002702:	b29b      	uxth	r3, r3
 8002704:	61bb      	str	r3, [r7, #24]
        break;
 8002706:	e027      	b.n	8002758 <UART_SetConfig+0x284>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002708:	f7ff f81c 	bl	8001744 <HAL_RCC_GetSysClockFreq>
 800270c:	0003      	movs	r3, r0
 800270e:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	085a      	lsrs	r2, r3, #1
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	18d2      	adds	r2, r2, r3
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	0019      	movs	r1, r3
 8002720:	0010      	movs	r0, r2
 8002722:	f7fd fcf1 	bl	8000108 <__udivsi3>
 8002726:	0003      	movs	r3, r0
 8002728:	b29b      	uxth	r3, r3
 800272a:	61bb      	str	r3, [r7, #24]
        break;
 800272c:	e014      	b.n	8002758 <UART_SetConfig+0x284>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	085b      	lsrs	r3, r3, #1
 8002734:	2280      	movs	r2, #128	; 0x80
 8002736:	0212      	lsls	r2, r2, #8
 8002738:	189a      	adds	r2, r3, r2
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	0019      	movs	r1, r3
 8002740:	0010      	movs	r0, r2
 8002742:	f7fd fce1 	bl	8000108 <__udivsi3>
 8002746:	0003      	movs	r3, r0
 8002748:	b29b      	uxth	r3, r3
 800274a:	61bb      	str	r3, [r7, #24]
        break;
 800274c:	e004      	b.n	8002758 <UART_SetConfig+0x284>
      default:
        ret = HAL_ERROR;
 800274e:	2317      	movs	r3, #23
 8002750:	18fb      	adds	r3, r7, r3
 8002752:	2201      	movs	r2, #1
 8002754:	701a      	strb	r2, [r3, #0]
        break;
 8002756:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002758:	69bb      	ldr	r3, [r7, #24]
 800275a:	2b0f      	cmp	r3, #15
 800275c:	d908      	bls.n	8002770 <UART_SetConfig+0x29c>
 800275e:	69bb      	ldr	r3, [r7, #24]
 8002760:	4a11      	ldr	r2, [pc, #68]	; (80027a8 <UART_SetConfig+0x2d4>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d804      	bhi.n	8002770 <UART_SetConfig+0x29c>
    {
      huart->Instance->BRR = usartdiv;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	69ba      	ldr	r2, [r7, #24]
 800276c:	60da      	str	r2, [r3, #12]
 800276e:	e003      	b.n	8002778 <UART_SetConfig+0x2a4>
    }
    else
    {
      ret = HAL_ERROR;
 8002770:	2317      	movs	r3, #23
 8002772:	18fb      	adds	r3, r7, r3
 8002774:	2201      	movs	r2, #1
 8002776:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2200      	movs	r2, #0
 800277c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2200      	movs	r2, #0
 8002782:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8002784:	2317      	movs	r3, #23
 8002786:	18fb      	adds	r3, r7, r3
 8002788:	781b      	ldrb	r3, [r3, #0]
}
 800278a:	0018      	movs	r0, r3
 800278c:	46bd      	mov	sp, r7
 800278e:	b008      	add	sp, #32
 8002790:	bd80      	pop	{r7, pc}
 8002792:	46c0      	nop			; (mov r8, r8)
 8002794:	ffff69f3 	.word	0xffff69f3
 8002798:	ffffcfff 	.word	0xffffcfff
 800279c:	fffff4ff 	.word	0xfffff4ff
 80027a0:	40021000 	.word	0x40021000
 80027a4:	00f42400 	.word	0x00f42400
 80027a8:	0000ffff 	.word	0x0000ffff
 80027ac:	007a1200 	.word	0x007a1200

080027b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b082      	sub	sp, #8
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027bc:	2201      	movs	r2, #1
 80027be:	4013      	ands	r3, r2
 80027c0:	d00b      	beq.n	80027da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	4a4a      	ldr	r2, [pc, #296]	; (80028f4 <UART_AdvFeatureConfig+0x144>)
 80027ca:	4013      	ands	r3, r2
 80027cc:	0019      	movs	r1, r3
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	430a      	orrs	r2, r1
 80027d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027de:	2202      	movs	r2, #2
 80027e0:	4013      	ands	r3, r2
 80027e2:	d00b      	beq.n	80027fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	4a43      	ldr	r2, [pc, #268]	; (80028f8 <UART_AdvFeatureConfig+0x148>)
 80027ec:	4013      	ands	r3, r2
 80027ee:	0019      	movs	r1, r3
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	430a      	orrs	r2, r1
 80027fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002800:	2204      	movs	r2, #4
 8002802:	4013      	ands	r3, r2
 8002804:	d00b      	beq.n	800281e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	4a3b      	ldr	r2, [pc, #236]	; (80028fc <UART_AdvFeatureConfig+0x14c>)
 800280e:	4013      	ands	r3, r2
 8002810:	0019      	movs	r1, r3
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	430a      	orrs	r2, r1
 800281c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002822:	2208      	movs	r2, #8
 8002824:	4013      	ands	r3, r2
 8002826:	d00b      	beq.n	8002840 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	4a34      	ldr	r2, [pc, #208]	; (8002900 <UART_AdvFeatureConfig+0x150>)
 8002830:	4013      	ands	r3, r2
 8002832:	0019      	movs	r1, r3
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	430a      	orrs	r2, r1
 800283e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002844:	2210      	movs	r2, #16
 8002846:	4013      	ands	r3, r2
 8002848:	d00b      	beq.n	8002862 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	4a2c      	ldr	r2, [pc, #176]	; (8002904 <UART_AdvFeatureConfig+0x154>)
 8002852:	4013      	ands	r3, r2
 8002854:	0019      	movs	r1, r3
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	430a      	orrs	r2, r1
 8002860:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002866:	2220      	movs	r2, #32
 8002868:	4013      	ands	r3, r2
 800286a:	d00b      	beq.n	8002884 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	4a25      	ldr	r2, [pc, #148]	; (8002908 <UART_AdvFeatureConfig+0x158>)
 8002874:	4013      	ands	r3, r2
 8002876:	0019      	movs	r1, r3
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	430a      	orrs	r2, r1
 8002882:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002888:	2240      	movs	r2, #64	; 0x40
 800288a:	4013      	ands	r3, r2
 800288c:	d01d      	beq.n	80028ca <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	4a1d      	ldr	r2, [pc, #116]	; (800290c <UART_AdvFeatureConfig+0x15c>)
 8002896:	4013      	ands	r3, r2
 8002898:	0019      	movs	r1, r3
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	430a      	orrs	r2, r1
 80028a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80028aa:	2380      	movs	r3, #128	; 0x80
 80028ac:	035b      	lsls	r3, r3, #13
 80028ae:	429a      	cmp	r2, r3
 80028b0:	d10b      	bne.n	80028ca <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	4a15      	ldr	r2, [pc, #84]	; (8002910 <UART_AdvFeatureConfig+0x160>)
 80028ba:	4013      	ands	r3, r2
 80028bc:	0019      	movs	r1, r3
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	430a      	orrs	r2, r1
 80028c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ce:	2280      	movs	r2, #128	; 0x80
 80028d0:	4013      	ands	r3, r2
 80028d2:	d00b      	beq.n	80028ec <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	4a0e      	ldr	r2, [pc, #56]	; (8002914 <UART_AdvFeatureConfig+0x164>)
 80028dc:	4013      	ands	r3, r2
 80028de:	0019      	movs	r1, r3
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	430a      	orrs	r2, r1
 80028ea:	605a      	str	r2, [r3, #4]
  }
}
 80028ec:	46c0      	nop			; (mov r8, r8)
 80028ee:	46bd      	mov	sp, r7
 80028f0:	b002      	add	sp, #8
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	fffdffff 	.word	0xfffdffff
 80028f8:	fffeffff 	.word	0xfffeffff
 80028fc:	fffbffff 	.word	0xfffbffff
 8002900:	ffff7fff 	.word	0xffff7fff
 8002904:	ffffefff 	.word	0xffffefff
 8002908:	ffffdfff 	.word	0xffffdfff
 800290c:	ffefffff 	.word	0xffefffff
 8002910:	ff9fffff 	.word	0xff9fffff
 8002914:	fff7ffff 	.word	0xfff7ffff

08002918 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b086      	sub	sp, #24
 800291c:	af02      	add	r7, sp, #8
 800291e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2200      	movs	r2, #0
 8002924:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8002926:	f7fe f89b 	bl	8000a60 <HAL_GetTick>
 800292a:	0003      	movs	r3, r0
 800292c:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	2208      	movs	r2, #8
 8002936:	4013      	ands	r3, r2
 8002938:	2b08      	cmp	r3, #8
 800293a:	d10d      	bne.n	8002958 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800293c:	68fa      	ldr	r2, [r7, #12]
 800293e:	2380      	movs	r3, #128	; 0x80
 8002940:	0399      	lsls	r1, r3, #14
 8002942:	6878      	ldr	r0, [r7, #4]
 8002944:	4b16      	ldr	r3, [pc, #88]	; (80029a0 <UART_CheckIdleState+0x88>)
 8002946:	9300      	str	r3, [sp, #0]
 8002948:	0013      	movs	r3, r2
 800294a:	2200      	movs	r2, #0
 800294c:	f000 f82a 	bl	80029a4 <UART_WaitOnFlagUntilTimeout>
 8002950:	1e03      	subs	r3, r0, #0
 8002952:	d001      	beq.n	8002958 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002954:	2303      	movs	r3, #3
 8002956:	e01f      	b.n	8002998 <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	2204      	movs	r2, #4
 8002960:	4013      	ands	r3, r2
 8002962:	2b04      	cmp	r3, #4
 8002964:	d10d      	bne.n	8002982 <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002966:	68fa      	ldr	r2, [r7, #12]
 8002968:	2380      	movs	r3, #128	; 0x80
 800296a:	03d9      	lsls	r1, r3, #15
 800296c:	6878      	ldr	r0, [r7, #4]
 800296e:	4b0c      	ldr	r3, [pc, #48]	; (80029a0 <UART_CheckIdleState+0x88>)
 8002970:	9300      	str	r3, [sp, #0]
 8002972:	0013      	movs	r3, r2
 8002974:	2200      	movs	r2, #0
 8002976:	f000 f815 	bl	80029a4 <UART_WaitOnFlagUntilTimeout>
 800297a:	1e03      	subs	r3, r0, #0
 800297c:	d001      	beq.n	8002982 <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800297e:	2303      	movs	r3, #3
 8002980:	e00a      	b.n	8002998 <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2220      	movs	r2, #32
 8002986:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2220      	movs	r2, #32
 800298c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2270      	movs	r2, #112	; 0x70
 8002992:	2100      	movs	r1, #0
 8002994:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002996:	2300      	movs	r3, #0
}
 8002998:	0018      	movs	r0, r3
 800299a:	46bd      	mov	sp, r7
 800299c:	b004      	add	sp, #16
 800299e:	bd80      	pop	{r7, pc}
 80029a0:	01ffffff 	.word	0x01ffffff

080029a4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b084      	sub	sp, #16
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	60f8      	str	r0, [r7, #12]
 80029ac:	60b9      	str	r1, [r7, #8]
 80029ae:	603b      	str	r3, [r7, #0]
 80029b0:	1dfb      	adds	r3, r7, #7
 80029b2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80029b4:	e05d      	b.n	8002a72 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029b6:	69bb      	ldr	r3, [r7, #24]
 80029b8:	3301      	adds	r3, #1
 80029ba:	d05a      	beq.n	8002a72 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029bc:	f7fe f850 	bl	8000a60 <HAL_GetTick>
 80029c0:	0002      	movs	r2, r0
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	1ad3      	subs	r3, r2, r3
 80029c6:	69ba      	ldr	r2, [r7, #24]
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d302      	bcc.n	80029d2 <UART_WaitOnFlagUntilTimeout+0x2e>
 80029cc:	69bb      	ldr	r3, [r7, #24]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d11b      	bne.n	8002a0a <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	492f      	ldr	r1, [pc, #188]	; (8002a9c <UART_WaitOnFlagUntilTimeout+0xf8>)
 80029de:	400a      	ands	r2, r1
 80029e0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	689a      	ldr	r2, [r3, #8]
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	2101      	movs	r1, #1
 80029ee:	438a      	bics	r2, r1
 80029f0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2220      	movs	r2, #32
 80029f6:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2220      	movs	r2, #32
 80029fc:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2270      	movs	r2, #112	; 0x70
 8002a02:	2100      	movs	r1, #0
 8002a04:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002a06:	2303      	movs	r3, #3
 8002a08:	e043      	b.n	8002a92 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	2204      	movs	r2, #4
 8002a12:	4013      	ands	r3, r2
 8002a14:	d02d      	beq.n	8002a72 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	69da      	ldr	r2, [r3, #28]
 8002a1c:	2380      	movs	r3, #128	; 0x80
 8002a1e:	011b      	lsls	r3, r3, #4
 8002a20:	401a      	ands	r2, r3
 8002a22:	2380      	movs	r3, #128	; 0x80
 8002a24:	011b      	lsls	r3, r3, #4
 8002a26:	429a      	cmp	r2, r3
 8002a28:	d123      	bne.n	8002a72 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	2280      	movs	r2, #128	; 0x80
 8002a30:	0112      	lsls	r2, r2, #4
 8002a32:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4917      	ldr	r1, [pc, #92]	; (8002a9c <UART_WaitOnFlagUntilTimeout+0xf8>)
 8002a40:	400a      	ands	r2, r1
 8002a42:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	689a      	ldr	r2, [r3, #8]
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	2101      	movs	r1, #1
 8002a50:	438a      	bics	r2, r1
 8002a52:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	2220      	movs	r2, #32
 8002a58:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	2220      	movs	r2, #32
 8002a5e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2220      	movs	r2, #32
 8002a64:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	2270      	movs	r2, #112	; 0x70
 8002a6a:	2100      	movs	r1, #0
 8002a6c:	5499      	strb	r1, [r3, r2]
          
          return HAL_TIMEOUT;
 8002a6e:	2303      	movs	r3, #3
 8002a70:	e00f      	b.n	8002a92 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	69db      	ldr	r3, [r3, #28]
 8002a78:	68ba      	ldr	r2, [r7, #8]
 8002a7a:	4013      	ands	r3, r2
 8002a7c:	68ba      	ldr	r2, [r7, #8]
 8002a7e:	1ad3      	subs	r3, r2, r3
 8002a80:	425a      	negs	r2, r3
 8002a82:	4153      	adcs	r3, r2
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	001a      	movs	r2, r3
 8002a88:	1dfb      	adds	r3, r7, #7
 8002a8a:	781b      	ldrb	r3, [r3, #0]
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	d092      	beq.n	80029b6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002a90:	2300      	movs	r3, #0
}
 8002a92:	0018      	movs	r0, r3
 8002a94:	46bd      	mov	sp, r7
 8002a96:	b004      	add	sp, #16
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	46c0      	nop			; (mov r8, r8)
 8002a9c:	fffffe5f 	.word	0xfffffe5f

08002aa0 <__libc_init_array>:
 8002aa0:	b570      	push	{r4, r5, r6, lr}
 8002aa2:	2600      	movs	r6, #0
 8002aa4:	4d0c      	ldr	r5, [pc, #48]	; (8002ad8 <__libc_init_array+0x38>)
 8002aa6:	4c0d      	ldr	r4, [pc, #52]	; (8002adc <__libc_init_array+0x3c>)
 8002aa8:	1b64      	subs	r4, r4, r5
 8002aaa:	10a4      	asrs	r4, r4, #2
 8002aac:	42a6      	cmp	r6, r4
 8002aae:	d109      	bne.n	8002ac4 <__libc_init_array+0x24>
 8002ab0:	2600      	movs	r6, #0
 8002ab2:	f000 f821 	bl	8002af8 <_init>
 8002ab6:	4d0a      	ldr	r5, [pc, #40]	; (8002ae0 <__libc_init_array+0x40>)
 8002ab8:	4c0a      	ldr	r4, [pc, #40]	; (8002ae4 <__libc_init_array+0x44>)
 8002aba:	1b64      	subs	r4, r4, r5
 8002abc:	10a4      	asrs	r4, r4, #2
 8002abe:	42a6      	cmp	r6, r4
 8002ac0:	d105      	bne.n	8002ace <__libc_init_array+0x2e>
 8002ac2:	bd70      	pop	{r4, r5, r6, pc}
 8002ac4:	00b3      	lsls	r3, r6, #2
 8002ac6:	58eb      	ldr	r3, [r5, r3]
 8002ac8:	4798      	blx	r3
 8002aca:	3601      	adds	r6, #1
 8002acc:	e7ee      	b.n	8002aac <__libc_init_array+0xc>
 8002ace:	00b3      	lsls	r3, r6, #2
 8002ad0:	58eb      	ldr	r3, [r5, r3]
 8002ad2:	4798      	blx	r3
 8002ad4:	3601      	adds	r6, #1
 8002ad6:	e7f2      	b.n	8002abe <__libc_init_array+0x1e>
 8002ad8:	08002b48 	.word	0x08002b48
 8002adc:	08002b48 	.word	0x08002b48
 8002ae0:	08002b48 	.word	0x08002b48
 8002ae4:	08002b4c 	.word	0x08002b4c

08002ae8 <memset>:
 8002ae8:	0003      	movs	r3, r0
 8002aea:	1812      	adds	r2, r2, r0
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d100      	bne.n	8002af2 <memset+0xa>
 8002af0:	4770      	bx	lr
 8002af2:	7019      	strb	r1, [r3, #0]
 8002af4:	3301      	adds	r3, #1
 8002af6:	e7f9      	b.n	8002aec <memset+0x4>

08002af8 <_init>:
 8002af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002afa:	46c0      	nop			; (mov r8, r8)
 8002afc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002afe:	bc08      	pop	{r3}
 8002b00:	469e      	mov	lr, r3
 8002b02:	4770      	bx	lr

08002b04 <_fini>:
 8002b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b06:	46c0      	nop			; (mov r8, r8)
 8002b08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b0a:	bc08      	pop	{r3}
 8002b0c:	469e      	mov	lr, r3
 8002b0e:	4770      	bx	lr
