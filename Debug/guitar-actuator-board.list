
guitar-actuator-board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .user_data    0000000c  08003c00  08003c00  00023c00  2**2
                  ALLOC
  2 .text         0000314c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000050  0800320c  0800320c  0001320c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0800325c  0800325c  00020010  2**0
                  CONTENTS
  5 .ARM          00000000  0800325c  0800325c  00020010  2**0
                  CONTENTS
  6 .preinit_array 00000000  0800325c  0800325c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  0800325c  0800325c  0001325c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  08003260  08003260  00013260  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000010  20000000  08003264  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00000140  20000010  08003274  00020010  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20000150  08003274  00020150  2**0
                  ALLOC
 12 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b777  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 00001ff7  00000000  00000000  0002b7af  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000ce0  00000000  00000000  0002d7a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000be8  00000000  00000000  0002e488  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  000107fd  00000000  00000000  0002f070  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000c258  00000000  00000000  0003f86d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00062f68  00000000  00000000  0004bac5  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  000aea2d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002d14  00000000  00000000  000aeaa8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080031f4 	.word	0x080031f4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	080031f4 	.word	0x080031f4

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <init_config>:

__attribute__((__section__(".user_data"))) config_t flash_config;
config_t ram_config; // Ram config is stored in ram (as opposed to flash)

// Loads config from flash and into ram
void init_config() {
 8000220:	b5b0      	push	{r4, r5, r7, lr}
 8000222:	b084      	sub	sp, #16
 8000224:	af02      	add	r7, sp, #8
	// When code is uploaded, if you want to preserve past settings then make overwrite_config false.
	// If you want to set new settings, set them here and make overwrite_config true.
	bool overwrite_config = true;
 8000226:	1dfb      	adds	r3, r7, #7
 8000228:	2201      	movs	r2, #1
 800022a:	701a      	strb	r2, [r3, #0]
	ram_config.note = 36;
 800022c:	4b16      	ldr	r3, [pc, #88]	; (8000288 <init_config+0x68>)
 800022e:	2224      	movs	r2, #36	; 0x24
 8000230:	601a      	str	r2, [r3, #0]
	ram_config.strummed_on_position = flash_config.strummed_on_position;
 8000232:	4b16      	ldr	r3, [pc, #88]	; (800028c <init_config+0x6c>)
 8000234:	685a      	ldr	r2, [r3, #4]
 8000236:	4b14      	ldr	r3, [pc, #80]	; (8000288 <init_config+0x68>)
 8000238:	605a      	str	r2, [r3, #4]
	ram_config.strummed_off_position = flash_config.strummed_on_position;
 800023a:	4b14      	ldr	r3, [pc, #80]	; (800028c <init_config+0x6c>)
 800023c:	685a      	ldr	r2, [r3, #4]
 800023e:	4b12      	ldr	r3, [pc, #72]	; (8000288 <init_config+0x68>)
 8000240:	609a      	str	r2, [r3, #8]

	if(!config_struct_equal(ram_config, flash_config) && overwrite_config) {
 8000242:	4912      	ldr	r1, [pc, #72]	; (800028c <init_config+0x6c>)
 8000244:	4a10      	ldr	r2, [pc, #64]	; (8000288 <init_config+0x68>)
 8000246:	466b      	mov	r3, sp
 8000248:	0018      	movs	r0, r3
 800024a:	1d0b      	adds	r3, r1, #4
 800024c:	cb30      	ldmia	r3!, {r4, r5}
 800024e:	c030      	stmia	r0!, {r4, r5}
 8000250:	680b      	ldr	r3, [r1, #0]
 8000252:	6810      	ldr	r0, [r2, #0]
 8000254:	6851      	ldr	r1, [r2, #4]
 8000256:	6892      	ldr	r2, [r2, #8]
 8000258:	f000 f858 	bl	800030c <config_struct_equal>
 800025c:	0003      	movs	r3, r0
 800025e:	001a      	movs	r2, r3
 8000260:	2301      	movs	r3, #1
 8000262:	4053      	eors	r3, r2
 8000264:	b2db      	uxtb	r3, r3
 8000266:	2b00      	cmp	r3, #0
 8000268:	d005      	beq.n	8000276 <init_config+0x56>
 800026a:	1dfb      	adds	r3, r7, #7
 800026c:	781b      	ldrb	r3, [r3, #0]
 800026e:	2b00      	cmp	r3, #0
 8000270:	d001      	beq.n	8000276 <init_config+0x56>
		Write_Flash();
 8000272:	f000 f80d 	bl	8000290 <Write_Flash>
	}
	ram_config = flash_config;
 8000276:	4b04      	ldr	r3, [pc, #16]	; (8000288 <init_config+0x68>)
 8000278:	4a04      	ldr	r2, [pc, #16]	; (800028c <init_config+0x6c>)
 800027a:	ca13      	ldmia	r2!, {r0, r1, r4}
 800027c:	c313      	stmia	r3!, {r0, r1, r4}
}
 800027e:	46c0      	nop			; (mov r8, r8)
 8000280:	46bd      	mov	sp, r7
 8000282:	b002      	add	sp, #8
 8000284:	bdb0      	pop	{r4, r5, r7, pc}
 8000286:	46c0      	nop			; (mov r8, r8)
 8000288:	20000038 	.word	0x20000038
 800028c:	08003c00 	.word	0x08003c00

08000290 <Write_Flash>:

// Writes ram config struct to flash.
// If you want to change the config in flash, change ram config and call this function.
void Write_Flash()
{
 8000290:	b5b0      	push	{r4, r5, r7, lr}
 8000292:	b088      	sub	sp, #32
 8000294:	af00      	add	r7, sp, #0
	// Only write to flash if our config files differ
//	if(config_struct_equal(ram_config, flash_config)) {
//		return;
//	}

    HAL_FLASH_Unlock();
 8000296:	f000 fe99 	bl	8000fcc <HAL_FLASH_Unlock>

    int startAddress = 0x08003c00;
 800029a:	4b1a      	ldr	r3, [pc, #104]	; (8000304 <Write_Flash+0x74>)
 800029c:	61bb      	str	r3, [r7, #24]
    FLASH_EraseInitTypeDef flashPageEraseConfig;
    flashPageEraseConfig.NbPages = 1;
 800029e:	2108      	movs	r1, #8
 80002a0:	187b      	adds	r3, r7, r1
 80002a2:	2201      	movs	r2, #1
 80002a4:	609a      	str	r2, [r3, #8]
    flashPageEraseConfig.PageAddress = startAddress;
 80002a6:	69ba      	ldr	r2, [r7, #24]
 80002a8:	187b      	adds	r3, r7, r1
 80002aa:	605a      	str	r2, [r3, #4]
    flashPageEraseConfig.TypeErase = FLASH_TYPEERASE_PAGES;
 80002ac:	187b      	adds	r3, r7, r1
 80002ae:	2200      	movs	r2, #0
 80002b0:	601a      	str	r2, [r3, #0]
    uint32_t pageErrors;
    HAL_FLASHEx_Erase(&flashPageEraseConfig, &pageErrors);
 80002b2:	1d3a      	adds	r2, r7, #4
 80002b4:	187b      	adds	r3, r7, r1
 80002b6:	0011      	movs	r1, r2
 80002b8:	0018      	movs	r0, r3
 80002ba:	f000 ff47 	bl	800114c <HAL_FLASHEx_Erase>
    uint32_t* data = (uint32_t*)&ram_config;
 80002be:	4b12      	ldr	r3, [pc, #72]	; (8000308 <Write_Flash+0x78>)
 80002c0:	617b      	str	r3, [r7, #20]
    for(int i = 0; i<sizeof(config_t); i++) {
 80002c2:	2300      	movs	r3, #0
 80002c4:	61fb      	str	r3, [r7, #28]
 80002c6:	e014      	b.n	80002f2 <Write_Flash+0x62>
    	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, startAddress+(4*i), data[i]);
 80002c8:	69fb      	ldr	r3, [r7, #28]
 80002ca:	009a      	lsls	r2, r3, #2
 80002cc:	69bb      	ldr	r3, [r7, #24]
 80002ce:	18d3      	adds	r3, r2, r3
 80002d0:	0019      	movs	r1, r3
 80002d2:	69fb      	ldr	r3, [r7, #28]
 80002d4:	009b      	lsls	r3, r3, #2
 80002d6:	697a      	ldr	r2, [r7, #20]
 80002d8:	18d3      	adds	r3, r2, r3
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	001c      	movs	r4, r3
 80002de:	2300      	movs	r3, #0
 80002e0:	001d      	movs	r5, r3
 80002e2:	0022      	movs	r2, r4
 80002e4:	002b      	movs	r3, r5
 80002e6:	2002      	movs	r0, #2
 80002e8:	f000 fdda 	bl	8000ea0 <HAL_FLASH_Program>
    for(int i = 0; i<sizeof(config_t); i++) {
 80002ec:	69fb      	ldr	r3, [r7, #28]
 80002ee:	3301      	adds	r3, #1
 80002f0:	61fb      	str	r3, [r7, #28]
 80002f2:	69fb      	ldr	r3, [r7, #28]
 80002f4:	2b0b      	cmp	r3, #11
 80002f6:	d9e7      	bls.n	80002c8 <Write_Flash+0x38>
    }
    HAL_FLASH_Lock();
 80002f8:	f000 fe8e 	bl	8001018 <HAL_FLASH_Lock>
}
 80002fc:	46c0      	nop			; (mov r8, r8)
 80002fe:	46bd      	mov	sp, r7
 8000300:	b008      	add	sp, #32
 8000302:	bdb0      	pop	{r4, r5, r7, pc}
 8000304:	08003c00 	.word	0x08003c00
 8000308:	20000038 	.word	0x20000038

0800030c <config_struct_equal>:

bool config_struct_equal(config_t a, config_t b) {
 800030c:	b082      	sub	sp, #8
 800030e:	b590      	push	{r4, r7, lr}
 8000310:	b085      	sub	sp, #20
 8000312:	af00      	add	r7, sp, #0
 8000314:	1d3c      	adds	r4, r7, #4
 8000316:	6020      	str	r0, [r4, #0]
 8000318:	6061      	str	r1, [r4, #4]
 800031a:	60a2      	str	r2, [r4, #8]
 800031c:	2204      	movs	r2, #4
 800031e:	2120      	movs	r1, #32
 8000320:	468c      	mov	ip, r1
 8000322:	44bc      	add	ip, r7
 8000324:	4462      	add	r2, ip
 8000326:	6013      	str	r3, [r2, #0]
	if(a.note == b.note) {
 8000328:	1d3b      	adds	r3, r7, #4
 800032a:	681a      	ldr	r2, [r3, #0]
 800032c:	2304      	movs	r3, #4
 800032e:	2120      	movs	r1, #32
 8000330:	468c      	mov	ip, r1
 8000332:	44bc      	add	ip, r7
 8000334:	4463      	add	r3, ip
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	429a      	cmp	r2, r3
 800033a:	d101      	bne.n	8000340 <config_struct_equal+0x34>
		return true;
 800033c:	2301      	movs	r3, #1
 800033e:	e000      	b.n	8000342 <config_struct_equal+0x36>
	}
	return false;
 8000340:	2300      	movs	r3, #0
}
 8000342:	0018      	movs	r0, r3
 8000344:	46bd      	mov	sp, r7
 8000346:	b005      	add	sp, #20
 8000348:	bc90      	pop	{r4, r7}
 800034a:	bc08      	pop	{r3}
 800034c:	b002      	add	sp, #8
 800034e:	4718      	bx	r3

08000350 <led_on>:
 *  Created on: Jan 10, 2021
 *      Author: lfarritor3
 */

// Turns LED off on board
void led_on() {
 8000350:	b580      	push	{r7, lr}
 8000352:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, GPIO_PIN_SET);
 8000354:	2390      	movs	r3, #144	; 0x90
 8000356:	05db      	lsls	r3, r3, #23
 8000358:	2201      	movs	r2, #1
 800035a:	2110      	movs	r1, #16
 800035c:	0018      	movs	r0, r3
 800035e:	f001 f911 	bl	8001584 <HAL_GPIO_WritePin>
}
 8000362:	46c0      	nop			; (mov r8, r8)
 8000364:	46bd      	mov	sp, r7
 8000366:	bd80      	pop	{r7, pc}

08000368 <led_off>:

// Turns LED on on board
void led_off() {
 8000368:	b580      	push	{r7, lr}
 800036a:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, GPIO_PIN_RESET);
 800036c:	2390      	movs	r3, #144	; 0x90
 800036e:	05db      	lsls	r3, r3, #23
 8000370:	2200      	movs	r2, #0
 8000372:	2110      	movs	r1, #16
 8000374:	0018      	movs	r0, r3
 8000376:	f001 f905 	bl	8001584 <HAL_GPIO_WritePin>
}
 800037a:	46c0      	nop			; (mov r8, r8)
 800037c:	46bd      	mov	sp, r7
 800037e:	bd80      	pop	{r7, pc}

08000380 <toggle_led>:

// Toggles debug LED on board
void toggle_led() {
 8000380:	b580      	push	{r7, lr}
 8000382:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(led_GPIO_Port, led_Pin);
 8000384:	2390      	movs	r3, #144	; 0x90
 8000386:	05db      	lsls	r3, r3, #23
 8000388:	2110      	movs	r1, #16
 800038a:	0018      	movs	r0, r3
 800038c:	f001 f917 	bl	80015be <HAL_GPIO_TogglePin>
}
 8000390:	46c0      	nop			; (mov r8, r8)
 8000392:	46bd      	mov	sp, r7
 8000394:	bd80      	pop	{r7, pc}

08000396 <blink>:

// Blinks debug LED a given number of times
void blink(int x) {
 8000396:	b580      	push	{r7, lr}
 8000398:	b084      	sub	sp, #16
 800039a:	af00      	add	r7, sp, #0
 800039c:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < x * 2; i++) {
 800039e:	2300      	movs	r3, #0
 80003a0:	60fb      	str	r3, [r7, #12]
 80003a2:	e007      	b.n	80003b4 <blink+0x1e>
		toggle_led();
 80003a4:	f7ff ffec 	bl	8000380 <toggle_led>
		HAL_Delay(100);
 80003a8:	2064      	movs	r0, #100	; 0x64
 80003aa:	f000 fca3 	bl	8000cf4 <HAL_Delay>
	for(int i = 0; i < x * 2; i++) {
 80003ae:	68fb      	ldr	r3, [r7, #12]
 80003b0:	3301      	adds	r3, #1
 80003b2:	60fb      	str	r3, [r7, #12]
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	005b      	lsls	r3, r3, #1
 80003b8:	68fa      	ldr	r2, [r7, #12]
 80003ba:	429a      	cmp	r2, r3
 80003bc:	dbf2      	blt.n	80003a4 <blink+0xe>
	}
}
 80003be:	46c0      	nop			; (mov r8, r8)
 80003c0:	46bd      	mov	sp, r7
 80003c2:	b004      	add	sp, #16
 80003c4:	bd80      	pop	{r7, pc}
	...

080003c8 <process_midi_message>:
void process_programming_state(uint8_t note);

int read_key_num = 0;

// Processes MIDI messages using a state machine
void process_midi_message(uint8_t byte1) {
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b082      	sub	sp, #8
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	0002      	movs	r2, r0
 80003d0:	1dfb      	adds	r3, r7, #7
 80003d2:	701a      	strb	r2, [r3, #0]
	if(byte1 & 0x80) { //check to see if the first bit of the first byte is 1. this means that its a system message and we need to switch to that status
 80003d4:	1dfb      	adds	r3, r7, #7
 80003d6:	781b      	ldrb	r3, [r3, #0]
 80003d8:	b25b      	sxtb	r3, r3
 80003da:	2b00      	cmp	r3, #0
 80003dc:	da28      	bge.n	8000430 <process_midi_message+0x68>
        CURRENT_STATUS = byte1; //unused for now
 80003de:	1dfb      	adds	r3, r7, #7
 80003e0:	781a      	ldrb	r2, [r3, #0]
 80003e2:	4b4c      	ldr	r3, [pc, #304]	; (8000514 <process_midi_message+0x14c>)
 80003e4:	601a      	str	r2, [r3, #0]

        switch (byte1) { //now, interpret the message itself
 80003e6:	1dfb      	adds	r3, r7, #7
 80003e8:	781b      	ldrb	r3, [r3, #0]
 80003ea:	2bb0      	cmp	r3, #176	; 0xb0
 80003ec:	d01c      	beq.n	8000428 <process_midi_message+0x60>
 80003ee:	dc08      	bgt.n	8000402 <process_midi_message+0x3a>
 80003f0:	2b90      	cmp	r3, #144	; 0x90
 80003f2:	d015      	beq.n	8000420 <process_midi_message+0x58>
 80003f4:	2ba0      	cmp	r3, #160	; 0xa0
 80003f6:	d100      	bne.n	80003fa <process_midi_message+0x32>
 80003f8:	e077      	b.n	80004ea <process_midi_message+0x122>
 80003fa:	2b80      	cmp	r3, #128	; 0x80
 80003fc:	d100      	bne.n	8000400 <process_midi_message+0x38>
 80003fe:	e076      	b.n	80004ee <process_midi_message+0x126>
        case 254: // Active sensing
//        	state = STATE_IDLE;
        	break;

        default:
            break;
 8000400:	e084      	b.n	800050c <process_midi_message+0x144>
        switch (byte1) { //now, interpret the message itself
 8000402:	2bd0      	cmp	r3, #208	; 0xd0
 8000404:	d100      	bne.n	8000408 <process_midi_message+0x40>
 8000406:	e074      	b.n	80004f2 <process_midi_message+0x12a>
 8000408:	dc03      	bgt.n	8000412 <process_midi_message+0x4a>
 800040a:	2bc0      	cmp	r3, #192	; 0xc0
 800040c:	d100      	bne.n	8000410 <process_midi_message+0x48>
 800040e:	e072      	b.n	80004f6 <process_midi_message+0x12e>
            break;
 8000410:	e07c      	b.n	800050c <process_midi_message+0x144>
        switch (byte1) { //now, interpret the message itself
 8000412:	2be0      	cmp	r3, #224	; 0xe0
 8000414:	d100      	bne.n	8000418 <process_midi_message+0x50>
 8000416:	e070      	b.n	80004fa <process_midi_message+0x132>
 8000418:	2bfe      	cmp	r3, #254	; 0xfe
 800041a:	d100      	bne.n	800041e <process_midi_message+0x56>
 800041c:	e06f      	b.n	80004fe <process_midi_message+0x136>
            break;
 800041e:	e075      	b.n	800050c <process_midi_message+0x144>
        	state = STATE_READ_KEY;
 8000420:	4b3d      	ldr	r3, [pc, #244]	; (8000518 <process_midi_message+0x150>)
 8000422:	2201      	movs	r2, #1
 8000424:	701a      	strb	r2, [r3, #0]
            break;
 8000426:	e071      	b.n	800050c <process_midi_message+0x144>
        	state = STATE_CONTROL_CHANGE;
 8000428:	4b3b      	ldr	r3, [pc, #236]	; (8000518 <process_midi_message+0x150>)
 800042a:	2206      	movs	r2, #6
 800042c:	701a      	strb	r2, [r3, #0]
            break;
 800042e:	e06d      	b.n	800050c <process_midi_message+0x144>
        }
    }
    else {
        //if the first byte isn’t a status byte, then we are in the previous status. aka running status. depending on current status
        switch(state) {
 8000430:	4b39      	ldr	r3, [pc, #228]	; (8000518 <process_midi_message+0x150>)
 8000432:	781b      	ldrb	r3, [r3, #0]
 8000434:	2b02      	cmp	r3, #2
 8000436:	d010      	beq.n	800045a <process_midi_message+0x92>
 8000438:	dc02      	bgt.n	8000440 <process_midi_message+0x78>
 800043a:	2b01      	cmp	r3, #1
 800043c:	d005      	beq.n	800044a <process_midi_message+0x82>
        		set_pulse(record_scratch_pulse);
        	}
        	break;

        default:
        	break;
 800043e:	e065      	b.n	800050c <process_midi_message+0x144>
        switch(state) {
 8000440:	2b06      	cmp	r3, #6
 8000442:	d02f      	beq.n	80004a4 <process_midi_message+0xdc>
 8000444:	2b08      	cmp	r3, #8
 8000446:	d039      	beq.n	80004bc <process_midi_message+0xf4>
        	break;
 8000448:	e060      	b.n	800050c <process_midi_message+0x144>
        	recived_key = byte1;
 800044a:	1dfb      	adds	r3, r7, #7
 800044c:	781a      	ldrb	r2, [r3, #0]
 800044e:	4b33      	ldr	r3, [pc, #204]	; (800051c <process_midi_message+0x154>)
 8000450:	601a      	str	r2, [r3, #0]
        	state = STATE_READ_VELOCITY;
 8000452:	4b31      	ldr	r3, [pc, #196]	; (8000518 <process_midi_message+0x150>)
 8000454:	2202      	movs	r2, #2
 8000456:	701a      	strb	r2, [r3, #0]
        	break;
 8000458:	e058      	b.n	800050c <process_midi_message+0x144>
        	recived_velocity = byte1;
 800045a:	1dfb      	adds	r3, r7, #7
 800045c:	781a      	ldrb	r2, [r3, #0]
 800045e:	4b30      	ldr	r3, [pc, #192]	; (8000520 <process_midi_message+0x158>)
 8000460:	601a      	str	r2, [r3, #0]
        	if (recived_key == ram_config.note && recived_velocity > 0) {
 8000462:	4b30      	ldr	r3, [pc, #192]	; (8000524 <process_midi_message+0x15c>)
 8000464:	681a      	ldr	r2, [r3, #0]
 8000466:	4b2d      	ldr	r3, [pc, #180]	; (800051c <process_midi_message+0x154>)
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	429a      	cmp	r2, r3
 800046c:	d10c      	bne.n	8000488 <process_midi_message+0xc0>
 800046e:	4b2c      	ldr	r3, [pc, #176]	; (8000520 <process_midi_message+0x158>)
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	2b00      	cmp	r3, #0
 8000474:	d008      	beq.n	8000488 <process_midi_message+0xc0>
            	read_key_num += 1;
 8000476:	4b2c      	ldr	r3, [pc, #176]	; (8000528 <process_midi_message+0x160>)
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	1c5a      	adds	r2, r3, #1
 800047c:	4b2a      	ldr	r3, [pc, #168]	; (8000528 <process_midi_message+0x160>)
 800047e:	601a      	str	r2, [r3, #0]
        		state = STATE_PLAY_NOTE;
 8000480:	4b25      	ldr	r3, [pc, #148]	; (8000518 <process_midi_message+0x150>)
 8000482:	2205      	movs	r2, #5
 8000484:	701a      	strb	r2, [r3, #0]
 8000486:	e002      	b.n	800048e <process_midi_message+0xc6>
        		state = STATE_READ_KEY;
 8000488:	4b23      	ldr	r3, [pc, #140]	; (8000518 <process_midi_message+0x150>)
 800048a:	2201      	movs	r2, #1
 800048c:	701a      	strb	r2, [r3, #0]
        	if(recived_velocity > 0) {
 800048e:	4b24      	ldr	r3, [pc, #144]	; (8000520 <process_midi_message+0x158>)
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	2b00      	cmp	r3, #0
 8000494:	d035      	beq.n	8000502 <process_midi_message+0x13a>
        		process_programming_state(recived_key);
 8000496:	4b21      	ldr	r3, [pc, #132]	; (800051c <process_midi_message+0x154>)
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	b2db      	uxtb	r3, r3
 800049c:	0018      	movs	r0, r3
 800049e:	f000 f851 	bl	8000544 <process_programming_state>
    		break;
 80004a2:	e02e      	b.n	8000502 <process_midi_message+0x13a>
        	recived_control_number = byte1;
 80004a4:	1dfb      	adds	r3, r7, #7
 80004a6:	781a      	ldrb	r2, [r3, #0]
 80004a8:	4b20      	ldr	r3, [pc, #128]	; (800052c <process_midi_message+0x164>)
 80004aa:	601a      	str	r2, [r3, #0]
        	if(recived_control_number == 1) {
 80004ac:	4b1f      	ldr	r3, [pc, #124]	; (800052c <process_midi_message+0x164>)
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	2b01      	cmp	r3, #1
 80004b2:	d128      	bne.n	8000506 <process_midi_message+0x13e>
        		state = STATE_MODULATION_CHANGE;
 80004b4:	4b18      	ldr	r3, [pc, #96]	; (8000518 <process_midi_message+0x150>)
 80004b6:	2208      	movs	r2, #8
 80004b8:	701a      	strb	r2, [r3, #0]
        	break;
 80004ba:	e024      	b.n	8000506 <process_midi_message+0x13e>
        	recived_modulation = byte1;
 80004bc:	1dfb      	adds	r3, r7, #7
 80004be:	781a      	ldrb	r2, [r3, #0]
 80004c0:	4b1b      	ldr	r3, [pc, #108]	; (8000530 <process_midi_message+0x168>)
 80004c2:	601a      	str	r2, [r3, #0]
        	if(programming_state == RECORD_SCRATCH) {
 80004c4:	4b1b      	ldr	r3, [pc, #108]	; (8000534 <process_midi_message+0x16c>)
 80004c6:	781b      	ldrb	r3, [r3, #0]
 80004c8:	2b05      	cmp	r3, #5
 80004ca:	d11e      	bne.n	800050a <process_midi_message+0x142>
        		record_scratch_pulse = ((MAXIMUM_PWM_POSITION - MINIMUM_PWM_POSITION) * recived_modulation) / 128 + MINIMUM_PWM_POSITION;
 80004cc:	4b18      	ldr	r3, [pc, #96]	; (8000530 <process_midi_message+0x168>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	4a19      	ldr	r2, [pc, #100]	; (8000538 <process_midi_message+0x170>)
 80004d2:	4353      	muls	r3, r2
 80004d4:	09db      	lsrs	r3, r3, #7
 80004d6:	4a19      	ldr	r2, [pc, #100]	; (800053c <process_midi_message+0x174>)
 80004d8:	189a      	adds	r2, r3, r2
 80004da:	4b19      	ldr	r3, [pc, #100]	; (8000540 <process_midi_message+0x178>)
 80004dc:	601a      	str	r2, [r3, #0]
        		set_pulse(record_scratch_pulse);
 80004de:	4b18      	ldr	r3, [pc, #96]	; (8000540 <process_midi_message+0x178>)
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	0018      	movs	r0, r3
 80004e4:	f000 f8b2 	bl	800064c <set_pulse>
        	break;
 80004e8:	e00f      	b.n	800050a <process_midi_message+0x142>
            break;
 80004ea:	46c0      	nop			; (mov r8, r8)
 80004ec:	e00e      	b.n	800050c <process_midi_message+0x144>
            break;
 80004ee:	46c0      	nop			; (mov r8, r8)
 80004f0:	e00c      	b.n	800050c <process_midi_message+0x144>
            break;
 80004f2:	46c0      	nop			; (mov r8, r8)
 80004f4:	e00a      	b.n	800050c <process_midi_message+0x144>
            break;
 80004f6:	46c0      	nop			; (mov r8, r8)
 80004f8:	e008      	b.n	800050c <process_midi_message+0x144>
            break;
 80004fa:	46c0      	nop			; (mov r8, r8)
 80004fc:	e006      	b.n	800050c <process_midi_message+0x144>
        	break;
 80004fe:	46c0      	nop			; (mov r8, r8)
 8000500:	e004      	b.n	800050c <process_midi_message+0x144>
    		break;
 8000502:	46c0      	nop			; (mov r8, r8)
 8000504:	e002      	b.n	800050c <process_midi_message+0x144>
        	break;
 8000506:	46c0      	nop			; (mov r8, r8)
 8000508:	e000      	b.n	800050c <process_midi_message+0x144>
        	break;
 800050a:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 800050c:	46c0      	nop			; (mov r8, r8)
 800050e:	46bd      	mov	sp, r7
 8000510:	b002      	add	sp, #8
 8000512:	bd80      	pop	{r7, pc}
 8000514:	2000002c 	.word	0x2000002c
 8000518:	2000004c 	.word	0x2000004c
 800051c:	20000058 	.word	0x20000058
 8000520:	20000054 	.word	0x20000054
 8000524:	20000038 	.word	0x20000038
 8000528:	20000030 	.word	0x20000030
 800052c:	20000050 	.word	0x20000050
 8000530:	20000048 	.word	0x20000048
 8000534:	2000004d 	.word	0x2000004d
 8000538:	00006978 	.word	0x00006978
 800053c:	000032c8 	.word	0x000032c8
 8000540:	20000044 	.word	0x20000044

08000544 <process_programming_state>:

// State machine for programming state (programming state is for changing paramaters in flash)
void process_programming_state(uint8_t note) {
 8000544:	b580      	push	{r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af00      	add	r7, sp, #0
 800054a:	0002      	movs	r2, r0
 800054c:	1dfb      	adds	r3, r7, #7
 800054e:	701a      	strb	r2, [r3, #0]
	// TODO move these magic numbers to another location
	switch(programming_state) {
 8000550:	4b39      	ldr	r3, [pc, #228]	; (8000638 <process_programming_state+0xf4>)
 8000552:	781b      	ldrb	r3, [r3, #0]
 8000554:	2b05      	cmp	r3, #5
 8000556:	d900      	bls.n	800055a <process_programming_state+0x16>
 8000558:	e069      	b.n	800062e <process_programming_state+0xea>
 800055a:	009a      	lsls	r2, r3, #2
 800055c:	4b37      	ldr	r3, [pc, #220]	; (800063c <process_programming_state+0xf8>)
 800055e:	18d3      	adds	r3, r2, r3
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	469f      	mov	pc, r3
	case PASSCODE_NONE:
		if (note == PROGRAMMING_MODE_PASSCODE_1) {
 8000564:	1dfb      	adds	r3, r7, #7
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	2b18      	cmp	r3, #24
 800056a:	d103      	bne.n	8000574 <process_programming_state+0x30>
			programming_state = PASSCODE_1;
 800056c:	4b32      	ldr	r3, [pc, #200]	; (8000638 <process_programming_state+0xf4>)
 800056e:	2201      	movs	r2, #1
 8000570:	701a      	strb	r2, [r3, #0]
		}
		else {
			programming_state = PASSCODE_NONE;
		}
		break;
 8000572:	e05d      	b.n	8000630 <process_programming_state+0xec>
			programming_state = PASSCODE_NONE;
 8000574:	4b30      	ldr	r3, [pc, #192]	; (8000638 <process_programming_state+0xf4>)
 8000576:	2200      	movs	r2, #0
 8000578:	701a      	strb	r2, [r3, #0]
		break;
 800057a:	e059      	b.n	8000630 <process_programming_state+0xec>
	case PASSCODE_1:
		if (note == PROGRAMMING_MODE_PASSCODE_2) {
 800057c:	1dfb      	adds	r3, r7, #7
 800057e:	781b      	ldrb	r3, [r3, #0]
 8000580:	2b16      	cmp	r3, #22
 8000582:	d103      	bne.n	800058c <process_programming_state+0x48>
			programming_state = PASSCODE_2;
 8000584:	4b2c      	ldr	r3, [pc, #176]	; (8000638 <process_programming_state+0xf4>)
 8000586:	2202      	movs	r2, #2
 8000588:	701a      	strb	r2, [r3, #0]
		}
		else {
			programming_state = PASSCODE_NONE;
		}
		break;
 800058a:	e051      	b.n	8000630 <process_programming_state+0xec>
			programming_state = PASSCODE_NONE;
 800058c:	4b2a      	ldr	r3, [pc, #168]	; (8000638 <process_programming_state+0xf4>)
 800058e:	2200      	movs	r2, #0
 8000590:	701a      	strb	r2, [r3, #0]
		break;
 8000592:	e04d      	b.n	8000630 <process_programming_state+0xec>
	case PASSCODE_2:
		if (note == PROGRAMMING_MODE_PASSCODE_3) {
 8000594:	1dfb      	adds	r3, r7, #7
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	2b17      	cmp	r3, #23
 800059a:	d103      	bne.n	80005a4 <process_programming_state+0x60>
			programming_state = PASSCODE_3;
 800059c:	4b26      	ldr	r3, [pc, #152]	; (8000638 <process_programming_state+0xf4>)
 800059e:	2203      	movs	r2, #3
 80005a0:	701a      	strb	r2, [r3, #0]
		}
		else {
			programming_state = PASSCODE_NONE;
		}
		break;
 80005a2:	e045      	b.n	8000630 <process_programming_state+0xec>
			programming_state = PASSCODE_NONE;
 80005a4:	4b24      	ldr	r3, [pc, #144]	; (8000638 <process_programming_state+0xf4>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	701a      	strb	r2, [r3, #0]
		break;
 80005aa:	e041      	b.n	8000630 <process_programming_state+0xec>
	case PASSCODE_3:
		if (note == PROGRAMMING_MODE_PASSCODE_4) {
 80005ac:	1dfb      	adds	r3, r7, #7
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	2b15      	cmp	r3, #21
 80005b2:	d10b      	bne.n	80005cc <process_programming_state+0x88>
			programming_state = PROGRAMMING;
 80005b4:	4b20      	ldr	r3, [pc, #128]	; (8000638 <process_programming_state+0xf4>)
 80005b6:	2204      	movs	r2, #4
 80005b8:	701a      	strb	r2, [r3, #0]
			state = STATE_PROGRAMMING;
 80005ba:	4b21      	ldr	r3, [pc, #132]	; (8000640 <process_programming_state+0xfc>)
 80005bc:	2209      	movs	r2, #9
 80005be:	701a      	strb	r2, [r3, #0]
			led_on();
 80005c0:	f7ff fec6 	bl	8000350 <led_on>
			blink(2);
 80005c4:	2002      	movs	r0, #2
 80005c6:	f7ff fee6 	bl	8000396 <blink>
		}
		else {
			programming_state = PASSCODE_NONE;
		}
		break;
 80005ca:	e031      	b.n	8000630 <process_programming_state+0xec>
			programming_state = PASSCODE_NONE;
 80005cc:	4b1a      	ldr	r3, [pc, #104]	; (8000638 <process_programming_state+0xf4>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	701a      	strb	r2, [r3, #0]
		break;
 80005d2:	e02d      	b.n	8000630 <process_programming_state+0xec>
	case PROGRAMMING:
		if (note == ram_config.note) {
 80005d4:	1dfb      	adds	r3, r7, #7
 80005d6:	781a      	ldrb	r2, [r3, #0]
 80005d8:	4b1a      	ldr	r3, [pc, #104]	; (8000644 <process_programming_state+0x100>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	429a      	cmp	r2, r3
 80005de:	d103      	bne.n	80005e8 <process_programming_state+0xa4>
			programming_state = RECORD_SCRATCH;
 80005e0:	4b15      	ldr	r3, [pc, #84]	; (8000638 <process_programming_state+0xf4>)
 80005e2:	2205      	movs	r2, #5
 80005e4:	701a      	strb	r2, [r3, #0]
		}
		else {
			programming_state = PASSCODE_NONE;
			led_off();
		}
		break;
 80005e6:	e023      	b.n	8000630 <process_programming_state+0xec>
			programming_state = PASSCODE_NONE;
 80005e8:	4b13      	ldr	r3, [pc, #76]	; (8000638 <process_programming_state+0xf4>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	701a      	strb	r2, [r3, #0]
			led_off();
 80005ee:	f7ff febb 	bl	8000368 <led_off>
		break;
 80005f2:	e01d      	b.n	8000630 <process_programming_state+0xec>
	case RECORD_SCRATCH:
		if (note == PROGRAMMING_MODE_SAVE_LEFT_POS) {
 80005f4:	1dfb      	adds	r3, r7, #7
 80005f6:	781b      	ldrb	r3, [r3, #0]
 80005f8:	2b19      	cmp	r3, #25
 80005fa:	d104      	bne.n	8000606 <process_programming_state+0xc2>
			ram_config.strummed_off_position = record_scratch_pulse;
 80005fc:	4b12      	ldr	r3, [pc, #72]	; (8000648 <process_programming_state+0x104>)
 80005fe:	681a      	ldr	r2, [r3, #0]
 8000600:	4b10      	ldr	r3, [pc, #64]	; (8000644 <process_programming_state+0x100>)
 8000602:	609a      	str	r2, [r3, #8]
			Write_Flash();
		}
		else {
			programming_state = PASSCODE_NONE;
		}
		break;
 8000604:	e014      	b.n	8000630 <process_programming_state+0xec>
		else if (note == PROGRAMMING_MODE_SAVE_RIGHT_POS) {
 8000606:	1dfb      	adds	r3, r7, #7
 8000608:	781b      	ldrb	r3, [r3, #0]
 800060a:	2b1b      	cmp	r3, #27
 800060c:	d104      	bne.n	8000618 <process_programming_state+0xd4>
			ram_config.strummed_on_position = record_scratch_pulse;
 800060e:	4b0e      	ldr	r3, [pc, #56]	; (8000648 <process_programming_state+0x104>)
 8000610:	681a      	ldr	r2, [r3, #0]
 8000612:	4b0c      	ldr	r3, [pc, #48]	; (8000644 <process_programming_state+0x100>)
 8000614:	605a      	str	r2, [r3, #4]
		break;
 8000616:	e00b      	b.n	8000630 <process_programming_state+0xec>
		else if (note == PROGRAMMING_MODE_SAVE_CHANGES) {
 8000618:	1dfb      	adds	r3, r7, #7
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	2b1a      	cmp	r3, #26
 800061e:	d102      	bne.n	8000626 <process_programming_state+0xe2>
			Write_Flash();
 8000620:	f7ff fe36 	bl	8000290 <Write_Flash>
		break;
 8000624:	e004      	b.n	8000630 <process_programming_state+0xec>
			programming_state = PASSCODE_NONE;
 8000626:	4b04      	ldr	r3, [pc, #16]	; (8000638 <process_programming_state+0xf4>)
 8000628:	2200      	movs	r2, #0
 800062a:	701a      	strb	r2, [r3, #0]
		break;
 800062c:	e000      	b.n	8000630 <process_programming_state+0xec>

    default:
    	break;
 800062e:	46c0      	nop			; (mov r8, r8)
	}
}
 8000630:	46c0      	nop			; (mov r8, r8)
 8000632:	46bd      	mov	sp, r7
 8000634:	b002      	add	sp, #8
 8000636:	bd80      	pop	{r7, pc}
 8000638:	2000004d 	.word	0x2000004d
 800063c:	0800322c 	.word	0x0800322c
 8000640:	2000004c 	.word	0x2000004c
 8000644:	20000038 	.word	0x20000038
 8000648:	20000044 	.word	0x20000044

0800064c <set_pulse>:
#include "./main.h"

bool is_flipped = false;

// Sets servo PWM pulse
void set_pulse(uint32_t p) {
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
	TIM1->CCR2 = p;
 8000654:	4b03      	ldr	r3, [pc, #12]	; (8000664 <set_pulse+0x18>)
 8000656:	687a      	ldr	r2, [r7, #4]
 8000658:	639a      	str	r2, [r3, #56]	; 0x38
}
 800065a:	46c0      	nop			; (mov r8, r8)
 800065c:	46bd      	mov	sp, r7
 800065e:	b002      	add	sp, #8
 8000660:	bd80      	pop	{r7, pc}
 8000662:	46c0      	nop			; (mov r8, r8)
 8000664:	40012c00 	.word	0x40012c00

08000668 <strum>:

// Moves the servo across the guitar strings once
void strum() {
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
    if(is_flipped == false) {
 800066c:	4b0d      	ldr	r3, [pc, #52]	; (80006a4 <strum+0x3c>)
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	2201      	movs	r2, #1
 8000672:	4053      	eors	r3, r2
 8000674:	b2db      	uxtb	r3, r3
 8000676:	2b00      	cmp	r3, #0
 8000678:	d008      	beq.n	800068c <strum+0x24>
        set_pulse(ram_config.strummed_on_position);
 800067a:	4b0b      	ldr	r3, [pc, #44]	; (80006a8 <strum+0x40>)
 800067c:	685b      	ldr	r3, [r3, #4]
 800067e:	0018      	movs	r0, r3
 8000680:	f7ff ffe4 	bl	800064c <set_pulse>
        is_flipped = true;
 8000684:	4b07      	ldr	r3, [pc, #28]	; (80006a4 <strum+0x3c>)
 8000686:	2201      	movs	r2, #1
 8000688:	701a      	strb	r2, [r3, #0]
    }
    else {
        set_pulse(ram_config.strummed_off_position);
        is_flipped = false;
    }
}
 800068a:	e007      	b.n	800069c <strum+0x34>
        set_pulse(ram_config.strummed_off_position);
 800068c:	4b06      	ldr	r3, [pc, #24]	; (80006a8 <strum+0x40>)
 800068e:	689b      	ldr	r3, [r3, #8]
 8000690:	0018      	movs	r0, r3
 8000692:	f7ff ffdb 	bl	800064c <set_pulse>
        is_flipped = false;
 8000696:	4b03      	ldr	r3, [pc, #12]	; (80006a4 <strum+0x3c>)
 8000698:	2200      	movs	r2, #0
 800069a:	701a      	strb	r2, [r3, #0]
}
 800069c:	46c0      	nop			; (mov r8, r8)
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	46c0      	nop			; (mov r8, r8)
 80006a4:	20000034 	.word	0x20000034
 80006a8:	20000038 	.word	0x20000038

080006ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006b0:	f000 fabc 	bl	8000c2c <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006b4:	f000 f836 	bl	8000724 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006b8:	f000 f962 	bl	8000980 <MX_GPIO_Init>
  MX_TIM1_Init();
 80006bc:	f000 f894 	bl	80007e8 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80006c0:	f000 f928 	bl	8000914 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80006c4:	4b13      	ldr	r3, [pc, #76]	; (8000714 <main+0x68>)
 80006c6:	2104      	movs	r1, #4
 80006c8:	0018      	movs	r0, r3
 80006ca:	f001 fd1f 	bl	800210c <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  init_config();
 80006ce:	f7ff fda7 	bl	8000220 <init_config>
  blink(3);
 80006d2:	2003      	movs	r0, #3
 80006d4:	f7ff fe5f 	bl	8000396 <blink>
  toggle_led();
 80006d8:	f7ff fe52 	bl	8000380 <toggle_led>
  strum();
 80006dc:	f7ff ffc4 	bl	8000668 <strum>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	if(HAL_UART_Receive(&huart1, &message, 1, HAL_MAX_DELAY) == HAL_OK) {
 80006e0:	2301      	movs	r3, #1
 80006e2:	425b      	negs	r3, r3
 80006e4:	490c      	ldr	r1, [pc, #48]	; (8000718 <main+0x6c>)
 80006e6:	480d      	ldr	r0, [pc, #52]	; (800071c <main+0x70>)
 80006e8:	2201      	movs	r2, #1
 80006ea:	f002 f9d9 	bl	8002aa0 <HAL_UART_Receive>
 80006ee:	1e03      	subs	r3, r0, #0
 80006f0:	d104      	bne.n	80006fc <main+0x50>
		process_midi_message(message);
 80006f2:	4b09      	ldr	r3, [pc, #36]	; (8000718 <main+0x6c>)
 80006f4:	781b      	ldrb	r3, [r3, #0]
 80006f6:	0018      	movs	r0, r3
 80006f8:	f7ff fe66 	bl	80003c8 <process_midi_message>
	}

	if (state == STATE_PLAY_NOTE) {
 80006fc:	4b08      	ldr	r3, [pc, #32]	; (8000720 <main+0x74>)
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	2b05      	cmp	r3, #5
 8000702:	d1ed      	bne.n	80006e0 <main+0x34>
		toggle_led();
 8000704:	f7ff fe3c 	bl	8000380 <toggle_led>
		strum();
 8000708:	f7ff ffae 	bl	8000668 <strum>
		state = STATE_READ_KEY;
 800070c:	4b04      	ldr	r3, [pc, #16]	; (8000720 <main+0x74>)
 800070e:	2201      	movs	r2, #1
 8000710:	701a      	strb	r2, [r3, #0]
	if(HAL_UART_Receive(&huart1, &message, 1, HAL_MAX_DELAY) == HAL_OK) {
 8000712:	e7e5      	b.n	80006e0 <main+0x34>
 8000714:	200000e0 	.word	0x200000e0
 8000718:	20000000 	.word	0x20000000
 800071c:	2000005c 	.word	0x2000005c
 8000720:	2000004c 	.word	0x2000004c

08000724 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000724:	b590      	push	{r4, r7, lr}
 8000726:	b095      	sub	sp, #84	; 0x54
 8000728:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800072a:	2420      	movs	r4, #32
 800072c:	193b      	adds	r3, r7, r4
 800072e:	0018      	movs	r0, r3
 8000730:	2330      	movs	r3, #48	; 0x30
 8000732:	001a      	movs	r2, r3
 8000734:	2100      	movs	r1, #0
 8000736:	f002 fd55 	bl	80031e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800073a:	2310      	movs	r3, #16
 800073c:	18fb      	adds	r3, r7, r3
 800073e:	0018      	movs	r0, r3
 8000740:	2310      	movs	r3, #16
 8000742:	001a      	movs	r2, r3
 8000744:	2100      	movs	r1, #0
 8000746:	f002 fd4d 	bl	80031e4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800074a:	003b      	movs	r3, r7
 800074c:	0018      	movs	r0, r3
 800074e:	2310      	movs	r3, #16
 8000750:	001a      	movs	r2, r3
 8000752:	2100      	movs	r1, #0
 8000754:	f002 fd46 	bl	80031e4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000758:	0021      	movs	r1, r4
 800075a:	187b      	adds	r3, r7, r1
 800075c:	2202      	movs	r2, #2
 800075e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000760:	187b      	adds	r3, r7, r1
 8000762:	2201      	movs	r2, #1
 8000764:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000766:	187b      	adds	r3, r7, r1
 8000768:	2210      	movs	r2, #16
 800076a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800076c:	187b      	adds	r3, r7, r1
 800076e:	2202      	movs	r2, #2
 8000770:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000772:	187b      	adds	r3, r7, r1
 8000774:	2200      	movs	r2, #0
 8000776:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000778:	187b      	adds	r3, r7, r1
 800077a:	22a0      	movs	r2, #160	; 0xa0
 800077c:	0392      	lsls	r2, r2, #14
 800077e:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000780:	187b      	adds	r3, r7, r1
 8000782:	2200      	movs	r2, #0
 8000784:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000786:	187b      	adds	r3, r7, r1
 8000788:	0018      	movs	r0, r3
 800078a:	f000 ff33 	bl	80015f4 <HAL_RCC_OscConfig>
 800078e:	1e03      	subs	r3, r0, #0
 8000790:	d001      	beq.n	8000796 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000792:	f000 f92d 	bl	80009f0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000796:	2110      	movs	r1, #16
 8000798:	187b      	adds	r3, r7, r1
 800079a:	2207      	movs	r2, #7
 800079c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800079e:	187b      	adds	r3, r7, r1
 80007a0:	2202      	movs	r2, #2
 80007a2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007a4:	187b      	adds	r3, r7, r1
 80007a6:	2200      	movs	r2, #0
 80007a8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007aa:	187b      	adds	r3, r7, r1
 80007ac:	2200      	movs	r2, #0
 80007ae:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80007b0:	187b      	adds	r3, r7, r1
 80007b2:	2101      	movs	r1, #1
 80007b4:	0018      	movs	r0, r3
 80007b6:	f001 fa39 	bl	8001c2c <HAL_RCC_ClockConfig>
 80007ba:	1e03      	subs	r3, r0, #0
 80007bc:	d001      	beq.n	80007c2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80007be:	f000 f917 	bl	80009f0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80007c2:	003b      	movs	r3, r7
 80007c4:	2201      	movs	r2, #1
 80007c6:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80007c8:	003b      	movs	r3, r7
 80007ca:	2200      	movs	r2, #0
 80007cc:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007ce:	003b      	movs	r3, r7
 80007d0:	0018      	movs	r0, r3
 80007d2:	f001 fb7d 	bl	8001ed0 <HAL_RCCEx_PeriphCLKConfig>
 80007d6:	1e03      	subs	r3, r0, #0
 80007d8:	d001      	beq.n	80007de <SystemClock_Config+0xba>
  {
    Error_Handler();
 80007da:	f000 f909 	bl	80009f0 <Error_Handler>
  }
}
 80007de:	46c0      	nop			; (mov r8, r8)
 80007e0:	46bd      	mov	sp, r7
 80007e2:	b015      	add	sp, #84	; 0x54
 80007e4:	bd90      	pop	{r4, r7, pc}
	...

080007e8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b092      	sub	sp, #72	; 0x48
 80007ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007ee:	2340      	movs	r3, #64	; 0x40
 80007f0:	18fb      	adds	r3, r7, r3
 80007f2:	0018      	movs	r0, r3
 80007f4:	2308      	movs	r3, #8
 80007f6:	001a      	movs	r2, r3
 80007f8:	2100      	movs	r1, #0
 80007fa:	f002 fcf3 	bl	80031e4 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007fe:	2324      	movs	r3, #36	; 0x24
 8000800:	18fb      	adds	r3, r7, r3
 8000802:	0018      	movs	r0, r3
 8000804:	231c      	movs	r3, #28
 8000806:	001a      	movs	r2, r3
 8000808:	2100      	movs	r1, #0
 800080a:	f002 fceb 	bl	80031e4 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800080e:	1d3b      	adds	r3, r7, #4
 8000810:	0018      	movs	r0, r3
 8000812:	2320      	movs	r3, #32
 8000814:	001a      	movs	r2, r3
 8000816:	2100      	movs	r1, #0
 8000818:	f002 fce4 	bl	80031e4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800081c:	4b3a      	ldr	r3, [pc, #232]	; (8000908 <MX_TIM1_Init+0x120>)
 800081e:	4a3b      	ldr	r2, [pc, #236]	; (800090c <MX_TIM1_Init+0x124>)
 8000820:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1;
 8000822:	4b39      	ldr	r3, [pc, #228]	; (8000908 <MX_TIM1_Init+0x120>)
 8000824:	2201      	movs	r2, #1
 8000826:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000828:	4b37      	ldr	r3, [pc, #220]	; (8000908 <MX_TIM1_Init+0x120>)
 800082a:	2200      	movs	r2, #0
 800082c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800082e:	4b36      	ldr	r3, [pc, #216]	; (8000908 <MX_TIM1_Init+0x120>)
 8000830:	4a37      	ldr	r2, [pc, #220]	; (8000910 <MX_TIM1_Init+0x128>)
 8000832:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000834:	4b34      	ldr	r3, [pc, #208]	; (8000908 <MX_TIM1_Init+0x120>)
 8000836:	2200      	movs	r2, #0
 8000838:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800083a:	4b33      	ldr	r3, [pc, #204]	; (8000908 <MX_TIM1_Init+0x120>)
 800083c:	2200      	movs	r2, #0
 800083e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000840:	4b31      	ldr	r3, [pc, #196]	; (8000908 <MX_TIM1_Init+0x120>)
 8000842:	2200      	movs	r2, #0
 8000844:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000846:	4b30      	ldr	r3, [pc, #192]	; (8000908 <MX_TIM1_Init+0x120>)
 8000848:	0018      	movs	r0, r3
 800084a:	f001 fc0f 	bl	800206c <HAL_TIM_PWM_Init>
 800084e:	1e03      	subs	r3, r0, #0
 8000850:	d001      	beq.n	8000856 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000852:	f000 f8cd 	bl	80009f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000856:	2140      	movs	r1, #64	; 0x40
 8000858:	187b      	adds	r3, r7, r1
 800085a:	2200      	movs	r2, #0
 800085c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800085e:	187b      	adds	r3, r7, r1
 8000860:	2200      	movs	r2, #0
 8000862:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000864:	187a      	adds	r2, r7, r1
 8000866:	4b28      	ldr	r3, [pc, #160]	; (8000908 <MX_TIM1_Init+0x120>)
 8000868:	0011      	movs	r1, r2
 800086a:	0018      	movs	r0, r3
 800086c:	f002 f814 	bl	8002898 <HAL_TIMEx_MasterConfigSynchronization>
 8000870:	1e03      	subs	r3, r0, #0
 8000872:	d001      	beq.n	8000878 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000874:	f000 f8bc 	bl	80009f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000878:	2124      	movs	r1, #36	; 0x24
 800087a:	187b      	adds	r3, r7, r1
 800087c:	2260      	movs	r2, #96	; 0x60
 800087e:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000880:	187b      	adds	r3, r7, r1
 8000882:	2200      	movs	r2, #0
 8000884:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000886:	187b      	adds	r3, r7, r1
 8000888:	2200      	movs	r2, #0
 800088a:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800088c:	187b      	adds	r3, r7, r1
 800088e:	2200      	movs	r2, #0
 8000890:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000892:	187b      	adds	r3, r7, r1
 8000894:	2200      	movs	r2, #0
 8000896:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000898:	187b      	adds	r3, r7, r1
 800089a:	2200      	movs	r2, #0
 800089c:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800089e:	187b      	adds	r3, r7, r1
 80008a0:	2200      	movs	r2, #0
 80008a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80008a4:	1879      	adds	r1, r7, r1
 80008a6:	4b18      	ldr	r3, [pc, #96]	; (8000908 <MX_TIM1_Init+0x120>)
 80008a8:	2204      	movs	r2, #4
 80008aa:	0018      	movs	r0, r3
 80008ac:	f001 fcd4 	bl	8002258 <HAL_TIM_PWM_ConfigChannel>
 80008b0:	1e03      	subs	r3, r0, #0
 80008b2:	d001      	beq.n	80008b8 <MX_TIM1_Init+0xd0>
  {
    Error_Handler();
 80008b4:	f000 f89c 	bl	80009f0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80008b8:	1d3b      	adds	r3, r7, #4
 80008ba:	2200      	movs	r2, #0
 80008bc:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80008be:	1d3b      	adds	r3, r7, #4
 80008c0:	2200      	movs	r2, #0
 80008c2:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80008c4:	1d3b      	adds	r3, r7, #4
 80008c6:	2200      	movs	r2, #0
 80008c8:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80008ca:	1d3b      	adds	r3, r7, #4
 80008cc:	2200      	movs	r2, #0
 80008ce:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80008d0:	1d3b      	adds	r3, r7, #4
 80008d2:	2200      	movs	r2, #0
 80008d4:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80008d6:	1d3b      	adds	r3, r7, #4
 80008d8:	2280      	movs	r2, #128	; 0x80
 80008da:	0192      	lsls	r2, r2, #6
 80008dc:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80008de:	1d3b      	adds	r3, r7, #4
 80008e0:	2200      	movs	r2, #0
 80008e2:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80008e4:	1d3a      	adds	r2, r7, #4
 80008e6:	4b08      	ldr	r3, [pc, #32]	; (8000908 <MX_TIM1_Init+0x120>)
 80008e8:	0011      	movs	r1, r2
 80008ea:	0018      	movs	r0, r3
 80008ec:	f002 f826 	bl	800293c <HAL_TIMEx_ConfigBreakDeadTime>
 80008f0:	1e03      	subs	r3, r0, #0
 80008f2:	d001      	beq.n	80008f8 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 80008f4:	f000 f87c 	bl	80009f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80008f8:	4b03      	ldr	r3, [pc, #12]	; (8000908 <MX_TIM1_Init+0x120>)
 80008fa:	0018      	movs	r0, r3
 80008fc:	f000 f8c2 	bl	8000a84 <HAL_TIM_MspPostInit>

}
 8000900:	46c0      	nop			; (mov r8, r8)
 8000902:	46bd      	mov	sp, r7
 8000904:	b012      	add	sp, #72	; 0x48
 8000906:	bd80      	pop	{r7, pc}
 8000908:	200000e0 	.word	0x200000e0
 800090c:	40012c00 	.word	0x40012c00
 8000910:	0000ffff 	.word	0x0000ffff

08000914 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000918:	4b16      	ldr	r3, [pc, #88]	; (8000974 <MX_USART1_UART_Init+0x60>)
 800091a:	4a17      	ldr	r2, [pc, #92]	; (8000978 <MX_USART1_UART_Init+0x64>)
 800091c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 31250;
 800091e:	4b15      	ldr	r3, [pc, #84]	; (8000974 <MX_USART1_UART_Init+0x60>)
 8000920:	4a16      	ldr	r2, [pc, #88]	; (800097c <MX_USART1_UART_Init+0x68>)
 8000922:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000924:	4b13      	ldr	r3, [pc, #76]	; (8000974 <MX_USART1_UART_Init+0x60>)
 8000926:	2200      	movs	r2, #0
 8000928:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800092a:	4b12      	ldr	r3, [pc, #72]	; (8000974 <MX_USART1_UART_Init+0x60>)
 800092c:	2200      	movs	r2, #0
 800092e:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000930:	4b10      	ldr	r3, [pc, #64]	; (8000974 <MX_USART1_UART_Init+0x60>)
 8000932:	2200      	movs	r2, #0
 8000934:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000936:	4b0f      	ldr	r3, [pc, #60]	; (8000974 <MX_USART1_UART_Init+0x60>)
 8000938:	220c      	movs	r2, #12
 800093a:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800093c:	4b0d      	ldr	r3, [pc, #52]	; (8000974 <MX_USART1_UART_Init+0x60>)
 800093e:	2200      	movs	r2, #0
 8000940:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000942:	4b0c      	ldr	r3, [pc, #48]	; (8000974 <MX_USART1_UART_Init+0x60>)
 8000944:	2200      	movs	r2, #0
 8000946:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000948:	4b0a      	ldr	r3, [pc, #40]	; (8000974 <MX_USART1_UART_Init+0x60>)
 800094a:	2200      	movs	r2, #0
 800094c:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 800094e:	4b09      	ldr	r3, [pc, #36]	; (8000974 <MX_USART1_UART_Init+0x60>)
 8000950:	2210      	movs	r2, #16
 8000952:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8000954:	4b07      	ldr	r3, [pc, #28]	; (8000974 <MX_USART1_UART_Init+0x60>)
 8000956:	2280      	movs	r2, #128	; 0x80
 8000958:	0152      	lsls	r2, r2, #5
 800095a:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800095c:	4b05      	ldr	r3, [pc, #20]	; (8000974 <MX_USART1_UART_Init+0x60>)
 800095e:	0018      	movs	r0, r3
 8000960:	f002 f84a 	bl	80029f8 <HAL_UART_Init>
 8000964:	1e03      	subs	r3, r0, #0
 8000966:	d001      	beq.n	800096c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000968:	f000 f842 	bl	80009f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800096c:	46c0      	nop			; (mov r8, r8)
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	46c0      	nop			; (mov r8, r8)
 8000974:	2000005c 	.word	0x2000005c
 8000978:	40013800 	.word	0x40013800
 800097c:	00007a12 	.word	0x00007a12

08000980 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b086      	sub	sp, #24
 8000984:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000986:	1d3b      	adds	r3, r7, #4
 8000988:	0018      	movs	r0, r3
 800098a:	2314      	movs	r3, #20
 800098c:	001a      	movs	r2, r3
 800098e:	2100      	movs	r1, #0
 8000990:	f002 fc28 	bl	80031e4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000994:	4b15      	ldr	r3, [pc, #84]	; (80009ec <MX_GPIO_Init+0x6c>)
 8000996:	695a      	ldr	r2, [r3, #20]
 8000998:	4b14      	ldr	r3, [pc, #80]	; (80009ec <MX_GPIO_Init+0x6c>)
 800099a:	2180      	movs	r1, #128	; 0x80
 800099c:	0289      	lsls	r1, r1, #10
 800099e:	430a      	orrs	r2, r1
 80009a0:	615a      	str	r2, [r3, #20]
 80009a2:	4b12      	ldr	r3, [pc, #72]	; (80009ec <MX_GPIO_Init+0x6c>)
 80009a4:	695a      	ldr	r2, [r3, #20]
 80009a6:	2380      	movs	r3, #128	; 0x80
 80009a8:	029b      	lsls	r3, r3, #10
 80009aa:	4013      	ands	r3, r2
 80009ac:	603b      	str	r3, [r7, #0]
 80009ae:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, GPIO_PIN_RESET);
 80009b0:	2390      	movs	r3, #144	; 0x90
 80009b2:	05db      	lsls	r3, r3, #23
 80009b4:	2200      	movs	r2, #0
 80009b6:	2110      	movs	r1, #16
 80009b8:	0018      	movs	r0, r3
 80009ba:	f000 fde3 	bl	8001584 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : led_Pin */
  GPIO_InitStruct.Pin = led_Pin;
 80009be:	1d3b      	adds	r3, r7, #4
 80009c0:	2210      	movs	r2, #16
 80009c2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009c4:	1d3b      	adds	r3, r7, #4
 80009c6:	2201      	movs	r2, #1
 80009c8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ca:	1d3b      	adds	r3, r7, #4
 80009cc:	2200      	movs	r2, #0
 80009ce:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d0:	1d3b      	adds	r3, r7, #4
 80009d2:	2200      	movs	r2, #0
 80009d4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(led_GPIO_Port, &GPIO_InitStruct);
 80009d6:	1d3a      	adds	r2, r7, #4
 80009d8:	2390      	movs	r3, #144	; 0x90
 80009da:	05db      	lsls	r3, r3, #23
 80009dc:	0011      	movs	r1, r2
 80009de:	0018      	movs	r0, r3
 80009e0:	f000 fc60 	bl	80012a4 <HAL_GPIO_Init>

}
 80009e4:	46c0      	nop			; (mov r8, r8)
 80009e6:	46bd      	mov	sp, r7
 80009e8:	b006      	add	sp, #24
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	40021000 	.word	0x40021000

080009f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80009f4:	46c0      	nop			; (mov r8, r8)
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
	...

080009fc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a02:	4b0f      	ldr	r3, [pc, #60]	; (8000a40 <HAL_MspInit+0x44>)
 8000a04:	699a      	ldr	r2, [r3, #24]
 8000a06:	4b0e      	ldr	r3, [pc, #56]	; (8000a40 <HAL_MspInit+0x44>)
 8000a08:	2101      	movs	r1, #1
 8000a0a:	430a      	orrs	r2, r1
 8000a0c:	619a      	str	r2, [r3, #24]
 8000a0e:	4b0c      	ldr	r3, [pc, #48]	; (8000a40 <HAL_MspInit+0x44>)
 8000a10:	699b      	ldr	r3, [r3, #24]
 8000a12:	2201      	movs	r2, #1
 8000a14:	4013      	ands	r3, r2
 8000a16:	607b      	str	r3, [r7, #4]
 8000a18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a1a:	4b09      	ldr	r3, [pc, #36]	; (8000a40 <HAL_MspInit+0x44>)
 8000a1c:	69da      	ldr	r2, [r3, #28]
 8000a1e:	4b08      	ldr	r3, [pc, #32]	; (8000a40 <HAL_MspInit+0x44>)
 8000a20:	2180      	movs	r1, #128	; 0x80
 8000a22:	0549      	lsls	r1, r1, #21
 8000a24:	430a      	orrs	r2, r1
 8000a26:	61da      	str	r2, [r3, #28]
 8000a28:	4b05      	ldr	r3, [pc, #20]	; (8000a40 <HAL_MspInit+0x44>)
 8000a2a:	69da      	ldr	r2, [r3, #28]
 8000a2c:	2380      	movs	r3, #128	; 0x80
 8000a2e:	055b      	lsls	r3, r3, #21
 8000a30:	4013      	ands	r3, r2
 8000a32:	603b      	str	r3, [r7, #0]
 8000a34:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a36:	46c0      	nop			; (mov r8, r8)
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	b002      	add	sp, #8
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	46c0      	nop			; (mov r8, r8)
 8000a40:	40021000 	.word	0x40021000

08000a44 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b084      	sub	sp, #16
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4a0a      	ldr	r2, [pc, #40]	; (8000a7c <HAL_TIM_PWM_MspInit+0x38>)
 8000a52:	4293      	cmp	r3, r2
 8000a54:	d10d      	bne.n	8000a72 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000a56:	4b0a      	ldr	r3, [pc, #40]	; (8000a80 <HAL_TIM_PWM_MspInit+0x3c>)
 8000a58:	699a      	ldr	r2, [r3, #24]
 8000a5a:	4b09      	ldr	r3, [pc, #36]	; (8000a80 <HAL_TIM_PWM_MspInit+0x3c>)
 8000a5c:	2180      	movs	r1, #128	; 0x80
 8000a5e:	0109      	lsls	r1, r1, #4
 8000a60:	430a      	orrs	r2, r1
 8000a62:	619a      	str	r2, [r3, #24]
 8000a64:	4b06      	ldr	r3, [pc, #24]	; (8000a80 <HAL_TIM_PWM_MspInit+0x3c>)
 8000a66:	699a      	ldr	r2, [r3, #24]
 8000a68:	2380      	movs	r3, #128	; 0x80
 8000a6a:	011b      	lsls	r3, r3, #4
 8000a6c:	4013      	ands	r3, r2
 8000a6e:	60fb      	str	r3, [r7, #12]
 8000a70:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000a72:	46c0      	nop			; (mov r8, r8)
 8000a74:	46bd      	mov	sp, r7
 8000a76:	b004      	add	sp, #16
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	46c0      	nop			; (mov r8, r8)
 8000a7c:	40012c00 	.word	0x40012c00
 8000a80:	40021000 	.word	0x40021000

08000a84 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b088      	sub	sp, #32
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a8c:	230c      	movs	r3, #12
 8000a8e:	18fb      	adds	r3, r7, r3
 8000a90:	0018      	movs	r0, r3
 8000a92:	2314      	movs	r3, #20
 8000a94:	001a      	movs	r2, r3
 8000a96:	2100      	movs	r1, #0
 8000a98:	f002 fba4 	bl	80031e4 <memset>
  if(htim->Instance==TIM1)
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	4a16      	ldr	r2, [pc, #88]	; (8000afc <HAL_TIM_MspPostInit+0x78>)
 8000aa2:	4293      	cmp	r3, r2
 8000aa4:	d125      	bne.n	8000af2 <HAL_TIM_MspPostInit+0x6e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa6:	4b16      	ldr	r3, [pc, #88]	; (8000b00 <HAL_TIM_MspPostInit+0x7c>)
 8000aa8:	695a      	ldr	r2, [r3, #20]
 8000aaa:	4b15      	ldr	r3, [pc, #84]	; (8000b00 <HAL_TIM_MspPostInit+0x7c>)
 8000aac:	2180      	movs	r1, #128	; 0x80
 8000aae:	0289      	lsls	r1, r1, #10
 8000ab0:	430a      	orrs	r2, r1
 8000ab2:	615a      	str	r2, [r3, #20]
 8000ab4:	4b12      	ldr	r3, [pc, #72]	; (8000b00 <HAL_TIM_MspPostInit+0x7c>)
 8000ab6:	695a      	ldr	r2, [r3, #20]
 8000ab8:	2380      	movs	r3, #128	; 0x80
 8000aba:	029b      	lsls	r3, r3, #10
 8000abc:	4013      	ands	r3, r2
 8000abe:	60bb      	str	r3, [r7, #8]
 8000ac0:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000ac2:	210c      	movs	r1, #12
 8000ac4:	187b      	adds	r3, r7, r1
 8000ac6:	2280      	movs	r2, #128	; 0x80
 8000ac8:	0092      	lsls	r2, r2, #2
 8000aca:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000acc:	187b      	adds	r3, r7, r1
 8000ace:	2202      	movs	r2, #2
 8000ad0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad2:	187b      	adds	r3, r7, r1
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad8:	187b      	adds	r3, r7, r1
 8000ada:	2200      	movs	r2, #0
 8000adc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000ade:	187b      	adds	r3, r7, r1
 8000ae0:	2202      	movs	r2, #2
 8000ae2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ae4:	187a      	adds	r2, r7, r1
 8000ae6:	2390      	movs	r3, #144	; 0x90
 8000ae8:	05db      	lsls	r3, r3, #23
 8000aea:	0011      	movs	r1, r2
 8000aec:	0018      	movs	r0, r3
 8000aee:	f000 fbd9 	bl	80012a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000af2:	46c0      	nop			; (mov r8, r8)
 8000af4:	46bd      	mov	sp, r7
 8000af6:	b008      	add	sp, #32
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	46c0      	nop			; (mov r8, r8)
 8000afc:	40012c00 	.word	0x40012c00
 8000b00:	40021000 	.word	0x40021000

08000b04 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b08a      	sub	sp, #40	; 0x28
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b0c:	2314      	movs	r3, #20
 8000b0e:	18fb      	adds	r3, r7, r3
 8000b10:	0018      	movs	r0, r3
 8000b12:	2314      	movs	r3, #20
 8000b14:	001a      	movs	r2, r3
 8000b16:	2100      	movs	r1, #0
 8000b18:	f002 fb64 	bl	80031e4 <memset>
  if(huart->Instance==USART1)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4a1c      	ldr	r2, [pc, #112]	; (8000b94 <HAL_UART_MspInit+0x90>)
 8000b22:	4293      	cmp	r3, r2
 8000b24:	d132      	bne.n	8000b8c <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b26:	4b1c      	ldr	r3, [pc, #112]	; (8000b98 <HAL_UART_MspInit+0x94>)
 8000b28:	699a      	ldr	r2, [r3, #24]
 8000b2a:	4b1b      	ldr	r3, [pc, #108]	; (8000b98 <HAL_UART_MspInit+0x94>)
 8000b2c:	2180      	movs	r1, #128	; 0x80
 8000b2e:	01c9      	lsls	r1, r1, #7
 8000b30:	430a      	orrs	r2, r1
 8000b32:	619a      	str	r2, [r3, #24]
 8000b34:	4b18      	ldr	r3, [pc, #96]	; (8000b98 <HAL_UART_MspInit+0x94>)
 8000b36:	699a      	ldr	r2, [r3, #24]
 8000b38:	2380      	movs	r3, #128	; 0x80
 8000b3a:	01db      	lsls	r3, r3, #7
 8000b3c:	4013      	ands	r3, r2
 8000b3e:	613b      	str	r3, [r7, #16]
 8000b40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b42:	4b15      	ldr	r3, [pc, #84]	; (8000b98 <HAL_UART_MspInit+0x94>)
 8000b44:	695a      	ldr	r2, [r3, #20]
 8000b46:	4b14      	ldr	r3, [pc, #80]	; (8000b98 <HAL_UART_MspInit+0x94>)
 8000b48:	2180      	movs	r1, #128	; 0x80
 8000b4a:	0289      	lsls	r1, r1, #10
 8000b4c:	430a      	orrs	r2, r1
 8000b4e:	615a      	str	r2, [r3, #20]
 8000b50:	4b11      	ldr	r3, [pc, #68]	; (8000b98 <HAL_UART_MspInit+0x94>)
 8000b52:	695a      	ldr	r2, [r3, #20]
 8000b54:	2380      	movs	r3, #128	; 0x80
 8000b56:	029b      	lsls	r3, r3, #10
 8000b58:	4013      	ands	r3, r2
 8000b5a:	60fb      	str	r3, [r7, #12]
 8000b5c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA2     ------> USART1_TX
    PA3     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b5e:	2114      	movs	r1, #20
 8000b60:	187b      	adds	r3, r7, r1
 8000b62:	220c      	movs	r2, #12
 8000b64:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b66:	187b      	adds	r3, r7, r1
 8000b68:	2202      	movs	r2, #2
 8000b6a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6c:	187b      	adds	r3, r7, r1
 8000b6e:	2200      	movs	r2, #0
 8000b70:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b72:	187b      	adds	r3, r7, r1
 8000b74:	2203      	movs	r2, #3
 8000b76:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000b78:	187b      	adds	r3, r7, r1
 8000b7a:	2201      	movs	r2, #1
 8000b7c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b7e:	187a      	adds	r2, r7, r1
 8000b80:	2390      	movs	r3, #144	; 0x90
 8000b82:	05db      	lsls	r3, r3, #23
 8000b84:	0011      	movs	r1, r2
 8000b86:	0018      	movs	r0, r3
 8000b88:	f000 fb8c 	bl	80012a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000b8c:	46c0      	nop			; (mov r8, r8)
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	b00a      	add	sp, #40	; 0x28
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	40013800 	.word	0x40013800
 8000b98:	40021000 	.word	0x40021000

08000b9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000ba0:	46c0      	nop			; (mov r8, r8)
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}

08000ba6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ba6:	b580      	push	{r7, lr}
 8000ba8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000baa:	e7fe      	b.n	8000baa <HardFault_Handler+0x4>

08000bac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000bb0:	46c0      	nop			; (mov r8, r8)
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}

08000bb6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bb6:	b580      	push	{r7, lr}
 8000bb8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bba:	46c0      	nop			; (mov r8, r8)
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}

08000bc0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bc4:	f000 f87a 	bl	8000cbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bc8:	46c0      	nop			; (mov r8, r8)
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}

08000bce <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bce:	b580      	push	{r7, lr}
 8000bd0:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000bd2:	46c0      	nop			; (mov r8, r8)
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}

08000bd8 <Reset_Handler>:
 8000bd8:	480d      	ldr	r0, [pc, #52]	; (8000c10 <LoopForever+0x2>)
 8000bda:	4685      	mov	sp, r0
 8000bdc:	480d      	ldr	r0, [pc, #52]	; (8000c14 <LoopForever+0x6>)
 8000bde:	490e      	ldr	r1, [pc, #56]	; (8000c18 <LoopForever+0xa>)
 8000be0:	4a0e      	ldr	r2, [pc, #56]	; (8000c1c <LoopForever+0xe>)
 8000be2:	2300      	movs	r3, #0
 8000be4:	e002      	b.n	8000bec <LoopCopyDataInit>

08000be6 <CopyDataInit>:
 8000be6:	58d4      	ldr	r4, [r2, r3]
 8000be8:	50c4      	str	r4, [r0, r3]
 8000bea:	3304      	adds	r3, #4

08000bec <LoopCopyDataInit>:
 8000bec:	18c4      	adds	r4, r0, r3
 8000bee:	428c      	cmp	r4, r1
 8000bf0:	d3f9      	bcc.n	8000be6 <CopyDataInit>
 8000bf2:	4a0b      	ldr	r2, [pc, #44]	; (8000c20 <LoopForever+0x12>)
 8000bf4:	4c0b      	ldr	r4, [pc, #44]	; (8000c24 <LoopForever+0x16>)
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	e001      	b.n	8000bfe <LoopFillZerobss>

08000bfa <FillZerobss>:
 8000bfa:	6013      	str	r3, [r2, #0]
 8000bfc:	3204      	adds	r2, #4

08000bfe <LoopFillZerobss>:
 8000bfe:	42a2      	cmp	r2, r4
 8000c00:	d3fb      	bcc.n	8000bfa <FillZerobss>
 8000c02:	f7ff ffe4 	bl	8000bce <SystemInit>
 8000c06:	f002 fac9 	bl	800319c <__libc_init_array>
 8000c0a:	f7ff fd4f 	bl	80006ac <main>

08000c0e <LoopForever>:
 8000c0e:	e7fe      	b.n	8000c0e <LoopForever>
 8000c10:	20001000 	.word	0x20001000
 8000c14:	20000000 	.word	0x20000000
 8000c18:	20000010 	.word	0x20000010
 8000c1c:	08003264 	.word	0x08003264
 8000c20:	20000010 	.word	0x20000010
 8000c24:	20000150 	.word	0x20000150

08000c28 <ADC1_IRQHandler>:
 8000c28:	e7fe      	b.n	8000c28 <ADC1_IRQHandler>
	...

08000c2c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c30:	4b07      	ldr	r3, [pc, #28]	; (8000c50 <HAL_Init+0x24>)
 8000c32:	681a      	ldr	r2, [r3, #0]
 8000c34:	4b06      	ldr	r3, [pc, #24]	; (8000c50 <HAL_Init+0x24>)
 8000c36:	2110      	movs	r1, #16
 8000c38:	430a      	orrs	r2, r1
 8000c3a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000c3c:	2000      	movs	r0, #0
 8000c3e:	f000 f809 	bl	8000c54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c42:	f7ff fedb 	bl	80009fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c46:	2300      	movs	r3, #0
}
 8000c48:	0018      	movs	r0, r3
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	46c0      	nop			; (mov r8, r8)
 8000c50:	40022000 	.word	0x40022000

08000c54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c54:	b590      	push	{r4, r7, lr}
 8000c56:	b083      	sub	sp, #12
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c5c:	4b14      	ldr	r3, [pc, #80]	; (8000cb0 <HAL_InitTick+0x5c>)
 8000c5e:	681c      	ldr	r4, [r3, #0]
 8000c60:	4b14      	ldr	r3, [pc, #80]	; (8000cb4 <HAL_InitTick+0x60>)
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	0019      	movs	r1, r3
 8000c66:	23fa      	movs	r3, #250	; 0xfa
 8000c68:	0098      	lsls	r0, r3, #2
 8000c6a:	f7ff fa4d 	bl	8000108 <__udivsi3>
 8000c6e:	0003      	movs	r3, r0
 8000c70:	0019      	movs	r1, r3
 8000c72:	0020      	movs	r0, r4
 8000c74:	f7ff fa48 	bl	8000108 <__udivsi3>
 8000c78:	0003      	movs	r3, r0
 8000c7a:	0018      	movs	r0, r3
 8000c7c:	f000 f903 	bl	8000e86 <HAL_SYSTICK_Config>
 8000c80:	1e03      	subs	r3, r0, #0
 8000c82:	d001      	beq.n	8000c88 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000c84:	2301      	movs	r3, #1
 8000c86:	e00f      	b.n	8000ca8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	2b03      	cmp	r3, #3
 8000c8c:	d80b      	bhi.n	8000ca6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c8e:	6879      	ldr	r1, [r7, #4]
 8000c90:	2301      	movs	r3, #1
 8000c92:	425b      	negs	r3, r3
 8000c94:	2200      	movs	r2, #0
 8000c96:	0018      	movs	r0, r3
 8000c98:	f000 f8e0 	bl	8000e5c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c9c:	4b06      	ldr	r3, [pc, #24]	; (8000cb8 <HAL_InitTick+0x64>)
 8000c9e:	687a      	ldr	r2, [r7, #4]
 8000ca0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	e000      	b.n	8000ca8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000ca6:	2301      	movs	r3, #1
}
 8000ca8:	0018      	movs	r0, r3
 8000caa:	46bd      	mov	sp, r7
 8000cac:	b003      	add	sp, #12
 8000cae:	bd90      	pop	{r4, r7, pc}
 8000cb0:	20000004 	.word	0x20000004
 8000cb4:	2000000c 	.word	0x2000000c
 8000cb8:	20000008 	.word	0x20000008

08000cbc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cc0:	4b05      	ldr	r3, [pc, #20]	; (8000cd8 <HAL_IncTick+0x1c>)
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	001a      	movs	r2, r3
 8000cc6:	4b05      	ldr	r3, [pc, #20]	; (8000cdc <HAL_IncTick+0x20>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	18d2      	adds	r2, r2, r3
 8000ccc:	4b03      	ldr	r3, [pc, #12]	; (8000cdc <HAL_IncTick+0x20>)
 8000cce:	601a      	str	r2, [r3, #0]
}
 8000cd0:	46c0      	nop			; (mov r8, r8)
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	46c0      	nop			; (mov r8, r8)
 8000cd8:	2000000c 	.word	0x2000000c
 8000cdc:	20000128 	.word	0x20000128

08000ce0 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ce4:	4b02      	ldr	r3, [pc, #8]	; (8000cf0 <HAL_GetTick+0x10>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
}
 8000ce8:	0018      	movs	r0, r3
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	46c0      	nop			; (mov r8, r8)
 8000cf0:	20000128 	.word	0x20000128

08000cf4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b084      	sub	sp, #16
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cfc:	f7ff fff0 	bl	8000ce0 <HAL_GetTick>
 8000d00:	0003      	movs	r3, r0
 8000d02:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	3301      	adds	r3, #1
 8000d0c:	d005      	beq.n	8000d1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d0e:	4b09      	ldr	r3, [pc, #36]	; (8000d34 <HAL_Delay+0x40>)
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	001a      	movs	r2, r3
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	189b      	adds	r3, r3, r2
 8000d18:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000d1a:	46c0      	nop			; (mov r8, r8)
 8000d1c:	f7ff ffe0 	bl	8000ce0 <HAL_GetTick>
 8000d20:	0002      	movs	r2, r0
 8000d22:	68bb      	ldr	r3, [r7, #8]
 8000d24:	1ad3      	subs	r3, r2, r3
 8000d26:	68fa      	ldr	r2, [r7, #12]
 8000d28:	429a      	cmp	r2, r3
 8000d2a:	d8f7      	bhi.n	8000d1c <HAL_Delay+0x28>
  {
  }
}
 8000d2c:	46c0      	nop			; (mov r8, r8)
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	b004      	add	sp, #16
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	2000000c 	.word	0x2000000c

08000d38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d38:	b590      	push	{r4, r7, lr}
 8000d3a:	b083      	sub	sp, #12
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	0002      	movs	r2, r0
 8000d40:	6039      	str	r1, [r7, #0]
 8000d42:	1dfb      	adds	r3, r7, #7
 8000d44:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000d46:	1dfb      	adds	r3, r7, #7
 8000d48:	781b      	ldrb	r3, [r3, #0]
 8000d4a:	2b7f      	cmp	r3, #127	; 0x7f
 8000d4c:	d828      	bhi.n	8000da0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d4e:	4a2f      	ldr	r2, [pc, #188]	; (8000e0c <__NVIC_SetPriority+0xd4>)
 8000d50:	1dfb      	adds	r3, r7, #7
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	b25b      	sxtb	r3, r3
 8000d56:	089b      	lsrs	r3, r3, #2
 8000d58:	33c0      	adds	r3, #192	; 0xc0
 8000d5a:	009b      	lsls	r3, r3, #2
 8000d5c:	589b      	ldr	r3, [r3, r2]
 8000d5e:	1dfa      	adds	r2, r7, #7
 8000d60:	7812      	ldrb	r2, [r2, #0]
 8000d62:	0011      	movs	r1, r2
 8000d64:	2203      	movs	r2, #3
 8000d66:	400a      	ands	r2, r1
 8000d68:	00d2      	lsls	r2, r2, #3
 8000d6a:	21ff      	movs	r1, #255	; 0xff
 8000d6c:	4091      	lsls	r1, r2
 8000d6e:	000a      	movs	r2, r1
 8000d70:	43d2      	mvns	r2, r2
 8000d72:	401a      	ands	r2, r3
 8000d74:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	019b      	lsls	r3, r3, #6
 8000d7a:	22ff      	movs	r2, #255	; 0xff
 8000d7c:	401a      	ands	r2, r3
 8000d7e:	1dfb      	adds	r3, r7, #7
 8000d80:	781b      	ldrb	r3, [r3, #0]
 8000d82:	0018      	movs	r0, r3
 8000d84:	2303      	movs	r3, #3
 8000d86:	4003      	ands	r3, r0
 8000d88:	00db      	lsls	r3, r3, #3
 8000d8a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d8c:	481f      	ldr	r0, [pc, #124]	; (8000e0c <__NVIC_SetPriority+0xd4>)
 8000d8e:	1dfb      	adds	r3, r7, #7
 8000d90:	781b      	ldrb	r3, [r3, #0]
 8000d92:	b25b      	sxtb	r3, r3
 8000d94:	089b      	lsrs	r3, r3, #2
 8000d96:	430a      	orrs	r2, r1
 8000d98:	33c0      	adds	r3, #192	; 0xc0
 8000d9a:	009b      	lsls	r3, r3, #2
 8000d9c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000d9e:	e031      	b.n	8000e04 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000da0:	4a1b      	ldr	r2, [pc, #108]	; (8000e10 <__NVIC_SetPriority+0xd8>)
 8000da2:	1dfb      	adds	r3, r7, #7
 8000da4:	781b      	ldrb	r3, [r3, #0]
 8000da6:	0019      	movs	r1, r3
 8000da8:	230f      	movs	r3, #15
 8000daa:	400b      	ands	r3, r1
 8000dac:	3b08      	subs	r3, #8
 8000dae:	089b      	lsrs	r3, r3, #2
 8000db0:	3306      	adds	r3, #6
 8000db2:	009b      	lsls	r3, r3, #2
 8000db4:	18d3      	adds	r3, r2, r3
 8000db6:	3304      	adds	r3, #4
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	1dfa      	adds	r2, r7, #7
 8000dbc:	7812      	ldrb	r2, [r2, #0]
 8000dbe:	0011      	movs	r1, r2
 8000dc0:	2203      	movs	r2, #3
 8000dc2:	400a      	ands	r2, r1
 8000dc4:	00d2      	lsls	r2, r2, #3
 8000dc6:	21ff      	movs	r1, #255	; 0xff
 8000dc8:	4091      	lsls	r1, r2
 8000dca:	000a      	movs	r2, r1
 8000dcc:	43d2      	mvns	r2, r2
 8000dce:	401a      	ands	r2, r3
 8000dd0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	019b      	lsls	r3, r3, #6
 8000dd6:	22ff      	movs	r2, #255	; 0xff
 8000dd8:	401a      	ands	r2, r3
 8000dda:	1dfb      	adds	r3, r7, #7
 8000ddc:	781b      	ldrb	r3, [r3, #0]
 8000dde:	0018      	movs	r0, r3
 8000de0:	2303      	movs	r3, #3
 8000de2:	4003      	ands	r3, r0
 8000de4:	00db      	lsls	r3, r3, #3
 8000de6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000de8:	4809      	ldr	r0, [pc, #36]	; (8000e10 <__NVIC_SetPriority+0xd8>)
 8000dea:	1dfb      	adds	r3, r7, #7
 8000dec:	781b      	ldrb	r3, [r3, #0]
 8000dee:	001c      	movs	r4, r3
 8000df0:	230f      	movs	r3, #15
 8000df2:	4023      	ands	r3, r4
 8000df4:	3b08      	subs	r3, #8
 8000df6:	089b      	lsrs	r3, r3, #2
 8000df8:	430a      	orrs	r2, r1
 8000dfa:	3306      	adds	r3, #6
 8000dfc:	009b      	lsls	r3, r3, #2
 8000dfe:	18c3      	adds	r3, r0, r3
 8000e00:	3304      	adds	r3, #4
 8000e02:	601a      	str	r2, [r3, #0]
}
 8000e04:	46c0      	nop			; (mov r8, r8)
 8000e06:	46bd      	mov	sp, r7
 8000e08:	b003      	add	sp, #12
 8000e0a:	bd90      	pop	{r4, r7, pc}
 8000e0c:	e000e100 	.word	0xe000e100
 8000e10:	e000ed00 	.word	0xe000ed00

08000e14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	3b01      	subs	r3, #1
 8000e20:	4a0c      	ldr	r2, [pc, #48]	; (8000e54 <SysTick_Config+0x40>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d901      	bls.n	8000e2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e26:	2301      	movs	r3, #1
 8000e28:	e010      	b.n	8000e4c <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e2a:	4b0b      	ldr	r3, [pc, #44]	; (8000e58 <SysTick_Config+0x44>)
 8000e2c:	687a      	ldr	r2, [r7, #4]
 8000e2e:	3a01      	subs	r2, #1
 8000e30:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e32:	2301      	movs	r3, #1
 8000e34:	425b      	negs	r3, r3
 8000e36:	2103      	movs	r1, #3
 8000e38:	0018      	movs	r0, r3
 8000e3a:	f7ff ff7d 	bl	8000d38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e3e:	4b06      	ldr	r3, [pc, #24]	; (8000e58 <SysTick_Config+0x44>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e44:	4b04      	ldr	r3, [pc, #16]	; (8000e58 <SysTick_Config+0x44>)
 8000e46:	2207      	movs	r2, #7
 8000e48:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e4a:	2300      	movs	r3, #0
}
 8000e4c:	0018      	movs	r0, r3
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	b002      	add	sp, #8
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	00ffffff 	.word	0x00ffffff
 8000e58:	e000e010 	.word	0xe000e010

08000e5c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b084      	sub	sp, #16
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	60b9      	str	r1, [r7, #8]
 8000e64:	607a      	str	r2, [r7, #4]
 8000e66:	210f      	movs	r1, #15
 8000e68:	187b      	adds	r3, r7, r1
 8000e6a:	1c02      	adds	r2, r0, #0
 8000e6c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000e6e:	68ba      	ldr	r2, [r7, #8]
 8000e70:	187b      	adds	r3, r7, r1
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	b25b      	sxtb	r3, r3
 8000e76:	0011      	movs	r1, r2
 8000e78:	0018      	movs	r0, r3
 8000e7a:	f7ff ff5d 	bl	8000d38 <__NVIC_SetPriority>
}
 8000e7e:	46c0      	nop			; (mov r8, r8)
 8000e80:	46bd      	mov	sp, r7
 8000e82:	b004      	add	sp, #16
 8000e84:	bd80      	pop	{r7, pc}

08000e86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e86:	b580      	push	{r7, lr}
 8000e88:	b082      	sub	sp, #8
 8000e8a:	af00      	add	r7, sp, #0
 8000e8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	0018      	movs	r0, r3
 8000e92:	f7ff ffbf 	bl	8000e14 <SysTick_Config>
 8000e96:	0003      	movs	r3, r0
}
 8000e98:	0018      	movs	r0, r3
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	b002      	add	sp, #8
 8000e9e:	bd80      	pop	{r7, pc}

08000ea0 <HAL_FLASH_Program>:
  * @param  Data          Specifie the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8000ea0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ea2:	b087      	sub	sp, #28
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	60f8      	str	r0, [r7, #12]
 8000ea8:	60b9      	str	r1, [r7, #8]
 8000eaa:	603a      	str	r2, [r7, #0]
 8000eac:	607b      	str	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000eae:	2317      	movs	r3, #23
 8000eb0:	18fb      	adds	r3, r7, r3
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	701a      	strb	r2, [r3, #0]
  uint8_t index = 0U;
 8000eb6:	2316      	movs	r3, #22
 8000eb8:	18fb      	adds	r3, r7, r3
 8000eba:	2200      	movs	r2, #0
 8000ebc:	701a      	strb	r2, [r3, #0]
  uint8_t nbiterations = 0U;
 8000ebe:	2315      	movs	r3, #21
 8000ec0:	18fb      	adds	r3, r7, r3
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	701a      	strb	r2, [r3, #0]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000ec6:	4b3e      	ldr	r3, [pc, #248]	; (8000fc0 <HAL_FLASH_Program+0x120>)
 8000ec8:	7e1b      	ldrb	r3, [r3, #24]
 8000eca:	2b01      	cmp	r3, #1
 8000ecc:	d101      	bne.n	8000ed2 <HAL_FLASH_Program+0x32>
 8000ece:	2302      	movs	r3, #2
 8000ed0:	e072      	b.n	8000fb8 <HAL_FLASH_Program+0x118>
 8000ed2:	4b3b      	ldr	r3, [pc, #236]	; (8000fc0 <HAL_FLASH_Program+0x120>)
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	761a      	strb	r2, [r3, #24]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000ed8:	2317      	movs	r3, #23
 8000eda:	18fe      	adds	r6, r7, r3
 8000edc:	4b39      	ldr	r3, [pc, #228]	; (8000fc4 <HAL_FLASH_Program+0x124>)
 8000ede:	0018      	movs	r0, r3
 8000ee0:	f000 f8c4 	bl	800106c <FLASH_WaitForLastOperation>
 8000ee4:	0003      	movs	r3, r0
 8000ee6:	7033      	strb	r3, [r6, #0]
  
  if(status == HAL_OK)
 8000ee8:	2317      	movs	r3, #23
 8000eea:	18fb      	adds	r3, r7, r3
 8000eec:	781b      	ldrb	r3, [r3, #0]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d15c      	bne.n	8000fac <HAL_FLASH_Program+0x10c>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	2b01      	cmp	r3, #1
 8000ef6:	d104      	bne.n	8000f02 <HAL_FLASH_Program+0x62>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8000ef8:	2315      	movs	r3, #21
 8000efa:	18fb      	adds	r3, r7, r3
 8000efc:	2201      	movs	r2, #1
 8000efe:	701a      	strb	r2, [r3, #0]
 8000f00:	e00b      	b.n	8000f1a <HAL_FLASH_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	2b02      	cmp	r3, #2
 8000f06:	d104      	bne.n	8000f12 <HAL_FLASH_Program+0x72>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8000f08:	2315      	movs	r3, #21
 8000f0a:	18fb      	adds	r3, r7, r3
 8000f0c:	2202      	movs	r2, #2
 8000f0e:	701a      	strb	r2, [r3, #0]
 8000f10:	e003      	b.n	8000f1a <HAL_FLASH_Program+0x7a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8000f12:	2315      	movs	r3, #21
 8000f14:	18fb      	adds	r3, r7, r3
 8000f16:	2204      	movs	r2, #4
 8000f18:	701a      	strb	r2, [r3, #0]
    }

    for (index = 0U; index < nbiterations; index++)
 8000f1a:	2316      	movs	r3, #22
 8000f1c:	18fb      	adds	r3, r7, r3
 8000f1e:	2200      	movs	r2, #0
 8000f20:	701a      	strb	r2, [r3, #0]
 8000f22:	e039      	b.n	8000f98 <HAL_FLASH_Program+0xf8>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8000f24:	2116      	movs	r1, #22
 8000f26:	187b      	adds	r3, r7, r1
 8000f28:	781b      	ldrb	r3, [r3, #0]
 8000f2a:	005a      	lsls	r2, r3, #1
 8000f2c:	68bb      	ldr	r3, [r7, #8]
 8000f2e:	18d0      	adds	r0, r2, r3
 8000f30:	187b      	adds	r3, r7, r1
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	011b      	lsls	r3, r3, #4
 8000f36:	001a      	movs	r2, r3
 8000f38:	3a20      	subs	r2, #32
 8000f3a:	2a00      	cmp	r2, #0
 8000f3c:	db03      	blt.n	8000f46 <HAL_FLASH_Program+0xa6>
 8000f3e:	6879      	ldr	r1, [r7, #4]
 8000f40:	40d1      	lsrs	r1, r2
 8000f42:	000c      	movs	r4, r1
 8000f44:	e008      	b.n	8000f58 <HAL_FLASH_Program+0xb8>
 8000f46:	2220      	movs	r2, #32
 8000f48:	1ad2      	subs	r2, r2, r3
 8000f4a:	6879      	ldr	r1, [r7, #4]
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	000a      	movs	r2, r1
 8000f50:	6839      	ldr	r1, [r7, #0]
 8000f52:	40d9      	lsrs	r1, r3
 8000f54:	000c      	movs	r4, r1
 8000f56:	4314      	orrs	r4, r2
 8000f58:	687a      	ldr	r2, [r7, #4]
 8000f5a:	40da      	lsrs	r2, r3
 8000f5c:	0015      	movs	r5, r2
 8000f5e:	b2a3      	uxth	r3, r4
 8000f60:	0019      	movs	r1, r3
 8000f62:	f000 f867 	bl	8001034 <FLASH_Program_HalfWord>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000f66:	2317      	movs	r3, #23
 8000f68:	18fe      	adds	r6, r7, r3
 8000f6a:	4b16      	ldr	r3, [pc, #88]	; (8000fc4 <HAL_FLASH_Program+0x124>)
 8000f6c:	0018      	movs	r0, r3
 8000f6e:	f000 f87d 	bl	800106c <FLASH_WaitForLastOperation>
 8000f72:	0003      	movs	r3, r0
 8000f74:	7033      	strb	r3, [r6, #0]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8000f76:	4b14      	ldr	r3, [pc, #80]	; (8000fc8 <HAL_FLASH_Program+0x128>)
 8000f78:	691a      	ldr	r2, [r3, #16]
 8000f7a:	4b13      	ldr	r3, [pc, #76]	; (8000fc8 <HAL_FLASH_Program+0x128>)
 8000f7c:	2101      	movs	r1, #1
 8000f7e:	438a      	bics	r2, r1
 8000f80:	611a      	str	r2, [r3, #16]
      /* In case of error, stop programming procedure */
      if (status != HAL_OK)
 8000f82:	2317      	movs	r3, #23
 8000f84:	18fb      	adds	r3, r7, r3
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d10e      	bne.n	8000faa <HAL_FLASH_Program+0x10a>
    for (index = 0U; index < nbiterations; index++)
 8000f8c:	2116      	movs	r1, #22
 8000f8e:	187b      	adds	r3, r7, r1
 8000f90:	781a      	ldrb	r2, [r3, #0]
 8000f92:	187b      	adds	r3, r7, r1
 8000f94:	3201      	adds	r2, #1
 8000f96:	701a      	strb	r2, [r3, #0]
 8000f98:	2316      	movs	r3, #22
 8000f9a:	18fa      	adds	r2, r7, r3
 8000f9c:	2315      	movs	r3, #21
 8000f9e:	18fb      	adds	r3, r7, r3
 8000fa0:	7812      	ldrb	r2, [r2, #0]
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	429a      	cmp	r2, r3
 8000fa6:	d3bd      	bcc.n	8000f24 <HAL_FLASH_Program+0x84>
 8000fa8:	e000      	b.n	8000fac <HAL_FLASH_Program+0x10c>
      {
        break;
 8000faa:	46c0      	nop			; (mov r8, r8)
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8000fac:	4b04      	ldr	r3, [pc, #16]	; (8000fc0 <HAL_FLASH_Program+0x120>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	761a      	strb	r2, [r3, #24]

  return status;
 8000fb2:	2317      	movs	r3, #23
 8000fb4:	18fb      	adds	r3, r7, r3
 8000fb6:	781b      	ldrb	r3, [r3, #0]
}
 8000fb8:	0018      	movs	r0, r3
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	b007      	add	sp, #28
 8000fbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000fc0:	20000130 	.word	0x20000130
 8000fc4:	0000c350 	.word	0x0000c350
 8000fc8:	40022000 	.word	0x40022000

08000fcc <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8000fd2:	1dfb      	adds	r3, r7, #7
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	701a      	strb	r2, [r3, #0]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000fd8:	4b0c      	ldr	r3, [pc, #48]	; (800100c <HAL_FLASH_Unlock+0x40>)
 8000fda:	691b      	ldr	r3, [r3, #16]
 8000fdc:	2280      	movs	r2, #128	; 0x80
 8000fde:	4013      	ands	r3, r2
 8000fe0:	d00d      	beq.n	8000ffe <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8000fe2:	4b0a      	ldr	r3, [pc, #40]	; (800100c <HAL_FLASH_Unlock+0x40>)
 8000fe4:	4a0a      	ldr	r2, [pc, #40]	; (8001010 <HAL_FLASH_Unlock+0x44>)
 8000fe6:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8000fe8:	4b08      	ldr	r3, [pc, #32]	; (800100c <HAL_FLASH_Unlock+0x40>)
 8000fea:	4a0a      	ldr	r2, [pc, #40]	; (8001014 <HAL_FLASH_Unlock+0x48>)
 8000fec:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000fee:	4b07      	ldr	r3, [pc, #28]	; (800100c <HAL_FLASH_Unlock+0x40>)
 8000ff0:	691b      	ldr	r3, [r3, #16]
 8000ff2:	2280      	movs	r2, #128	; 0x80
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	d002      	beq.n	8000ffe <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8000ff8:	1dfb      	adds	r3, r7, #7
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8000ffe:	1dfb      	adds	r3, r7, #7
 8001000:	781b      	ldrb	r3, [r3, #0]
}
 8001002:	0018      	movs	r0, r3
 8001004:	46bd      	mov	sp, r7
 8001006:	b002      	add	sp, #8
 8001008:	bd80      	pop	{r7, pc}
 800100a:	46c0      	nop			; (mov r8, r8)
 800100c:	40022000 	.word	0x40022000
 8001010:	45670123 	.word	0x45670123
 8001014:	cdef89ab 	.word	0xcdef89ab

08001018 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800101c:	4b04      	ldr	r3, [pc, #16]	; (8001030 <HAL_FLASH_Lock+0x18>)
 800101e:	691a      	ldr	r2, [r3, #16]
 8001020:	4b03      	ldr	r3, [pc, #12]	; (8001030 <HAL_FLASH_Lock+0x18>)
 8001022:	2180      	movs	r1, #128	; 0x80
 8001024:	430a      	orrs	r2, r1
 8001026:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 8001028:	2300      	movs	r3, #0
}
 800102a:	0018      	movs	r0, r3
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	40022000 	.word	0x40022000

08001034 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
 800103c:	000a      	movs	r2, r1
 800103e:	1cbb      	adds	r3, r7, #2
 8001040:	801a      	strh	r2, [r3, #0]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001042:	4b08      	ldr	r3, [pc, #32]	; (8001064 <FLASH_Program_HalfWord+0x30>)
 8001044:	2200      	movs	r2, #0
 8001046:	61da      	str	r2, [r3, #28]
  
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8001048:	4b07      	ldr	r3, [pc, #28]	; (8001068 <FLASH_Program_HalfWord+0x34>)
 800104a:	691a      	ldr	r2, [r3, #16]
 800104c:	4b06      	ldr	r3, [pc, #24]	; (8001068 <FLASH_Program_HalfWord+0x34>)
 800104e:	2101      	movs	r1, #1
 8001050:	430a      	orrs	r2, r1
 8001052:	611a      	str	r2, [r3, #16]

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	1cba      	adds	r2, r7, #2
 8001058:	8812      	ldrh	r2, [r2, #0]
 800105a:	801a      	strh	r2, [r3, #0]
}
 800105c:	46c0      	nop			; (mov r8, r8)
 800105e:	46bd      	mov	sp, r7
 8001060:	b002      	add	sp, #8
 8001062:	bd80      	pop	{r7, pc}
 8001064:	20000130 	.word	0x20000130
 8001068:	40022000 	.word	0x40022000

0800106c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b084      	sub	sp, #16
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8001074:	f7ff fe34 	bl	8000ce0 <HAL_GetTick>
 8001078:	0003      	movs	r3, r0
 800107a:	60fb      	str	r3, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800107c:	e00f      	b.n	800109e <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	3301      	adds	r3, #1
 8001082:	d00c      	beq.n	800109e <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d007      	beq.n	800109a <FLASH_WaitForLastOperation+0x2e>
 800108a:	f7ff fe29 	bl	8000ce0 <HAL_GetTick>
 800108e:	0002      	movs	r2, r0
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	1ad3      	subs	r3, r2, r3
 8001094:	687a      	ldr	r2, [r7, #4]
 8001096:	429a      	cmp	r2, r3
 8001098:	d201      	bcs.n	800109e <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800109a:	2303      	movs	r3, #3
 800109c:	e01f      	b.n	80010de <FLASH_WaitForLastOperation+0x72>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800109e:	4b12      	ldr	r3, [pc, #72]	; (80010e8 <FLASH_WaitForLastOperation+0x7c>)
 80010a0:	68db      	ldr	r3, [r3, #12]
 80010a2:	2201      	movs	r2, #1
 80010a4:	4013      	ands	r3, r2
 80010a6:	2b01      	cmp	r3, #1
 80010a8:	d0e9      	beq.n	800107e <FLASH_WaitForLastOperation+0x12>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80010aa:	4b0f      	ldr	r3, [pc, #60]	; (80010e8 <FLASH_WaitForLastOperation+0x7c>)
 80010ac:	68db      	ldr	r3, [r3, #12]
 80010ae:	2220      	movs	r2, #32
 80010b0:	4013      	ands	r3, r2
 80010b2:	2b20      	cmp	r3, #32
 80010b4:	d102      	bne.n	80010bc <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80010b6:	4b0c      	ldr	r3, [pc, #48]	; (80010e8 <FLASH_WaitForLastOperation+0x7c>)
 80010b8:	2220      	movs	r2, #32
 80010ba:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80010bc:	4b0a      	ldr	r3, [pc, #40]	; (80010e8 <FLASH_WaitForLastOperation+0x7c>)
 80010be:	68db      	ldr	r3, [r3, #12]
 80010c0:	2210      	movs	r2, #16
 80010c2:	4013      	ands	r3, r2
 80010c4:	2b10      	cmp	r3, #16
 80010c6:	d005      	beq.n	80010d4 <FLASH_WaitForLastOperation+0x68>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80010c8:	4b07      	ldr	r3, [pc, #28]	; (80010e8 <FLASH_WaitForLastOperation+0x7c>)
 80010ca:	68db      	ldr	r3, [r3, #12]
 80010cc:	2204      	movs	r2, #4
 80010ce:	4013      	ands	r3, r2
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80010d0:	2b04      	cmp	r3, #4
 80010d2:	d103      	bne.n	80010dc <FLASH_WaitForLastOperation+0x70>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80010d4:	f000 f80a 	bl	80010ec <FLASH_SetErrorCode>
    return HAL_ERROR;
 80010d8:	2301      	movs	r3, #1
 80010da:	e000      	b.n	80010de <FLASH_WaitForLastOperation+0x72>
  }

  /* There is no error flag set */
  return HAL_OK;
 80010dc:	2300      	movs	r3, #0
}
 80010de:	0018      	movs	r0, r3
 80010e0:	46bd      	mov	sp, r7
 80010e2:	b004      	add	sp, #16
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	46c0      	nop			; (mov r8, r8)
 80010e8:	40022000 	.word	0x40022000

080010ec <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 80010f2:	2300      	movs	r3, #0
 80010f4:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80010f6:	4b13      	ldr	r3, [pc, #76]	; (8001144 <FLASH_SetErrorCode+0x58>)
 80010f8:	68db      	ldr	r3, [r3, #12]
 80010fa:	2210      	movs	r2, #16
 80010fc:	4013      	ands	r3, r2
 80010fe:	2b10      	cmp	r3, #16
 8001100:	d109      	bne.n	8001116 <FLASH_SetErrorCode+0x2a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001102:	4b11      	ldr	r3, [pc, #68]	; (8001148 <FLASH_SetErrorCode+0x5c>)
 8001104:	69db      	ldr	r3, [r3, #28]
 8001106:	2202      	movs	r2, #2
 8001108:	431a      	orrs	r2, r3
 800110a:	4b0f      	ldr	r3, [pc, #60]	; (8001148 <FLASH_SetErrorCode+0x5c>)
 800110c:	61da      	str	r2, [r3, #28]
    flags |= FLASH_FLAG_WRPERR;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	2210      	movs	r2, #16
 8001112:	4313      	orrs	r3, r2
 8001114:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001116:	4b0b      	ldr	r3, [pc, #44]	; (8001144 <FLASH_SetErrorCode+0x58>)
 8001118:	68db      	ldr	r3, [r3, #12]
 800111a:	2204      	movs	r2, #4
 800111c:	4013      	ands	r3, r2
 800111e:	2b04      	cmp	r3, #4
 8001120:	d109      	bne.n	8001136 <FLASH_SetErrorCode+0x4a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8001122:	4b09      	ldr	r3, [pc, #36]	; (8001148 <FLASH_SetErrorCode+0x5c>)
 8001124:	69db      	ldr	r3, [r3, #28]
 8001126:	2201      	movs	r2, #1
 8001128:	431a      	orrs	r2, r3
 800112a:	4b07      	ldr	r3, [pc, #28]	; (8001148 <FLASH_SetErrorCode+0x5c>)
 800112c:	61da      	str	r2, [r3, #28]
    flags |= FLASH_FLAG_PGERR;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2204      	movs	r2, #4
 8001132:	4313      	orrs	r3, r2
 8001134:	607b      	str	r3, [r7, #4]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8001136:	4b03      	ldr	r3, [pc, #12]	; (8001144 <FLASH_SetErrorCode+0x58>)
 8001138:	687a      	ldr	r2, [r7, #4]
 800113a:	60da      	str	r2, [r3, #12]
}  
 800113c:	46c0      	nop			; (mov r8, r8)
 800113e:	46bd      	mov	sp, r7
 8001140:	b002      	add	sp, #8
 8001142:	bd80      	pop	{r7, pc}
 8001144:	40022000 	.word	0x40022000
 8001148:	20000130 	.word	0x20000130

0800114c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 800114c:	b5b0      	push	{r4, r5, r7, lr}
 800114e:	b084      	sub	sp, #16
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
 8001154:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001156:	230f      	movs	r3, #15
 8001158:	18fb      	adds	r3, r7, r3
 800115a:	2201      	movs	r2, #1
 800115c:	701a      	strb	r2, [r3, #0]
  uint32_t address = 0U;
 800115e:	2300      	movs	r3, #0
 8001160:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001162:	4b32      	ldr	r3, [pc, #200]	; (800122c <HAL_FLASHEx_Erase+0xe0>)
 8001164:	7e1b      	ldrb	r3, [r3, #24]
 8001166:	2b01      	cmp	r3, #1
 8001168:	d101      	bne.n	800116e <HAL_FLASHEx_Erase+0x22>
 800116a:	2302      	movs	r3, #2
 800116c:	e05a      	b.n	8001224 <HAL_FLASHEx_Erase+0xd8>
 800116e:	4b2f      	ldr	r3, [pc, #188]	; (800122c <HAL_FLASHEx_Erase+0xe0>)
 8001170:	2201      	movs	r2, #1
 8001172:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	2b01      	cmp	r3, #1
 800117a:	d116      	bne.n	80011aa <HAL_FLASHEx_Erase+0x5e>
  {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800117c:	4b2c      	ldr	r3, [pc, #176]	; (8001230 <HAL_FLASHEx_Erase+0xe4>)
 800117e:	0018      	movs	r0, r3
 8001180:	f7ff ff74 	bl	800106c <FLASH_WaitForLastOperation>
 8001184:	1e03      	subs	r3, r0, #0
 8001186:	d147      	bne.n	8001218 <HAL_FLASHEx_Erase+0xcc>
      {
        /*Mass erase to be done*/
        FLASH_MassErase();
 8001188:	f000 f856 	bl	8001238 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800118c:	230f      	movs	r3, #15
 800118e:	18fc      	adds	r4, r7, r3
 8001190:	4b27      	ldr	r3, [pc, #156]	; (8001230 <HAL_FLASHEx_Erase+0xe4>)
 8001192:	0018      	movs	r0, r3
 8001194:	f7ff ff6a 	bl	800106c <FLASH_WaitForLastOperation>
 8001198:	0003      	movs	r3, r0
 800119a:	7023      	strb	r3, [r4, #0]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 800119c:	4b25      	ldr	r3, [pc, #148]	; (8001234 <HAL_FLASHEx_Erase+0xe8>)
 800119e:	691a      	ldr	r2, [r3, #16]
 80011a0:	4b24      	ldr	r3, [pc, #144]	; (8001234 <HAL_FLASHEx_Erase+0xe8>)
 80011a2:	2104      	movs	r1, #4
 80011a4:	438a      	bics	r2, r1
 80011a6:	611a      	str	r2, [r3, #16]
 80011a8:	e036      	b.n	8001218 <HAL_FLASHEx_Erase+0xcc>
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
    
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80011aa:	4b21      	ldr	r3, [pc, #132]	; (8001230 <HAL_FLASHEx_Erase+0xe4>)
 80011ac:	0018      	movs	r0, r3
 80011ae:	f7ff ff5d 	bl	800106c <FLASH_WaitForLastOperation>
 80011b2:	1e03      	subs	r3, r0, #0
 80011b4:	d130      	bne.n	8001218 <HAL_FLASHEx_Erase+0xcc>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	2201      	movs	r2, #1
 80011ba:	4252      	negs	r2, r2
 80011bc:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	60bb      	str	r3, [r7, #8]
 80011c4:	e01f      	b.n	8001206 <HAL_FLASHEx_Erase+0xba>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 80011c6:	68bb      	ldr	r3, [r7, #8]
 80011c8:	0018      	movs	r0, r3
 80011ca:	f000 f84d 	bl	8001268 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80011ce:	250f      	movs	r5, #15
 80011d0:	197c      	adds	r4, r7, r5
 80011d2:	4b17      	ldr	r3, [pc, #92]	; (8001230 <HAL_FLASHEx_Erase+0xe4>)
 80011d4:	0018      	movs	r0, r3
 80011d6:	f7ff ff49 	bl	800106c <FLASH_WaitForLastOperation>
 80011da:	0003      	movs	r3, r0
 80011dc:	7023      	strb	r3, [r4, #0]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80011de:	4b15      	ldr	r3, [pc, #84]	; (8001234 <HAL_FLASHEx_Erase+0xe8>)
 80011e0:	691a      	ldr	r2, [r3, #16]
 80011e2:	4b14      	ldr	r3, [pc, #80]	; (8001234 <HAL_FLASHEx_Erase+0xe8>)
 80011e4:	2102      	movs	r1, #2
 80011e6:	438a      	bics	r2, r1
 80011e8:	611a      	str	r2, [r3, #16]
          
          if (status != HAL_OK)
 80011ea:	197b      	adds	r3, r7, r5
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d003      	beq.n	80011fa <HAL_FLASHEx_Erase+0xae>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	68ba      	ldr	r2, [r7, #8]
 80011f6:	601a      	str	r2, [r3, #0]
            break;
 80011f8:	e00e      	b.n	8001218 <HAL_FLASHEx_Erase+0xcc>
            address += FLASH_PAGE_SIZE)
 80011fa:	68bb      	ldr	r3, [r7, #8]
 80011fc:	2280      	movs	r2, #128	; 0x80
 80011fe:	00d2      	lsls	r2, r2, #3
 8001200:	4694      	mov	ip, r2
 8001202:	4463      	add	r3, ip
 8001204:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	689b      	ldr	r3, [r3, #8]
 800120a:	029a      	lsls	r2, r3, #10
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	18d3      	adds	r3, r2, r3
        for(address = pEraseInit->PageAddress;
 8001212:	68ba      	ldr	r2, [r7, #8]
 8001214:	429a      	cmp	r2, r3
 8001216:	d3d6      	bcc.n	80011c6 <HAL_FLASHEx_Erase+0x7a>
        }
      }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001218:	4b04      	ldr	r3, [pc, #16]	; (800122c <HAL_FLASHEx_Erase+0xe0>)
 800121a:	2200      	movs	r2, #0
 800121c:	761a      	strb	r2, [r3, #24]

  return status;
 800121e:	230f      	movs	r3, #15
 8001220:	18fb      	adds	r3, r7, r3
 8001222:	781b      	ldrb	r3, [r3, #0]
}
 8001224:	0018      	movs	r0, r3
 8001226:	46bd      	mov	sp, r7
 8001228:	b004      	add	sp, #16
 800122a:	bdb0      	pop	{r4, r5, r7, pc}
 800122c:	20000130 	.word	0x20000130
 8001230:	0000c350 	.word	0x0000c350
 8001234:	40022000 	.word	0x40022000

08001238 <FLASH_MassErase>:
  * @brief  Full erase of FLASH memory Bank 
  *
  * @retval None
  */
static void FLASH_MassErase(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800123c:	4b08      	ldr	r3, [pc, #32]	; (8001260 <FLASH_MassErase+0x28>)
 800123e:	2200      	movs	r2, #0
 8001240:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8001242:	4b08      	ldr	r3, [pc, #32]	; (8001264 <FLASH_MassErase+0x2c>)
 8001244:	691a      	ldr	r2, [r3, #16]
 8001246:	4b07      	ldr	r3, [pc, #28]	; (8001264 <FLASH_MassErase+0x2c>)
 8001248:	2104      	movs	r1, #4
 800124a:	430a      	orrs	r2, r1
 800124c:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800124e:	4b05      	ldr	r3, [pc, #20]	; (8001264 <FLASH_MassErase+0x2c>)
 8001250:	691a      	ldr	r2, [r3, #16]
 8001252:	4b04      	ldr	r3, [pc, #16]	; (8001264 <FLASH_MassErase+0x2c>)
 8001254:	2140      	movs	r1, #64	; 0x40
 8001256:	430a      	orrs	r2, r1
 8001258:	611a      	str	r2, [r3, #16]
}
 800125a:	46c0      	nop			; (mov r8, r8)
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	20000130 	.word	0x20000130
 8001264:	40022000 	.word	0x40022000

08001268 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001270:	4b0a      	ldr	r3, [pc, #40]	; (800129c <FLASH_PageErase+0x34>)
 8001272:	2200      	movs	r2, #0
 8001274:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8001276:	4b0a      	ldr	r3, [pc, #40]	; (80012a0 <FLASH_PageErase+0x38>)
 8001278:	691a      	ldr	r2, [r3, #16]
 800127a:	4b09      	ldr	r3, [pc, #36]	; (80012a0 <FLASH_PageErase+0x38>)
 800127c:	2102      	movs	r1, #2
 800127e:	430a      	orrs	r2, r1
 8001280:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8001282:	4b07      	ldr	r3, [pc, #28]	; (80012a0 <FLASH_PageErase+0x38>)
 8001284:	687a      	ldr	r2, [r7, #4]
 8001286:	615a      	str	r2, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001288:	4b05      	ldr	r3, [pc, #20]	; (80012a0 <FLASH_PageErase+0x38>)
 800128a:	691a      	ldr	r2, [r3, #16]
 800128c:	4b04      	ldr	r3, [pc, #16]	; (80012a0 <FLASH_PageErase+0x38>)
 800128e:	2140      	movs	r1, #64	; 0x40
 8001290:	430a      	orrs	r2, r1
 8001292:	611a      	str	r2, [r3, #16]
}
 8001294:	46c0      	nop			; (mov r8, r8)
 8001296:	46bd      	mov	sp, r7
 8001298:	b002      	add	sp, #8
 800129a:	bd80      	pop	{r7, pc}
 800129c:	20000130 	.word	0x20000130
 80012a0:	40022000 	.word	0x40022000

080012a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b086      	sub	sp, #24
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
 80012ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012ae:	2300      	movs	r3, #0
 80012b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012b2:	e14f      	b.n	8001554 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	2101      	movs	r1, #1
 80012ba:	697a      	ldr	r2, [r7, #20]
 80012bc:	4091      	lsls	r1, r2
 80012be:	000a      	movs	r2, r1
 80012c0:	4013      	ands	r3, r2
 80012c2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d100      	bne.n	80012cc <HAL_GPIO_Init+0x28>
 80012ca:	e140      	b.n	800154e <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	2b01      	cmp	r3, #1
 80012d2:	d00b      	beq.n	80012ec <HAL_GPIO_Init+0x48>
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	2b02      	cmp	r3, #2
 80012da:	d007      	beq.n	80012ec <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012e0:	2b11      	cmp	r3, #17
 80012e2:	d003      	beq.n	80012ec <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	2b12      	cmp	r3, #18
 80012ea:	d130      	bne.n	800134e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	689b      	ldr	r3, [r3, #8]
 80012f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	005b      	lsls	r3, r3, #1
 80012f6:	2203      	movs	r2, #3
 80012f8:	409a      	lsls	r2, r3
 80012fa:	0013      	movs	r3, r2
 80012fc:	43da      	mvns	r2, r3
 80012fe:	693b      	ldr	r3, [r7, #16]
 8001300:	4013      	ands	r3, r2
 8001302:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	68da      	ldr	r2, [r3, #12]
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	005b      	lsls	r3, r3, #1
 800130c:	409a      	lsls	r2, r3
 800130e:	0013      	movs	r3, r2
 8001310:	693a      	ldr	r2, [r7, #16]
 8001312:	4313      	orrs	r3, r2
 8001314:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	693a      	ldr	r2, [r7, #16]
 800131a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001322:	2201      	movs	r2, #1
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	409a      	lsls	r2, r3
 8001328:	0013      	movs	r3, r2
 800132a:	43da      	mvns	r2, r3
 800132c:	693b      	ldr	r3, [r7, #16]
 800132e:	4013      	ands	r3, r2
 8001330:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	091b      	lsrs	r3, r3, #4
 8001338:	2201      	movs	r2, #1
 800133a:	401a      	ands	r2, r3
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	409a      	lsls	r2, r3
 8001340:	0013      	movs	r3, r2
 8001342:	693a      	ldr	r2, [r7, #16]
 8001344:	4313      	orrs	r3, r2
 8001346:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	693a      	ldr	r2, [r7, #16]
 800134c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	68db      	ldr	r3, [r3, #12]
 8001352:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	005b      	lsls	r3, r3, #1
 8001358:	2203      	movs	r2, #3
 800135a:	409a      	lsls	r2, r3
 800135c:	0013      	movs	r3, r2
 800135e:	43da      	mvns	r2, r3
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	4013      	ands	r3, r2
 8001364:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	689a      	ldr	r2, [r3, #8]
 800136a:	697b      	ldr	r3, [r7, #20]
 800136c:	005b      	lsls	r3, r3, #1
 800136e:	409a      	lsls	r2, r3
 8001370:	0013      	movs	r3, r2
 8001372:	693a      	ldr	r2, [r7, #16]
 8001374:	4313      	orrs	r3, r2
 8001376:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	693a      	ldr	r2, [r7, #16]
 800137c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	2b02      	cmp	r3, #2
 8001384:	d003      	beq.n	800138e <HAL_GPIO_Init+0xea>
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	2b12      	cmp	r3, #18
 800138c:	d123      	bne.n	80013d6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	08da      	lsrs	r2, r3, #3
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	3208      	adds	r2, #8
 8001396:	0092      	lsls	r2, r2, #2
 8001398:	58d3      	ldr	r3, [r2, r3]
 800139a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	2207      	movs	r2, #7
 80013a0:	4013      	ands	r3, r2
 80013a2:	009b      	lsls	r3, r3, #2
 80013a4:	220f      	movs	r2, #15
 80013a6:	409a      	lsls	r2, r3
 80013a8:	0013      	movs	r3, r2
 80013aa:	43da      	mvns	r2, r3
 80013ac:	693b      	ldr	r3, [r7, #16]
 80013ae:	4013      	ands	r3, r2
 80013b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	691a      	ldr	r2, [r3, #16]
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	2107      	movs	r1, #7
 80013ba:	400b      	ands	r3, r1
 80013bc:	009b      	lsls	r3, r3, #2
 80013be:	409a      	lsls	r2, r3
 80013c0:	0013      	movs	r3, r2
 80013c2:	693a      	ldr	r2, [r7, #16]
 80013c4:	4313      	orrs	r3, r2
 80013c6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	08da      	lsrs	r2, r3, #3
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	3208      	adds	r2, #8
 80013d0:	0092      	lsls	r2, r2, #2
 80013d2:	6939      	ldr	r1, [r7, #16]
 80013d4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	005b      	lsls	r3, r3, #1
 80013e0:	2203      	movs	r2, #3
 80013e2:	409a      	lsls	r2, r3
 80013e4:	0013      	movs	r3, r2
 80013e6:	43da      	mvns	r2, r3
 80013e8:	693b      	ldr	r3, [r7, #16]
 80013ea:	4013      	ands	r3, r2
 80013ec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	2203      	movs	r2, #3
 80013f4:	401a      	ands	r2, r3
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	005b      	lsls	r3, r3, #1
 80013fa:	409a      	lsls	r2, r3
 80013fc:	0013      	movs	r3, r2
 80013fe:	693a      	ldr	r2, [r7, #16]
 8001400:	4313      	orrs	r3, r2
 8001402:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	693a      	ldr	r2, [r7, #16]
 8001408:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	685a      	ldr	r2, [r3, #4]
 800140e:	2380      	movs	r3, #128	; 0x80
 8001410:	055b      	lsls	r3, r3, #21
 8001412:	4013      	ands	r3, r2
 8001414:	d100      	bne.n	8001418 <HAL_GPIO_Init+0x174>
 8001416:	e09a      	b.n	800154e <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001418:	4b54      	ldr	r3, [pc, #336]	; (800156c <HAL_GPIO_Init+0x2c8>)
 800141a:	699a      	ldr	r2, [r3, #24]
 800141c:	4b53      	ldr	r3, [pc, #332]	; (800156c <HAL_GPIO_Init+0x2c8>)
 800141e:	2101      	movs	r1, #1
 8001420:	430a      	orrs	r2, r1
 8001422:	619a      	str	r2, [r3, #24]
 8001424:	4b51      	ldr	r3, [pc, #324]	; (800156c <HAL_GPIO_Init+0x2c8>)
 8001426:	699b      	ldr	r3, [r3, #24]
 8001428:	2201      	movs	r2, #1
 800142a:	4013      	ands	r3, r2
 800142c:	60bb      	str	r3, [r7, #8]
 800142e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001430:	4a4f      	ldr	r2, [pc, #316]	; (8001570 <HAL_GPIO_Init+0x2cc>)
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	089b      	lsrs	r3, r3, #2
 8001436:	3302      	adds	r3, #2
 8001438:	009b      	lsls	r3, r3, #2
 800143a:	589b      	ldr	r3, [r3, r2]
 800143c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	2203      	movs	r2, #3
 8001442:	4013      	ands	r3, r2
 8001444:	009b      	lsls	r3, r3, #2
 8001446:	220f      	movs	r2, #15
 8001448:	409a      	lsls	r2, r3
 800144a:	0013      	movs	r3, r2
 800144c:	43da      	mvns	r2, r3
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	4013      	ands	r3, r2
 8001452:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001454:	687a      	ldr	r2, [r7, #4]
 8001456:	2390      	movs	r3, #144	; 0x90
 8001458:	05db      	lsls	r3, r3, #23
 800145a:	429a      	cmp	r2, r3
 800145c:	d013      	beq.n	8001486 <HAL_GPIO_Init+0x1e2>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	4a44      	ldr	r2, [pc, #272]	; (8001574 <HAL_GPIO_Init+0x2d0>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d00d      	beq.n	8001482 <HAL_GPIO_Init+0x1de>
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	4a43      	ldr	r2, [pc, #268]	; (8001578 <HAL_GPIO_Init+0x2d4>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d007      	beq.n	800147e <HAL_GPIO_Init+0x1da>
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	4a42      	ldr	r2, [pc, #264]	; (800157c <HAL_GPIO_Init+0x2d8>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d101      	bne.n	800147a <HAL_GPIO_Init+0x1d6>
 8001476:	2303      	movs	r3, #3
 8001478:	e006      	b.n	8001488 <HAL_GPIO_Init+0x1e4>
 800147a:	2305      	movs	r3, #5
 800147c:	e004      	b.n	8001488 <HAL_GPIO_Init+0x1e4>
 800147e:	2302      	movs	r3, #2
 8001480:	e002      	b.n	8001488 <HAL_GPIO_Init+0x1e4>
 8001482:	2301      	movs	r3, #1
 8001484:	e000      	b.n	8001488 <HAL_GPIO_Init+0x1e4>
 8001486:	2300      	movs	r3, #0
 8001488:	697a      	ldr	r2, [r7, #20]
 800148a:	2103      	movs	r1, #3
 800148c:	400a      	ands	r2, r1
 800148e:	0092      	lsls	r2, r2, #2
 8001490:	4093      	lsls	r3, r2
 8001492:	693a      	ldr	r2, [r7, #16]
 8001494:	4313      	orrs	r3, r2
 8001496:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001498:	4935      	ldr	r1, [pc, #212]	; (8001570 <HAL_GPIO_Init+0x2cc>)
 800149a:	697b      	ldr	r3, [r7, #20]
 800149c:	089b      	lsrs	r3, r3, #2
 800149e:	3302      	adds	r3, #2
 80014a0:	009b      	lsls	r3, r3, #2
 80014a2:	693a      	ldr	r2, [r7, #16]
 80014a4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014a6:	4b36      	ldr	r3, [pc, #216]	; (8001580 <HAL_GPIO_Init+0x2dc>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	43da      	mvns	r2, r3
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	4013      	ands	r3, r2
 80014b4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	685a      	ldr	r2, [r3, #4]
 80014ba:	2380      	movs	r3, #128	; 0x80
 80014bc:	025b      	lsls	r3, r3, #9
 80014be:	4013      	ands	r3, r2
 80014c0:	d003      	beq.n	80014ca <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80014c2:	693a      	ldr	r2, [r7, #16]
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	4313      	orrs	r3, r2
 80014c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80014ca:	4b2d      	ldr	r3, [pc, #180]	; (8001580 <HAL_GPIO_Init+0x2dc>)
 80014cc:	693a      	ldr	r2, [r7, #16]
 80014ce:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80014d0:	4b2b      	ldr	r3, [pc, #172]	; (8001580 <HAL_GPIO_Init+0x2dc>)
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	43da      	mvns	r2, r3
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	4013      	ands	r3, r2
 80014de:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	685a      	ldr	r2, [r3, #4]
 80014e4:	2380      	movs	r3, #128	; 0x80
 80014e6:	029b      	lsls	r3, r3, #10
 80014e8:	4013      	ands	r3, r2
 80014ea:	d003      	beq.n	80014f4 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 80014ec:	693a      	ldr	r2, [r7, #16]
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	4313      	orrs	r3, r2
 80014f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80014f4:	4b22      	ldr	r3, [pc, #136]	; (8001580 <HAL_GPIO_Init+0x2dc>)
 80014f6:	693a      	ldr	r2, [r7, #16]
 80014f8:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014fa:	4b21      	ldr	r3, [pc, #132]	; (8001580 <HAL_GPIO_Init+0x2dc>)
 80014fc:	689b      	ldr	r3, [r3, #8]
 80014fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	43da      	mvns	r2, r3
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	4013      	ands	r3, r2
 8001508:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	685a      	ldr	r2, [r3, #4]
 800150e:	2380      	movs	r3, #128	; 0x80
 8001510:	035b      	lsls	r3, r3, #13
 8001512:	4013      	ands	r3, r2
 8001514:	d003      	beq.n	800151e <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8001516:	693a      	ldr	r2, [r7, #16]
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	4313      	orrs	r3, r2
 800151c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800151e:	4b18      	ldr	r3, [pc, #96]	; (8001580 <HAL_GPIO_Init+0x2dc>)
 8001520:	693a      	ldr	r2, [r7, #16]
 8001522:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001524:	4b16      	ldr	r3, [pc, #88]	; (8001580 <HAL_GPIO_Init+0x2dc>)
 8001526:	68db      	ldr	r3, [r3, #12]
 8001528:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	43da      	mvns	r2, r3
 800152e:	693b      	ldr	r3, [r7, #16]
 8001530:	4013      	ands	r3, r2
 8001532:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	685a      	ldr	r2, [r3, #4]
 8001538:	2380      	movs	r3, #128	; 0x80
 800153a:	039b      	lsls	r3, r3, #14
 800153c:	4013      	ands	r3, r2
 800153e:	d003      	beq.n	8001548 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001540:	693a      	ldr	r2, [r7, #16]
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	4313      	orrs	r3, r2
 8001546:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001548:	4b0d      	ldr	r3, [pc, #52]	; (8001580 <HAL_GPIO_Init+0x2dc>)
 800154a:	693a      	ldr	r2, [r7, #16]
 800154c:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800154e:	697b      	ldr	r3, [r7, #20]
 8001550:	3301      	adds	r3, #1
 8001552:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	681a      	ldr	r2, [r3, #0]
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	40da      	lsrs	r2, r3
 800155c:	1e13      	subs	r3, r2, #0
 800155e:	d000      	beq.n	8001562 <HAL_GPIO_Init+0x2be>
 8001560:	e6a8      	b.n	80012b4 <HAL_GPIO_Init+0x10>
  } 
}
 8001562:	46c0      	nop			; (mov r8, r8)
 8001564:	46bd      	mov	sp, r7
 8001566:	b006      	add	sp, #24
 8001568:	bd80      	pop	{r7, pc}
 800156a:	46c0      	nop			; (mov r8, r8)
 800156c:	40021000 	.word	0x40021000
 8001570:	40010000 	.word	0x40010000
 8001574:	48000400 	.word	0x48000400
 8001578:	48000800 	.word	0x48000800
 800157c:	48000c00 	.word	0x48000c00
 8001580:	40010400 	.word	0x40010400

08001584 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
 800158c:	0008      	movs	r0, r1
 800158e:	0011      	movs	r1, r2
 8001590:	1cbb      	adds	r3, r7, #2
 8001592:	1c02      	adds	r2, r0, #0
 8001594:	801a      	strh	r2, [r3, #0]
 8001596:	1c7b      	adds	r3, r7, #1
 8001598:	1c0a      	adds	r2, r1, #0
 800159a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800159c:	1c7b      	adds	r3, r7, #1
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d004      	beq.n	80015ae <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80015a4:	1cbb      	adds	r3, r7, #2
 80015a6:	881a      	ldrh	r2, [r3, #0]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80015ac:	e003      	b.n	80015b6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80015ae:	1cbb      	adds	r3, r7, #2
 80015b0:	881a      	ldrh	r2, [r3, #0]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80015b6:	46c0      	nop			; (mov r8, r8)
 80015b8:	46bd      	mov	sp, r7
 80015ba:	b002      	add	sp, #8
 80015bc:	bd80      	pop	{r7, pc}

080015be <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80015be:	b580      	push	{r7, lr}
 80015c0:	b084      	sub	sp, #16
 80015c2:	af00      	add	r7, sp, #0
 80015c4:	6078      	str	r0, [r7, #4]
 80015c6:	000a      	movs	r2, r1
 80015c8:	1cbb      	adds	r3, r7, #2
 80015ca:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	695b      	ldr	r3, [r3, #20]
 80015d0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */

  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80015d2:	1cbb      	adds	r3, r7, #2
 80015d4:	881b      	ldrh	r3, [r3, #0]
 80015d6:	68fa      	ldr	r2, [r7, #12]
 80015d8:	4013      	ands	r3, r2
 80015da:	041a      	lsls	r2, r3, #16
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	43db      	mvns	r3, r3
 80015e0:	1cb9      	adds	r1, r7, #2
 80015e2:	8809      	ldrh	r1, [r1, #0]
 80015e4:	400b      	ands	r3, r1
 80015e6:	431a      	orrs	r2, r3
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	619a      	str	r2, [r3, #24]
}
 80015ec:	46c0      	nop			; (mov r8, r8)
 80015ee:	46bd      	mov	sp, r7
 80015f0:	b004      	add	sp, #16
 80015f2:	bd80      	pop	{r7, pc}

080015f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b088      	sub	sp, #32
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d101      	bne.n	8001606 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001602:	2301      	movs	r3, #1
 8001604:	e303      	b.n	8001c0e <HAL_RCC_OscConfig+0x61a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	2201      	movs	r2, #1
 800160c:	4013      	ands	r3, r2
 800160e:	d100      	bne.n	8001612 <HAL_RCC_OscConfig+0x1e>
 8001610:	e08d      	b.n	800172e <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001612:	4bc4      	ldr	r3, [pc, #784]	; (8001924 <HAL_RCC_OscConfig+0x330>)
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	220c      	movs	r2, #12
 8001618:	4013      	ands	r3, r2
 800161a:	2b04      	cmp	r3, #4
 800161c:	d00e      	beq.n	800163c <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800161e:	4bc1      	ldr	r3, [pc, #772]	; (8001924 <HAL_RCC_OscConfig+0x330>)
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	220c      	movs	r2, #12
 8001624:	4013      	ands	r3, r2
 8001626:	2b08      	cmp	r3, #8
 8001628:	d116      	bne.n	8001658 <HAL_RCC_OscConfig+0x64>
 800162a:	4bbe      	ldr	r3, [pc, #760]	; (8001924 <HAL_RCC_OscConfig+0x330>)
 800162c:	685a      	ldr	r2, [r3, #4]
 800162e:	2380      	movs	r3, #128	; 0x80
 8001630:	025b      	lsls	r3, r3, #9
 8001632:	401a      	ands	r2, r3
 8001634:	2380      	movs	r3, #128	; 0x80
 8001636:	025b      	lsls	r3, r3, #9
 8001638:	429a      	cmp	r2, r3
 800163a:	d10d      	bne.n	8001658 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800163c:	4bb9      	ldr	r3, [pc, #740]	; (8001924 <HAL_RCC_OscConfig+0x330>)
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	2380      	movs	r3, #128	; 0x80
 8001642:	029b      	lsls	r3, r3, #10
 8001644:	4013      	ands	r3, r2
 8001646:	d100      	bne.n	800164a <HAL_RCC_OscConfig+0x56>
 8001648:	e070      	b.n	800172c <HAL_RCC_OscConfig+0x138>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d000      	beq.n	8001654 <HAL_RCC_OscConfig+0x60>
 8001652:	e06b      	b.n	800172c <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001654:	2301      	movs	r3, #1
 8001656:	e2da      	b.n	8001c0e <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	2b01      	cmp	r3, #1
 800165e:	d107      	bne.n	8001670 <HAL_RCC_OscConfig+0x7c>
 8001660:	4bb0      	ldr	r3, [pc, #704]	; (8001924 <HAL_RCC_OscConfig+0x330>)
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	4baf      	ldr	r3, [pc, #700]	; (8001924 <HAL_RCC_OscConfig+0x330>)
 8001666:	2180      	movs	r1, #128	; 0x80
 8001668:	0249      	lsls	r1, r1, #9
 800166a:	430a      	orrs	r2, r1
 800166c:	601a      	str	r2, [r3, #0]
 800166e:	e02f      	b.n	80016d0 <HAL_RCC_OscConfig+0xdc>
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d10c      	bne.n	8001692 <HAL_RCC_OscConfig+0x9e>
 8001678:	4baa      	ldr	r3, [pc, #680]	; (8001924 <HAL_RCC_OscConfig+0x330>)
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	4ba9      	ldr	r3, [pc, #676]	; (8001924 <HAL_RCC_OscConfig+0x330>)
 800167e:	49aa      	ldr	r1, [pc, #680]	; (8001928 <HAL_RCC_OscConfig+0x334>)
 8001680:	400a      	ands	r2, r1
 8001682:	601a      	str	r2, [r3, #0]
 8001684:	4ba7      	ldr	r3, [pc, #668]	; (8001924 <HAL_RCC_OscConfig+0x330>)
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	4ba6      	ldr	r3, [pc, #664]	; (8001924 <HAL_RCC_OscConfig+0x330>)
 800168a:	49a8      	ldr	r1, [pc, #672]	; (800192c <HAL_RCC_OscConfig+0x338>)
 800168c:	400a      	ands	r2, r1
 800168e:	601a      	str	r2, [r3, #0]
 8001690:	e01e      	b.n	80016d0 <HAL_RCC_OscConfig+0xdc>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	2b05      	cmp	r3, #5
 8001698:	d10e      	bne.n	80016b8 <HAL_RCC_OscConfig+0xc4>
 800169a:	4ba2      	ldr	r3, [pc, #648]	; (8001924 <HAL_RCC_OscConfig+0x330>)
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	4ba1      	ldr	r3, [pc, #644]	; (8001924 <HAL_RCC_OscConfig+0x330>)
 80016a0:	2180      	movs	r1, #128	; 0x80
 80016a2:	02c9      	lsls	r1, r1, #11
 80016a4:	430a      	orrs	r2, r1
 80016a6:	601a      	str	r2, [r3, #0]
 80016a8:	4b9e      	ldr	r3, [pc, #632]	; (8001924 <HAL_RCC_OscConfig+0x330>)
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	4b9d      	ldr	r3, [pc, #628]	; (8001924 <HAL_RCC_OscConfig+0x330>)
 80016ae:	2180      	movs	r1, #128	; 0x80
 80016b0:	0249      	lsls	r1, r1, #9
 80016b2:	430a      	orrs	r2, r1
 80016b4:	601a      	str	r2, [r3, #0]
 80016b6:	e00b      	b.n	80016d0 <HAL_RCC_OscConfig+0xdc>
 80016b8:	4b9a      	ldr	r3, [pc, #616]	; (8001924 <HAL_RCC_OscConfig+0x330>)
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	4b99      	ldr	r3, [pc, #612]	; (8001924 <HAL_RCC_OscConfig+0x330>)
 80016be:	499a      	ldr	r1, [pc, #616]	; (8001928 <HAL_RCC_OscConfig+0x334>)
 80016c0:	400a      	ands	r2, r1
 80016c2:	601a      	str	r2, [r3, #0]
 80016c4:	4b97      	ldr	r3, [pc, #604]	; (8001924 <HAL_RCC_OscConfig+0x330>)
 80016c6:	681a      	ldr	r2, [r3, #0]
 80016c8:	4b96      	ldr	r3, [pc, #600]	; (8001924 <HAL_RCC_OscConfig+0x330>)
 80016ca:	4998      	ldr	r1, [pc, #608]	; (800192c <HAL_RCC_OscConfig+0x338>)
 80016cc:	400a      	ands	r2, r1
 80016ce:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d014      	beq.n	8001702 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016d8:	f7ff fb02 	bl	8000ce0 <HAL_GetTick>
 80016dc:	0003      	movs	r3, r0
 80016de:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016e0:	e008      	b.n	80016f4 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016e2:	f7ff fafd 	bl	8000ce0 <HAL_GetTick>
 80016e6:	0002      	movs	r2, r0
 80016e8:	69bb      	ldr	r3, [r7, #24]
 80016ea:	1ad3      	subs	r3, r2, r3
 80016ec:	2b64      	cmp	r3, #100	; 0x64
 80016ee:	d901      	bls.n	80016f4 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 80016f0:	2303      	movs	r3, #3
 80016f2:	e28c      	b.n	8001c0e <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016f4:	4b8b      	ldr	r3, [pc, #556]	; (8001924 <HAL_RCC_OscConfig+0x330>)
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	2380      	movs	r3, #128	; 0x80
 80016fa:	029b      	lsls	r3, r3, #10
 80016fc:	4013      	ands	r3, r2
 80016fe:	d0f0      	beq.n	80016e2 <HAL_RCC_OscConfig+0xee>
 8001700:	e015      	b.n	800172e <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001702:	f7ff faed 	bl	8000ce0 <HAL_GetTick>
 8001706:	0003      	movs	r3, r0
 8001708:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800170a:	e008      	b.n	800171e <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800170c:	f7ff fae8 	bl	8000ce0 <HAL_GetTick>
 8001710:	0002      	movs	r2, r0
 8001712:	69bb      	ldr	r3, [r7, #24]
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	2b64      	cmp	r3, #100	; 0x64
 8001718:	d901      	bls.n	800171e <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800171a:	2303      	movs	r3, #3
 800171c:	e277      	b.n	8001c0e <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800171e:	4b81      	ldr	r3, [pc, #516]	; (8001924 <HAL_RCC_OscConfig+0x330>)
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	2380      	movs	r3, #128	; 0x80
 8001724:	029b      	lsls	r3, r3, #10
 8001726:	4013      	ands	r3, r2
 8001728:	d1f0      	bne.n	800170c <HAL_RCC_OscConfig+0x118>
 800172a:	e000      	b.n	800172e <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800172c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	2202      	movs	r2, #2
 8001734:	4013      	ands	r3, r2
 8001736:	d100      	bne.n	800173a <HAL_RCC_OscConfig+0x146>
 8001738:	e069      	b.n	800180e <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800173a:	4b7a      	ldr	r3, [pc, #488]	; (8001924 <HAL_RCC_OscConfig+0x330>)
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	220c      	movs	r2, #12
 8001740:	4013      	ands	r3, r2
 8001742:	d00b      	beq.n	800175c <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001744:	4b77      	ldr	r3, [pc, #476]	; (8001924 <HAL_RCC_OscConfig+0x330>)
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	220c      	movs	r2, #12
 800174a:	4013      	ands	r3, r2
 800174c:	2b08      	cmp	r3, #8
 800174e:	d11c      	bne.n	800178a <HAL_RCC_OscConfig+0x196>
 8001750:	4b74      	ldr	r3, [pc, #464]	; (8001924 <HAL_RCC_OscConfig+0x330>)
 8001752:	685a      	ldr	r2, [r3, #4]
 8001754:	2380      	movs	r3, #128	; 0x80
 8001756:	025b      	lsls	r3, r3, #9
 8001758:	4013      	ands	r3, r2
 800175a:	d116      	bne.n	800178a <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800175c:	4b71      	ldr	r3, [pc, #452]	; (8001924 <HAL_RCC_OscConfig+0x330>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	2202      	movs	r2, #2
 8001762:	4013      	ands	r3, r2
 8001764:	d005      	beq.n	8001772 <HAL_RCC_OscConfig+0x17e>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	68db      	ldr	r3, [r3, #12]
 800176a:	2b01      	cmp	r3, #1
 800176c:	d001      	beq.n	8001772 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800176e:	2301      	movs	r3, #1
 8001770:	e24d      	b.n	8001c0e <HAL_RCC_OscConfig+0x61a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001772:	4b6c      	ldr	r3, [pc, #432]	; (8001924 <HAL_RCC_OscConfig+0x330>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	22f8      	movs	r2, #248	; 0xf8
 8001778:	4393      	bics	r3, r2
 800177a:	0019      	movs	r1, r3
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	691b      	ldr	r3, [r3, #16]
 8001780:	00da      	lsls	r2, r3, #3
 8001782:	4b68      	ldr	r3, [pc, #416]	; (8001924 <HAL_RCC_OscConfig+0x330>)
 8001784:	430a      	orrs	r2, r1
 8001786:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001788:	e041      	b.n	800180e <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	68db      	ldr	r3, [r3, #12]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d024      	beq.n	80017dc <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001792:	4b64      	ldr	r3, [pc, #400]	; (8001924 <HAL_RCC_OscConfig+0x330>)
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	4b63      	ldr	r3, [pc, #396]	; (8001924 <HAL_RCC_OscConfig+0x330>)
 8001798:	2101      	movs	r1, #1
 800179a:	430a      	orrs	r2, r1
 800179c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800179e:	f7ff fa9f 	bl	8000ce0 <HAL_GetTick>
 80017a2:	0003      	movs	r3, r0
 80017a4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017a6:	e008      	b.n	80017ba <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017a8:	f7ff fa9a 	bl	8000ce0 <HAL_GetTick>
 80017ac:	0002      	movs	r2, r0
 80017ae:	69bb      	ldr	r3, [r7, #24]
 80017b0:	1ad3      	subs	r3, r2, r3
 80017b2:	2b02      	cmp	r3, #2
 80017b4:	d901      	bls.n	80017ba <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80017b6:	2303      	movs	r3, #3
 80017b8:	e229      	b.n	8001c0e <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017ba:	4b5a      	ldr	r3, [pc, #360]	; (8001924 <HAL_RCC_OscConfig+0x330>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	2202      	movs	r2, #2
 80017c0:	4013      	ands	r3, r2
 80017c2:	d0f1      	beq.n	80017a8 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017c4:	4b57      	ldr	r3, [pc, #348]	; (8001924 <HAL_RCC_OscConfig+0x330>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	22f8      	movs	r2, #248	; 0xf8
 80017ca:	4393      	bics	r3, r2
 80017cc:	0019      	movs	r1, r3
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	691b      	ldr	r3, [r3, #16]
 80017d2:	00da      	lsls	r2, r3, #3
 80017d4:	4b53      	ldr	r3, [pc, #332]	; (8001924 <HAL_RCC_OscConfig+0x330>)
 80017d6:	430a      	orrs	r2, r1
 80017d8:	601a      	str	r2, [r3, #0]
 80017da:	e018      	b.n	800180e <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017dc:	4b51      	ldr	r3, [pc, #324]	; (8001924 <HAL_RCC_OscConfig+0x330>)
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	4b50      	ldr	r3, [pc, #320]	; (8001924 <HAL_RCC_OscConfig+0x330>)
 80017e2:	2101      	movs	r1, #1
 80017e4:	438a      	bics	r2, r1
 80017e6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017e8:	f7ff fa7a 	bl	8000ce0 <HAL_GetTick>
 80017ec:	0003      	movs	r3, r0
 80017ee:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017f0:	e008      	b.n	8001804 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017f2:	f7ff fa75 	bl	8000ce0 <HAL_GetTick>
 80017f6:	0002      	movs	r2, r0
 80017f8:	69bb      	ldr	r3, [r7, #24]
 80017fa:	1ad3      	subs	r3, r2, r3
 80017fc:	2b02      	cmp	r3, #2
 80017fe:	d901      	bls.n	8001804 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001800:	2303      	movs	r3, #3
 8001802:	e204      	b.n	8001c0e <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001804:	4b47      	ldr	r3, [pc, #284]	; (8001924 <HAL_RCC_OscConfig+0x330>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	2202      	movs	r2, #2
 800180a:	4013      	ands	r3, r2
 800180c:	d1f1      	bne.n	80017f2 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	2208      	movs	r2, #8
 8001814:	4013      	ands	r3, r2
 8001816:	d036      	beq.n	8001886 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	69db      	ldr	r3, [r3, #28]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d019      	beq.n	8001854 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001820:	4b40      	ldr	r3, [pc, #256]	; (8001924 <HAL_RCC_OscConfig+0x330>)
 8001822:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001824:	4b3f      	ldr	r3, [pc, #252]	; (8001924 <HAL_RCC_OscConfig+0x330>)
 8001826:	2101      	movs	r1, #1
 8001828:	430a      	orrs	r2, r1
 800182a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800182c:	f7ff fa58 	bl	8000ce0 <HAL_GetTick>
 8001830:	0003      	movs	r3, r0
 8001832:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001834:	e008      	b.n	8001848 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001836:	f7ff fa53 	bl	8000ce0 <HAL_GetTick>
 800183a:	0002      	movs	r2, r0
 800183c:	69bb      	ldr	r3, [r7, #24]
 800183e:	1ad3      	subs	r3, r2, r3
 8001840:	2b02      	cmp	r3, #2
 8001842:	d901      	bls.n	8001848 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001844:	2303      	movs	r3, #3
 8001846:	e1e2      	b.n	8001c0e <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001848:	4b36      	ldr	r3, [pc, #216]	; (8001924 <HAL_RCC_OscConfig+0x330>)
 800184a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800184c:	2202      	movs	r2, #2
 800184e:	4013      	ands	r3, r2
 8001850:	d0f1      	beq.n	8001836 <HAL_RCC_OscConfig+0x242>
 8001852:	e018      	b.n	8001886 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001854:	4b33      	ldr	r3, [pc, #204]	; (8001924 <HAL_RCC_OscConfig+0x330>)
 8001856:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001858:	4b32      	ldr	r3, [pc, #200]	; (8001924 <HAL_RCC_OscConfig+0x330>)
 800185a:	2101      	movs	r1, #1
 800185c:	438a      	bics	r2, r1
 800185e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001860:	f7ff fa3e 	bl	8000ce0 <HAL_GetTick>
 8001864:	0003      	movs	r3, r0
 8001866:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001868:	e008      	b.n	800187c <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800186a:	f7ff fa39 	bl	8000ce0 <HAL_GetTick>
 800186e:	0002      	movs	r2, r0
 8001870:	69bb      	ldr	r3, [r7, #24]
 8001872:	1ad3      	subs	r3, r2, r3
 8001874:	2b02      	cmp	r3, #2
 8001876:	d901      	bls.n	800187c <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001878:	2303      	movs	r3, #3
 800187a:	e1c8      	b.n	8001c0e <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800187c:	4b29      	ldr	r3, [pc, #164]	; (8001924 <HAL_RCC_OscConfig+0x330>)
 800187e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001880:	2202      	movs	r2, #2
 8001882:	4013      	ands	r3, r2
 8001884:	d1f1      	bne.n	800186a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	2204      	movs	r2, #4
 800188c:	4013      	ands	r3, r2
 800188e:	d100      	bne.n	8001892 <HAL_RCC_OscConfig+0x29e>
 8001890:	e0b6      	b.n	8001a00 <HAL_RCC_OscConfig+0x40c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001892:	231f      	movs	r3, #31
 8001894:	18fb      	adds	r3, r7, r3
 8001896:	2200      	movs	r2, #0
 8001898:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800189a:	4b22      	ldr	r3, [pc, #136]	; (8001924 <HAL_RCC_OscConfig+0x330>)
 800189c:	69da      	ldr	r2, [r3, #28]
 800189e:	2380      	movs	r3, #128	; 0x80
 80018a0:	055b      	lsls	r3, r3, #21
 80018a2:	4013      	ands	r3, r2
 80018a4:	d111      	bne.n	80018ca <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018a6:	4b1f      	ldr	r3, [pc, #124]	; (8001924 <HAL_RCC_OscConfig+0x330>)
 80018a8:	69da      	ldr	r2, [r3, #28]
 80018aa:	4b1e      	ldr	r3, [pc, #120]	; (8001924 <HAL_RCC_OscConfig+0x330>)
 80018ac:	2180      	movs	r1, #128	; 0x80
 80018ae:	0549      	lsls	r1, r1, #21
 80018b0:	430a      	orrs	r2, r1
 80018b2:	61da      	str	r2, [r3, #28]
 80018b4:	4b1b      	ldr	r3, [pc, #108]	; (8001924 <HAL_RCC_OscConfig+0x330>)
 80018b6:	69da      	ldr	r2, [r3, #28]
 80018b8:	2380      	movs	r3, #128	; 0x80
 80018ba:	055b      	lsls	r3, r3, #21
 80018bc:	4013      	ands	r3, r2
 80018be:	60fb      	str	r3, [r7, #12]
 80018c0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80018c2:	231f      	movs	r3, #31
 80018c4:	18fb      	adds	r3, r7, r3
 80018c6:	2201      	movs	r2, #1
 80018c8:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018ca:	4b19      	ldr	r3, [pc, #100]	; (8001930 <HAL_RCC_OscConfig+0x33c>)
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	2380      	movs	r3, #128	; 0x80
 80018d0:	005b      	lsls	r3, r3, #1
 80018d2:	4013      	ands	r3, r2
 80018d4:	d11a      	bne.n	800190c <HAL_RCC_OscConfig+0x318>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018d6:	4b16      	ldr	r3, [pc, #88]	; (8001930 <HAL_RCC_OscConfig+0x33c>)
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	4b15      	ldr	r3, [pc, #84]	; (8001930 <HAL_RCC_OscConfig+0x33c>)
 80018dc:	2180      	movs	r1, #128	; 0x80
 80018de:	0049      	lsls	r1, r1, #1
 80018e0:	430a      	orrs	r2, r1
 80018e2:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018e4:	f7ff f9fc 	bl	8000ce0 <HAL_GetTick>
 80018e8:	0003      	movs	r3, r0
 80018ea:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018ec:	e008      	b.n	8001900 <HAL_RCC_OscConfig+0x30c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018ee:	f7ff f9f7 	bl	8000ce0 <HAL_GetTick>
 80018f2:	0002      	movs	r2, r0
 80018f4:	69bb      	ldr	r3, [r7, #24]
 80018f6:	1ad3      	subs	r3, r2, r3
 80018f8:	2b64      	cmp	r3, #100	; 0x64
 80018fa:	d901      	bls.n	8001900 <HAL_RCC_OscConfig+0x30c>
        {
          return HAL_TIMEOUT;
 80018fc:	2303      	movs	r3, #3
 80018fe:	e186      	b.n	8001c0e <HAL_RCC_OscConfig+0x61a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001900:	4b0b      	ldr	r3, [pc, #44]	; (8001930 <HAL_RCC_OscConfig+0x33c>)
 8001902:	681a      	ldr	r2, [r3, #0]
 8001904:	2380      	movs	r3, #128	; 0x80
 8001906:	005b      	lsls	r3, r3, #1
 8001908:	4013      	ands	r3, r2
 800190a:	d0f0      	beq.n	80018ee <HAL_RCC_OscConfig+0x2fa>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	689b      	ldr	r3, [r3, #8]
 8001910:	2b01      	cmp	r3, #1
 8001912:	d10f      	bne.n	8001934 <HAL_RCC_OscConfig+0x340>
 8001914:	4b03      	ldr	r3, [pc, #12]	; (8001924 <HAL_RCC_OscConfig+0x330>)
 8001916:	6a1a      	ldr	r2, [r3, #32]
 8001918:	4b02      	ldr	r3, [pc, #8]	; (8001924 <HAL_RCC_OscConfig+0x330>)
 800191a:	2101      	movs	r1, #1
 800191c:	430a      	orrs	r2, r1
 800191e:	621a      	str	r2, [r3, #32]
 8001920:	e036      	b.n	8001990 <HAL_RCC_OscConfig+0x39c>
 8001922:	46c0      	nop			; (mov r8, r8)
 8001924:	40021000 	.word	0x40021000
 8001928:	fffeffff 	.word	0xfffeffff
 800192c:	fffbffff 	.word	0xfffbffff
 8001930:	40007000 	.word	0x40007000
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	689b      	ldr	r3, [r3, #8]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d10c      	bne.n	8001956 <HAL_RCC_OscConfig+0x362>
 800193c:	4bb6      	ldr	r3, [pc, #728]	; (8001c18 <HAL_RCC_OscConfig+0x624>)
 800193e:	6a1a      	ldr	r2, [r3, #32]
 8001940:	4bb5      	ldr	r3, [pc, #724]	; (8001c18 <HAL_RCC_OscConfig+0x624>)
 8001942:	2101      	movs	r1, #1
 8001944:	438a      	bics	r2, r1
 8001946:	621a      	str	r2, [r3, #32]
 8001948:	4bb3      	ldr	r3, [pc, #716]	; (8001c18 <HAL_RCC_OscConfig+0x624>)
 800194a:	6a1a      	ldr	r2, [r3, #32]
 800194c:	4bb2      	ldr	r3, [pc, #712]	; (8001c18 <HAL_RCC_OscConfig+0x624>)
 800194e:	2104      	movs	r1, #4
 8001950:	438a      	bics	r2, r1
 8001952:	621a      	str	r2, [r3, #32]
 8001954:	e01c      	b.n	8001990 <HAL_RCC_OscConfig+0x39c>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	2b05      	cmp	r3, #5
 800195c:	d10c      	bne.n	8001978 <HAL_RCC_OscConfig+0x384>
 800195e:	4bae      	ldr	r3, [pc, #696]	; (8001c18 <HAL_RCC_OscConfig+0x624>)
 8001960:	6a1a      	ldr	r2, [r3, #32]
 8001962:	4bad      	ldr	r3, [pc, #692]	; (8001c18 <HAL_RCC_OscConfig+0x624>)
 8001964:	2104      	movs	r1, #4
 8001966:	430a      	orrs	r2, r1
 8001968:	621a      	str	r2, [r3, #32]
 800196a:	4bab      	ldr	r3, [pc, #684]	; (8001c18 <HAL_RCC_OscConfig+0x624>)
 800196c:	6a1a      	ldr	r2, [r3, #32]
 800196e:	4baa      	ldr	r3, [pc, #680]	; (8001c18 <HAL_RCC_OscConfig+0x624>)
 8001970:	2101      	movs	r1, #1
 8001972:	430a      	orrs	r2, r1
 8001974:	621a      	str	r2, [r3, #32]
 8001976:	e00b      	b.n	8001990 <HAL_RCC_OscConfig+0x39c>
 8001978:	4ba7      	ldr	r3, [pc, #668]	; (8001c18 <HAL_RCC_OscConfig+0x624>)
 800197a:	6a1a      	ldr	r2, [r3, #32]
 800197c:	4ba6      	ldr	r3, [pc, #664]	; (8001c18 <HAL_RCC_OscConfig+0x624>)
 800197e:	2101      	movs	r1, #1
 8001980:	438a      	bics	r2, r1
 8001982:	621a      	str	r2, [r3, #32]
 8001984:	4ba4      	ldr	r3, [pc, #656]	; (8001c18 <HAL_RCC_OscConfig+0x624>)
 8001986:	6a1a      	ldr	r2, [r3, #32]
 8001988:	4ba3      	ldr	r3, [pc, #652]	; (8001c18 <HAL_RCC_OscConfig+0x624>)
 800198a:	2104      	movs	r1, #4
 800198c:	438a      	bics	r2, r1
 800198e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d014      	beq.n	80019c2 <HAL_RCC_OscConfig+0x3ce>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001998:	f7ff f9a2 	bl	8000ce0 <HAL_GetTick>
 800199c:	0003      	movs	r3, r0
 800199e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019a0:	e009      	b.n	80019b6 <HAL_RCC_OscConfig+0x3c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019a2:	f7ff f99d 	bl	8000ce0 <HAL_GetTick>
 80019a6:	0002      	movs	r2, r0
 80019a8:	69bb      	ldr	r3, [r7, #24]
 80019aa:	1ad3      	subs	r3, r2, r3
 80019ac:	4a9b      	ldr	r2, [pc, #620]	; (8001c1c <HAL_RCC_OscConfig+0x628>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d901      	bls.n	80019b6 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 80019b2:	2303      	movs	r3, #3
 80019b4:	e12b      	b.n	8001c0e <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019b6:	4b98      	ldr	r3, [pc, #608]	; (8001c18 <HAL_RCC_OscConfig+0x624>)
 80019b8:	6a1b      	ldr	r3, [r3, #32]
 80019ba:	2202      	movs	r2, #2
 80019bc:	4013      	ands	r3, r2
 80019be:	d0f0      	beq.n	80019a2 <HAL_RCC_OscConfig+0x3ae>
 80019c0:	e013      	b.n	80019ea <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019c2:	f7ff f98d 	bl	8000ce0 <HAL_GetTick>
 80019c6:	0003      	movs	r3, r0
 80019c8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019ca:	e009      	b.n	80019e0 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019cc:	f7ff f988 	bl	8000ce0 <HAL_GetTick>
 80019d0:	0002      	movs	r2, r0
 80019d2:	69bb      	ldr	r3, [r7, #24]
 80019d4:	1ad3      	subs	r3, r2, r3
 80019d6:	4a91      	ldr	r2, [pc, #580]	; (8001c1c <HAL_RCC_OscConfig+0x628>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	d901      	bls.n	80019e0 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 80019dc:	2303      	movs	r3, #3
 80019de:	e116      	b.n	8001c0e <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019e0:	4b8d      	ldr	r3, [pc, #564]	; (8001c18 <HAL_RCC_OscConfig+0x624>)
 80019e2:	6a1b      	ldr	r3, [r3, #32]
 80019e4:	2202      	movs	r2, #2
 80019e6:	4013      	ands	r3, r2
 80019e8:	d1f0      	bne.n	80019cc <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80019ea:	231f      	movs	r3, #31
 80019ec:	18fb      	adds	r3, r7, r3
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d105      	bne.n	8001a00 <HAL_RCC_OscConfig+0x40c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019f4:	4b88      	ldr	r3, [pc, #544]	; (8001c18 <HAL_RCC_OscConfig+0x624>)
 80019f6:	69da      	ldr	r2, [r3, #28]
 80019f8:	4b87      	ldr	r3, [pc, #540]	; (8001c18 <HAL_RCC_OscConfig+0x624>)
 80019fa:	4989      	ldr	r1, [pc, #548]	; (8001c20 <HAL_RCC_OscConfig+0x62c>)
 80019fc:	400a      	ands	r2, r1
 80019fe:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	2210      	movs	r2, #16
 8001a06:	4013      	ands	r3, r2
 8001a08:	d063      	beq.n	8001ad2 <HAL_RCC_OscConfig+0x4de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	695b      	ldr	r3, [r3, #20]
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	d12a      	bne.n	8001a68 <HAL_RCC_OscConfig+0x474>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001a12:	4b81      	ldr	r3, [pc, #516]	; (8001c18 <HAL_RCC_OscConfig+0x624>)
 8001a14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a16:	4b80      	ldr	r3, [pc, #512]	; (8001c18 <HAL_RCC_OscConfig+0x624>)
 8001a18:	2104      	movs	r1, #4
 8001a1a:	430a      	orrs	r2, r1
 8001a1c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001a1e:	4b7e      	ldr	r3, [pc, #504]	; (8001c18 <HAL_RCC_OscConfig+0x624>)
 8001a20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a22:	4b7d      	ldr	r3, [pc, #500]	; (8001c18 <HAL_RCC_OscConfig+0x624>)
 8001a24:	2101      	movs	r1, #1
 8001a26:	430a      	orrs	r2, r1
 8001a28:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a2a:	f7ff f959 	bl	8000ce0 <HAL_GetTick>
 8001a2e:	0003      	movs	r3, r0
 8001a30:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001a32:	e008      	b.n	8001a46 <HAL_RCC_OscConfig+0x452>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001a34:	f7ff f954 	bl	8000ce0 <HAL_GetTick>
 8001a38:	0002      	movs	r2, r0
 8001a3a:	69bb      	ldr	r3, [r7, #24]
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	2b02      	cmp	r3, #2
 8001a40:	d901      	bls.n	8001a46 <HAL_RCC_OscConfig+0x452>
        {
          return HAL_TIMEOUT;
 8001a42:	2303      	movs	r3, #3
 8001a44:	e0e3      	b.n	8001c0e <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001a46:	4b74      	ldr	r3, [pc, #464]	; (8001c18 <HAL_RCC_OscConfig+0x624>)
 8001a48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a4a:	2202      	movs	r2, #2
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	d0f1      	beq.n	8001a34 <HAL_RCC_OscConfig+0x440>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001a50:	4b71      	ldr	r3, [pc, #452]	; (8001c18 <HAL_RCC_OscConfig+0x624>)
 8001a52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a54:	22f8      	movs	r2, #248	; 0xf8
 8001a56:	4393      	bics	r3, r2
 8001a58:	0019      	movs	r1, r3
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	699b      	ldr	r3, [r3, #24]
 8001a5e:	00da      	lsls	r2, r3, #3
 8001a60:	4b6d      	ldr	r3, [pc, #436]	; (8001c18 <HAL_RCC_OscConfig+0x624>)
 8001a62:	430a      	orrs	r2, r1
 8001a64:	635a      	str	r2, [r3, #52]	; 0x34
 8001a66:	e034      	b.n	8001ad2 <HAL_RCC_OscConfig+0x4de>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	695b      	ldr	r3, [r3, #20]
 8001a6c:	3305      	adds	r3, #5
 8001a6e:	d111      	bne.n	8001a94 <HAL_RCC_OscConfig+0x4a0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001a70:	4b69      	ldr	r3, [pc, #420]	; (8001c18 <HAL_RCC_OscConfig+0x624>)
 8001a72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a74:	4b68      	ldr	r3, [pc, #416]	; (8001c18 <HAL_RCC_OscConfig+0x624>)
 8001a76:	2104      	movs	r1, #4
 8001a78:	438a      	bics	r2, r1
 8001a7a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001a7c:	4b66      	ldr	r3, [pc, #408]	; (8001c18 <HAL_RCC_OscConfig+0x624>)
 8001a7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a80:	22f8      	movs	r2, #248	; 0xf8
 8001a82:	4393      	bics	r3, r2
 8001a84:	0019      	movs	r1, r3
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	699b      	ldr	r3, [r3, #24]
 8001a8a:	00da      	lsls	r2, r3, #3
 8001a8c:	4b62      	ldr	r3, [pc, #392]	; (8001c18 <HAL_RCC_OscConfig+0x624>)
 8001a8e:	430a      	orrs	r2, r1
 8001a90:	635a      	str	r2, [r3, #52]	; 0x34
 8001a92:	e01e      	b.n	8001ad2 <HAL_RCC_OscConfig+0x4de>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001a94:	4b60      	ldr	r3, [pc, #384]	; (8001c18 <HAL_RCC_OscConfig+0x624>)
 8001a96:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a98:	4b5f      	ldr	r3, [pc, #380]	; (8001c18 <HAL_RCC_OscConfig+0x624>)
 8001a9a:	2104      	movs	r1, #4
 8001a9c:	430a      	orrs	r2, r1
 8001a9e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001aa0:	4b5d      	ldr	r3, [pc, #372]	; (8001c18 <HAL_RCC_OscConfig+0x624>)
 8001aa2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001aa4:	4b5c      	ldr	r3, [pc, #368]	; (8001c18 <HAL_RCC_OscConfig+0x624>)
 8001aa6:	2101      	movs	r1, #1
 8001aa8:	438a      	bics	r2, r1
 8001aaa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aac:	f7ff f918 	bl	8000ce0 <HAL_GetTick>
 8001ab0:	0003      	movs	r3, r0
 8001ab2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001ab4:	e008      	b.n	8001ac8 <HAL_RCC_OscConfig+0x4d4>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001ab6:	f7ff f913 	bl	8000ce0 <HAL_GetTick>
 8001aba:	0002      	movs	r2, r0
 8001abc:	69bb      	ldr	r3, [r7, #24]
 8001abe:	1ad3      	subs	r3, r2, r3
 8001ac0:	2b02      	cmp	r3, #2
 8001ac2:	d901      	bls.n	8001ac8 <HAL_RCC_OscConfig+0x4d4>
        {
          return HAL_TIMEOUT;
 8001ac4:	2303      	movs	r3, #3
 8001ac6:	e0a2      	b.n	8001c0e <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001ac8:	4b53      	ldr	r3, [pc, #332]	; (8001c18 <HAL_RCC_OscConfig+0x624>)
 8001aca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001acc:	2202      	movs	r2, #2
 8001ace:	4013      	ands	r3, r2
 8001ad0:	d1f1      	bne.n	8001ab6 <HAL_RCC_OscConfig+0x4c2>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6a1b      	ldr	r3, [r3, #32]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d100      	bne.n	8001adc <HAL_RCC_OscConfig+0x4e8>
 8001ada:	e097      	b.n	8001c0c <HAL_RCC_OscConfig+0x618>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001adc:	4b4e      	ldr	r3, [pc, #312]	; (8001c18 <HAL_RCC_OscConfig+0x624>)
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	220c      	movs	r2, #12
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	2b08      	cmp	r3, #8
 8001ae6:	d100      	bne.n	8001aea <HAL_RCC_OscConfig+0x4f6>
 8001ae8:	e06b      	b.n	8001bc2 <HAL_RCC_OscConfig+0x5ce>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6a1b      	ldr	r3, [r3, #32]
 8001aee:	2b02      	cmp	r3, #2
 8001af0:	d14c      	bne.n	8001b8c <HAL_RCC_OscConfig+0x598>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001af2:	4b49      	ldr	r3, [pc, #292]	; (8001c18 <HAL_RCC_OscConfig+0x624>)
 8001af4:	681a      	ldr	r2, [r3, #0]
 8001af6:	4b48      	ldr	r3, [pc, #288]	; (8001c18 <HAL_RCC_OscConfig+0x624>)
 8001af8:	494a      	ldr	r1, [pc, #296]	; (8001c24 <HAL_RCC_OscConfig+0x630>)
 8001afa:	400a      	ands	r2, r1
 8001afc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001afe:	f7ff f8ef 	bl	8000ce0 <HAL_GetTick>
 8001b02:	0003      	movs	r3, r0
 8001b04:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b06:	e008      	b.n	8001b1a <HAL_RCC_OscConfig+0x526>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b08:	f7ff f8ea 	bl	8000ce0 <HAL_GetTick>
 8001b0c:	0002      	movs	r2, r0
 8001b0e:	69bb      	ldr	r3, [r7, #24]
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	2b02      	cmp	r3, #2
 8001b14:	d901      	bls.n	8001b1a <HAL_RCC_OscConfig+0x526>
          {
            return HAL_TIMEOUT;
 8001b16:	2303      	movs	r3, #3
 8001b18:	e079      	b.n	8001c0e <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b1a:	4b3f      	ldr	r3, [pc, #252]	; (8001c18 <HAL_RCC_OscConfig+0x624>)
 8001b1c:	681a      	ldr	r2, [r3, #0]
 8001b1e:	2380      	movs	r3, #128	; 0x80
 8001b20:	049b      	lsls	r3, r3, #18
 8001b22:	4013      	ands	r3, r2
 8001b24:	d1f0      	bne.n	8001b08 <HAL_RCC_OscConfig+0x514>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b26:	4b3c      	ldr	r3, [pc, #240]	; (8001c18 <HAL_RCC_OscConfig+0x624>)
 8001b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b2a:	220f      	movs	r2, #15
 8001b2c:	4393      	bics	r3, r2
 8001b2e:	0019      	movs	r1, r3
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b34:	4b38      	ldr	r3, [pc, #224]	; (8001c18 <HAL_RCC_OscConfig+0x624>)
 8001b36:	430a      	orrs	r2, r1
 8001b38:	62da      	str	r2, [r3, #44]	; 0x2c
 8001b3a:	4b37      	ldr	r3, [pc, #220]	; (8001c18 <HAL_RCC_OscConfig+0x624>)
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	4a3a      	ldr	r2, [pc, #232]	; (8001c28 <HAL_RCC_OscConfig+0x634>)
 8001b40:	4013      	ands	r3, r2
 8001b42:	0019      	movs	r1, r3
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b4c:	431a      	orrs	r2, r3
 8001b4e:	4b32      	ldr	r3, [pc, #200]	; (8001c18 <HAL_RCC_OscConfig+0x624>)
 8001b50:	430a      	orrs	r2, r1
 8001b52:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b54:	4b30      	ldr	r3, [pc, #192]	; (8001c18 <HAL_RCC_OscConfig+0x624>)
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	4b2f      	ldr	r3, [pc, #188]	; (8001c18 <HAL_RCC_OscConfig+0x624>)
 8001b5a:	2180      	movs	r1, #128	; 0x80
 8001b5c:	0449      	lsls	r1, r1, #17
 8001b5e:	430a      	orrs	r2, r1
 8001b60:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b62:	f7ff f8bd 	bl	8000ce0 <HAL_GetTick>
 8001b66:	0003      	movs	r3, r0
 8001b68:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b6a:	e008      	b.n	8001b7e <HAL_RCC_OscConfig+0x58a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b6c:	f7ff f8b8 	bl	8000ce0 <HAL_GetTick>
 8001b70:	0002      	movs	r2, r0
 8001b72:	69bb      	ldr	r3, [r7, #24]
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	2b02      	cmp	r3, #2
 8001b78:	d901      	bls.n	8001b7e <HAL_RCC_OscConfig+0x58a>
          {
            return HAL_TIMEOUT;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	e047      	b.n	8001c0e <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b7e:	4b26      	ldr	r3, [pc, #152]	; (8001c18 <HAL_RCC_OscConfig+0x624>)
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	2380      	movs	r3, #128	; 0x80
 8001b84:	049b      	lsls	r3, r3, #18
 8001b86:	4013      	ands	r3, r2
 8001b88:	d0f0      	beq.n	8001b6c <HAL_RCC_OscConfig+0x578>
 8001b8a:	e03f      	b.n	8001c0c <HAL_RCC_OscConfig+0x618>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b8c:	4b22      	ldr	r3, [pc, #136]	; (8001c18 <HAL_RCC_OscConfig+0x624>)
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	4b21      	ldr	r3, [pc, #132]	; (8001c18 <HAL_RCC_OscConfig+0x624>)
 8001b92:	4924      	ldr	r1, [pc, #144]	; (8001c24 <HAL_RCC_OscConfig+0x630>)
 8001b94:	400a      	ands	r2, r1
 8001b96:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b98:	f7ff f8a2 	bl	8000ce0 <HAL_GetTick>
 8001b9c:	0003      	movs	r3, r0
 8001b9e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ba0:	e008      	b.n	8001bb4 <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ba2:	f7ff f89d 	bl	8000ce0 <HAL_GetTick>
 8001ba6:	0002      	movs	r2, r0
 8001ba8:	69bb      	ldr	r3, [r7, #24]
 8001baa:	1ad3      	subs	r3, r2, r3
 8001bac:	2b02      	cmp	r3, #2
 8001bae:	d901      	bls.n	8001bb4 <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 8001bb0:	2303      	movs	r3, #3
 8001bb2:	e02c      	b.n	8001c0e <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bb4:	4b18      	ldr	r3, [pc, #96]	; (8001c18 <HAL_RCC_OscConfig+0x624>)
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	2380      	movs	r3, #128	; 0x80
 8001bba:	049b      	lsls	r3, r3, #18
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	d1f0      	bne.n	8001ba2 <HAL_RCC_OscConfig+0x5ae>
 8001bc0:	e024      	b.n	8001c0c <HAL_RCC_OscConfig+0x618>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6a1b      	ldr	r3, [r3, #32]
 8001bc6:	2b01      	cmp	r3, #1
 8001bc8:	d101      	bne.n	8001bce <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e01f      	b.n	8001c0e <HAL_RCC_OscConfig+0x61a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001bce:	4b12      	ldr	r3, [pc, #72]	; (8001c18 <HAL_RCC_OscConfig+0x624>)
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001bd4:	4b10      	ldr	r3, [pc, #64]	; (8001c18 <HAL_RCC_OscConfig+0x624>)
 8001bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bd8:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bda:	697a      	ldr	r2, [r7, #20]
 8001bdc:	2380      	movs	r3, #128	; 0x80
 8001bde:	025b      	lsls	r3, r3, #9
 8001be0:	401a      	ands	r2, r3
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001be6:	429a      	cmp	r2, r3
 8001be8:	d10e      	bne.n	8001c08 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	220f      	movs	r2, #15
 8001bee:	401a      	ands	r2, r3
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	d107      	bne.n	8001c08 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001bf8:	697a      	ldr	r2, [r7, #20]
 8001bfa:	23f0      	movs	r3, #240	; 0xf0
 8001bfc:	039b      	lsls	r3, r3, #14
 8001bfe:	401a      	ands	r2, r3
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001c04:	429a      	cmp	r2, r3
 8001c06:	d001      	beq.n	8001c0c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_ERROR;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	e000      	b.n	8001c0e <HAL_RCC_OscConfig+0x61a>
        }
      }
    }
  }

  return HAL_OK;
 8001c0c:	2300      	movs	r3, #0
}
 8001c0e:	0018      	movs	r0, r3
 8001c10:	46bd      	mov	sp, r7
 8001c12:	b008      	add	sp, #32
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	46c0      	nop			; (mov r8, r8)
 8001c18:	40021000 	.word	0x40021000
 8001c1c:	00001388 	.word	0x00001388
 8001c20:	efffffff 	.word	0xefffffff
 8001c24:	feffffff 	.word	0xfeffffff
 8001c28:	ffc2ffff 	.word	0xffc2ffff

08001c2c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b084      	sub	sp, #16
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
 8001c34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d101      	bne.n	8001c40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	e0b3      	b.n	8001da8 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c40:	4b5b      	ldr	r3, [pc, #364]	; (8001db0 <HAL_RCC_ClockConfig+0x184>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	2201      	movs	r2, #1
 8001c46:	4013      	ands	r3, r2
 8001c48:	683a      	ldr	r2, [r7, #0]
 8001c4a:	429a      	cmp	r2, r3
 8001c4c:	d911      	bls.n	8001c72 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c4e:	4b58      	ldr	r3, [pc, #352]	; (8001db0 <HAL_RCC_ClockConfig+0x184>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	2201      	movs	r2, #1
 8001c54:	4393      	bics	r3, r2
 8001c56:	0019      	movs	r1, r3
 8001c58:	4b55      	ldr	r3, [pc, #340]	; (8001db0 <HAL_RCC_ClockConfig+0x184>)
 8001c5a:	683a      	ldr	r2, [r7, #0]
 8001c5c:	430a      	orrs	r2, r1
 8001c5e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c60:	4b53      	ldr	r3, [pc, #332]	; (8001db0 <HAL_RCC_ClockConfig+0x184>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	2201      	movs	r2, #1
 8001c66:	4013      	ands	r3, r2
 8001c68:	683a      	ldr	r2, [r7, #0]
 8001c6a:	429a      	cmp	r2, r3
 8001c6c:	d001      	beq.n	8001c72 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e09a      	b.n	8001da8 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	2202      	movs	r2, #2
 8001c78:	4013      	ands	r3, r2
 8001c7a:	d015      	beq.n	8001ca8 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	2204      	movs	r2, #4
 8001c82:	4013      	ands	r3, r2
 8001c84:	d006      	beq.n	8001c94 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001c86:	4b4b      	ldr	r3, [pc, #300]	; (8001db4 <HAL_RCC_ClockConfig+0x188>)
 8001c88:	685a      	ldr	r2, [r3, #4]
 8001c8a:	4b4a      	ldr	r3, [pc, #296]	; (8001db4 <HAL_RCC_ClockConfig+0x188>)
 8001c8c:	21e0      	movs	r1, #224	; 0xe0
 8001c8e:	00c9      	lsls	r1, r1, #3
 8001c90:	430a      	orrs	r2, r1
 8001c92:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c94:	4b47      	ldr	r3, [pc, #284]	; (8001db4 <HAL_RCC_ClockConfig+0x188>)
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	22f0      	movs	r2, #240	; 0xf0
 8001c9a:	4393      	bics	r3, r2
 8001c9c:	0019      	movs	r1, r3
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	689a      	ldr	r2, [r3, #8]
 8001ca2:	4b44      	ldr	r3, [pc, #272]	; (8001db4 <HAL_RCC_ClockConfig+0x188>)
 8001ca4:	430a      	orrs	r2, r1
 8001ca6:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	2201      	movs	r2, #1
 8001cae:	4013      	ands	r3, r2
 8001cb0:	d040      	beq.n	8001d34 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	2b01      	cmp	r3, #1
 8001cb8:	d107      	bne.n	8001cca <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cba:	4b3e      	ldr	r3, [pc, #248]	; (8001db4 <HAL_RCC_ClockConfig+0x188>)
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	2380      	movs	r3, #128	; 0x80
 8001cc0:	029b      	lsls	r3, r3, #10
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	d114      	bne.n	8001cf0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e06e      	b.n	8001da8 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	2b02      	cmp	r3, #2
 8001cd0:	d107      	bne.n	8001ce2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cd2:	4b38      	ldr	r3, [pc, #224]	; (8001db4 <HAL_RCC_ClockConfig+0x188>)
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	2380      	movs	r3, #128	; 0x80
 8001cd8:	049b      	lsls	r3, r3, #18
 8001cda:	4013      	ands	r3, r2
 8001cdc:	d108      	bne.n	8001cf0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e062      	b.n	8001da8 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ce2:	4b34      	ldr	r3, [pc, #208]	; (8001db4 <HAL_RCC_ClockConfig+0x188>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	2202      	movs	r2, #2
 8001ce8:	4013      	ands	r3, r2
 8001cea:	d101      	bne.n	8001cf0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001cec:	2301      	movs	r3, #1
 8001cee:	e05b      	b.n	8001da8 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cf0:	4b30      	ldr	r3, [pc, #192]	; (8001db4 <HAL_RCC_ClockConfig+0x188>)
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	2203      	movs	r2, #3
 8001cf6:	4393      	bics	r3, r2
 8001cf8:	0019      	movs	r1, r3
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	685a      	ldr	r2, [r3, #4]
 8001cfe:	4b2d      	ldr	r3, [pc, #180]	; (8001db4 <HAL_RCC_ClockConfig+0x188>)
 8001d00:	430a      	orrs	r2, r1
 8001d02:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d04:	f7fe ffec 	bl	8000ce0 <HAL_GetTick>
 8001d08:	0003      	movs	r3, r0
 8001d0a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d0c:	e009      	b.n	8001d22 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d0e:	f7fe ffe7 	bl	8000ce0 <HAL_GetTick>
 8001d12:	0002      	movs	r2, r0
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	1ad3      	subs	r3, r2, r3
 8001d18:	4a27      	ldr	r2, [pc, #156]	; (8001db8 <HAL_RCC_ClockConfig+0x18c>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d901      	bls.n	8001d22 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001d1e:	2303      	movs	r3, #3
 8001d20:	e042      	b.n	8001da8 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d22:	4b24      	ldr	r3, [pc, #144]	; (8001db4 <HAL_RCC_ClockConfig+0x188>)
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	220c      	movs	r2, #12
 8001d28:	401a      	ands	r2, r3
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	009b      	lsls	r3, r3, #2
 8001d30:	429a      	cmp	r2, r3
 8001d32:	d1ec      	bne.n	8001d0e <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d34:	4b1e      	ldr	r3, [pc, #120]	; (8001db0 <HAL_RCC_ClockConfig+0x184>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	2201      	movs	r2, #1
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	683a      	ldr	r2, [r7, #0]
 8001d3e:	429a      	cmp	r2, r3
 8001d40:	d211      	bcs.n	8001d66 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d42:	4b1b      	ldr	r3, [pc, #108]	; (8001db0 <HAL_RCC_ClockConfig+0x184>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	2201      	movs	r2, #1
 8001d48:	4393      	bics	r3, r2
 8001d4a:	0019      	movs	r1, r3
 8001d4c:	4b18      	ldr	r3, [pc, #96]	; (8001db0 <HAL_RCC_ClockConfig+0x184>)
 8001d4e:	683a      	ldr	r2, [r7, #0]
 8001d50:	430a      	orrs	r2, r1
 8001d52:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d54:	4b16      	ldr	r3, [pc, #88]	; (8001db0 <HAL_RCC_ClockConfig+0x184>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	2201      	movs	r2, #1
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	683a      	ldr	r2, [r7, #0]
 8001d5e:	429a      	cmp	r2, r3
 8001d60:	d001      	beq.n	8001d66 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	e020      	b.n	8001da8 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	2204      	movs	r2, #4
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	d009      	beq.n	8001d84 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001d70:	4b10      	ldr	r3, [pc, #64]	; (8001db4 <HAL_RCC_ClockConfig+0x188>)
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	4a11      	ldr	r2, [pc, #68]	; (8001dbc <HAL_RCC_ClockConfig+0x190>)
 8001d76:	4013      	ands	r3, r2
 8001d78:	0019      	movs	r1, r3
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	68da      	ldr	r2, [r3, #12]
 8001d7e:	4b0d      	ldr	r3, [pc, #52]	; (8001db4 <HAL_RCC_ClockConfig+0x188>)
 8001d80:	430a      	orrs	r2, r1
 8001d82:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001d84:	f000 f820 	bl	8001dc8 <HAL_RCC_GetSysClockFreq>
 8001d88:	0001      	movs	r1, r0
 8001d8a:	4b0a      	ldr	r3, [pc, #40]	; (8001db4 <HAL_RCC_ClockConfig+0x188>)
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	091b      	lsrs	r3, r3, #4
 8001d90:	220f      	movs	r2, #15
 8001d92:	4013      	ands	r3, r2
 8001d94:	4a0a      	ldr	r2, [pc, #40]	; (8001dc0 <HAL_RCC_ClockConfig+0x194>)
 8001d96:	5cd3      	ldrb	r3, [r2, r3]
 8001d98:	000a      	movs	r2, r1
 8001d9a:	40da      	lsrs	r2, r3
 8001d9c:	4b09      	ldr	r3, [pc, #36]	; (8001dc4 <HAL_RCC_ClockConfig+0x198>)
 8001d9e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001da0:	2000      	movs	r0, #0
 8001da2:	f7fe ff57 	bl	8000c54 <HAL_InitTick>
  
  return HAL_OK;
 8001da6:	2300      	movs	r3, #0
}
 8001da8:	0018      	movs	r0, r3
 8001daa:	46bd      	mov	sp, r7
 8001dac:	b004      	add	sp, #16
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	40022000 	.word	0x40022000
 8001db4:	40021000 	.word	0x40021000
 8001db8:	00001388 	.word	0x00001388
 8001dbc:	fffff8ff 	.word	0xfffff8ff
 8001dc0:	08003244 	.word	0x08003244
 8001dc4:	20000004 	.word	0x20000004

08001dc8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001dc8:	b590      	push	{r4, r7, lr}
 8001dca:	b08f      	sub	sp, #60	; 0x3c
 8001dcc:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001dce:	2314      	movs	r3, #20
 8001dd0:	18fb      	adds	r3, r7, r3
 8001dd2:	4a2b      	ldr	r2, [pc, #172]	; (8001e80 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001dd4:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001dd6:	c313      	stmia	r3!, {r0, r1, r4}
 8001dd8:	6812      	ldr	r2, [r2, #0]
 8001dda:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001ddc:	1d3b      	adds	r3, r7, #4
 8001dde:	4a29      	ldr	r2, [pc, #164]	; (8001e84 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001de0:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001de2:	c313      	stmia	r3!, {r0, r1, r4}
 8001de4:	6812      	ldr	r2, [r2, #0]
 8001de6:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001de8:	2300      	movs	r3, #0
 8001dea:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001dec:	2300      	movs	r3, #0
 8001dee:	62bb      	str	r3, [r7, #40]	; 0x28
 8001df0:	2300      	movs	r3, #0
 8001df2:	637b      	str	r3, [r7, #52]	; 0x34
 8001df4:	2300      	movs	r3, #0
 8001df6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001dfc:	4b22      	ldr	r3, [pc, #136]	; (8001e88 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e04:	220c      	movs	r2, #12
 8001e06:	4013      	ands	r3, r2
 8001e08:	2b04      	cmp	r3, #4
 8001e0a:	d002      	beq.n	8001e12 <HAL_RCC_GetSysClockFreq+0x4a>
 8001e0c:	2b08      	cmp	r3, #8
 8001e0e:	d003      	beq.n	8001e18 <HAL_RCC_GetSysClockFreq+0x50>
 8001e10:	e02d      	b.n	8001e6e <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e12:	4b1e      	ldr	r3, [pc, #120]	; (8001e8c <HAL_RCC_GetSysClockFreq+0xc4>)
 8001e14:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001e16:	e02d      	b.n	8001e74 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e1a:	0c9b      	lsrs	r3, r3, #18
 8001e1c:	220f      	movs	r2, #15
 8001e1e:	4013      	ands	r3, r2
 8001e20:	2214      	movs	r2, #20
 8001e22:	18ba      	adds	r2, r7, r2
 8001e24:	5cd3      	ldrb	r3, [r2, r3]
 8001e26:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001e28:	4b17      	ldr	r3, [pc, #92]	; (8001e88 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e2c:	220f      	movs	r2, #15
 8001e2e:	4013      	ands	r3, r2
 8001e30:	1d3a      	adds	r2, r7, #4
 8001e32:	5cd3      	ldrb	r3, [r2, r3]
 8001e34:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001e36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e38:	2380      	movs	r3, #128	; 0x80
 8001e3a:	025b      	lsls	r3, r3, #9
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	d009      	beq.n	8001e54 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001e40:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001e42:	4812      	ldr	r0, [pc, #72]	; (8001e8c <HAL_RCC_GetSysClockFreq+0xc4>)
 8001e44:	f7fe f960 	bl	8000108 <__udivsi3>
 8001e48:	0003      	movs	r3, r0
 8001e4a:	001a      	movs	r2, r3
 8001e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e4e:	4353      	muls	r3, r2
 8001e50:	637b      	str	r3, [r7, #52]	; 0x34
 8001e52:	e009      	b.n	8001e68 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001e54:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001e56:	000a      	movs	r2, r1
 8001e58:	0152      	lsls	r2, r2, #5
 8001e5a:	1a52      	subs	r2, r2, r1
 8001e5c:	0193      	lsls	r3, r2, #6
 8001e5e:	1a9b      	subs	r3, r3, r2
 8001e60:	00db      	lsls	r3, r3, #3
 8001e62:	185b      	adds	r3, r3, r1
 8001e64:	021b      	lsls	r3, r3, #8
 8001e66:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8001e68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e6a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001e6c:	e002      	b.n	8001e74 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001e6e:	4b07      	ldr	r3, [pc, #28]	; (8001e8c <HAL_RCC_GetSysClockFreq+0xc4>)
 8001e70:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001e72:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001e76:	0018      	movs	r0, r3
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	b00f      	add	sp, #60	; 0x3c
 8001e7c:	bd90      	pop	{r4, r7, pc}
 8001e7e:	46c0      	nop			; (mov r8, r8)
 8001e80:	0800320c 	.word	0x0800320c
 8001e84:	0800321c 	.word	0x0800321c
 8001e88:	40021000 	.word	0x40021000
 8001e8c:	007a1200 	.word	0x007a1200

08001e90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e94:	4b02      	ldr	r3, [pc, #8]	; (8001ea0 <HAL_RCC_GetHCLKFreq+0x10>)
 8001e96:	681b      	ldr	r3, [r3, #0]
}
 8001e98:	0018      	movs	r0, r3
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	46c0      	nop			; (mov r8, r8)
 8001ea0:	20000004 	.word	0x20000004

08001ea4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001ea8:	f7ff fff2 	bl	8001e90 <HAL_RCC_GetHCLKFreq>
 8001eac:	0001      	movs	r1, r0
 8001eae:	4b06      	ldr	r3, [pc, #24]	; (8001ec8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	0a1b      	lsrs	r3, r3, #8
 8001eb4:	2207      	movs	r2, #7
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	4a04      	ldr	r2, [pc, #16]	; (8001ecc <HAL_RCC_GetPCLK1Freq+0x28>)
 8001eba:	5cd3      	ldrb	r3, [r2, r3]
 8001ebc:	40d9      	lsrs	r1, r3
 8001ebe:	000b      	movs	r3, r1
}    
 8001ec0:	0018      	movs	r0, r3
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	46c0      	nop			; (mov r8, r8)
 8001ec8:	40021000 	.word	0x40021000
 8001ecc:	08003254 	.word	0x08003254

08001ed0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b086      	sub	sp, #24
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001edc:	2300      	movs	r3, #0
 8001ede:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	2380      	movs	r3, #128	; 0x80
 8001ee6:	025b      	lsls	r3, r3, #9
 8001ee8:	4013      	ands	r3, r2
 8001eea:	d100      	bne.n	8001eee <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001eec:	e08f      	b.n	800200e <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001eee:	2317      	movs	r3, #23
 8001ef0:	18fb      	adds	r3, r7, r3
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ef6:	4b57      	ldr	r3, [pc, #348]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001ef8:	69da      	ldr	r2, [r3, #28]
 8001efa:	2380      	movs	r3, #128	; 0x80
 8001efc:	055b      	lsls	r3, r3, #21
 8001efe:	4013      	ands	r3, r2
 8001f00:	d111      	bne.n	8001f26 <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001f02:	4b54      	ldr	r3, [pc, #336]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001f04:	69da      	ldr	r2, [r3, #28]
 8001f06:	4b53      	ldr	r3, [pc, #332]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001f08:	2180      	movs	r1, #128	; 0x80
 8001f0a:	0549      	lsls	r1, r1, #21
 8001f0c:	430a      	orrs	r2, r1
 8001f0e:	61da      	str	r2, [r3, #28]
 8001f10:	4b50      	ldr	r3, [pc, #320]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001f12:	69da      	ldr	r2, [r3, #28]
 8001f14:	2380      	movs	r3, #128	; 0x80
 8001f16:	055b      	lsls	r3, r3, #21
 8001f18:	4013      	ands	r3, r2
 8001f1a:	60bb      	str	r3, [r7, #8]
 8001f1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f1e:	2317      	movs	r3, #23
 8001f20:	18fb      	adds	r3, r7, r3
 8001f22:	2201      	movs	r2, #1
 8001f24:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f26:	4b4c      	ldr	r3, [pc, #304]	; (8002058 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001f28:	681a      	ldr	r2, [r3, #0]
 8001f2a:	2380      	movs	r3, #128	; 0x80
 8001f2c:	005b      	lsls	r3, r3, #1
 8001f2e:	4013      	ands	r3, r2
 8001f30:	d11a      	bne.n	8001f68 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f32:	4b49      	ldr	r3, [pc, #292]	; (8002058 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	4b48      	ldr	r3, [pc, #288]	; (8002058 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001f38:	2180      	movs	r1, #128	; 0x80
 8001f3a:	0049      	lsls	r1, r1, #1
 8001f3c:	430a      	orrs	r2, r1
 8001f3e:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f40:	f7fe fece 	bl	8000ce0 <HAL_GetTick>
 8001f44:	0003      	movs	r3, r0
 8001f46:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f48:	e008      	b.n	8001f5c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f4a:	f7fe fec9 	bl	8000ce0 <HAL_GetTick>
 8001f4e:	0002      	movs	r2, r0
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	1ad3      	subs	r3, r2, r3
 8001f54:	2b64      	cmp	r3, #100	; 0x64
 8001f56:	d901      	bls.n	8001f5c <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 8001f58:	2303      	movs	r3, #3
 8001f5a:	e077      	b.n	800204c <HAL_RCCEx_PeriphCLKConfig+0x17c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f5c:	4b3e      	ldr	r3, [pc, #248]	; (8002058 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	2380      	movs	r3, #128	; 0x80
 8001f62:	005b      	lsls	r3, r3, #1
 8001f64:	4013      	ands	r3, r2
 8001f66:	d0f0      	beq.n	8001f4a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001f68:	4b3a      	ldr	r3, [pc, #232]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001f6a:	6a1a      	ldr	r2, [r3, #32]
 8001f6c:	23c0      	movs	r3, #192	; 0xc0
 8001f6e:	009b      	lsls	r3, r3, #2
 8001f70:	4013      	ands	r3, r2
 8001f72:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d034      	beq.n	8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x114>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	685a      	ldr	r2, [r3, #4]
 8001f7e:	23c0      	movs	r3, #192	; 0xc0
 8001f80:	009b      	lsls	r3, r3, #2
 8001f82:	4013      	ands	r3, r2
 8001f84:	68fa      	ldr	r2, [r7, #12]
 8001f86:	429a      	cmp	r2, r3
 8001f88:	d02c      	beq.n	8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001f8a:	4b32      	ldr	r3, [pc, #200]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001f8c:	6a1b      	ldr	r3, [r3, #32]
 8001f8e:	4a33      	ldr	r2, [pc, #204]	; (800205c <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8001f90:	4013      	ands	r3, r2
 8001f92:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001f94:	4b2f      	ldr	r3, [pc, #188]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001f96:	6a1a      	ldr	r2, [r3, #32]
 8001f98:	4b2e      	ldr	r3, [pc, #184]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001f9a:	2180      	movs	r1, #128	; 0x80
 8001f9c:	0249      	lsls	r1, r1, #9
 8001f9e:	430a      	orrs	r2, r1
 8001fa0:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001fa2:	4b2c      	ldr	r3, [pc, #176]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001fa4:	6a1a      	ldr	r2, [r3, #32]
 8001fa6:	4b2b      	ldr	r3, [pc, #172]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001fa8:	492d      	ldr	r1, [pc, #180]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8001faa:	400a      	ands	r2, r1
 8001fac:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001fae:	4b29      	ldr	r3, [pc, #164]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001fb0:	68fa      	ldr	r2, [r7, #12]
 8001fb2:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	4013      	ands	r3, r2
 8001fba:	d013      	beq.n	8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fbc:	f7fe fe90 	bl	8000ce0 <HAL_GetTick>
 8001fc0:	0003      	movs	r3, r0
 8001fc2:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fc4:	e009      	b.n	8001fda <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fc6:	f7fe fe8b 	bl	8000ce0 <HAL_GetTick>
 8001fca:	0002      	movs	r2, r0
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	1ad3      	subs	r3, r2, r3
 8001fd0:	4a24      	ldr	r2, [pc, #144]	; (8002064 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d901      	bls.n	8001fda <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8001fd6:	2303      	movs	r3, #3
 8001fd8:	e038      	b.n	800204c <HAL_RCCEx_PeriphCLKConfig+0x17c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fda:	4b1e      	ldr	r3, [pc, #120]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001fdc:	6a1b      	ldr	r3, [r3, #32]
 8001fde:	2202      	movs	r2, #2
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	d0f0      	beq.n	8001fc6 <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001fe4:	4b1b      	ldr	r3, [pc, #108]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001fe6:	6a1b      	ldr	r3, [r3, #32]
 8001fe8:	4a1c      	ldr	r2, [pc, #112]	; (800205c <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8001fea:	4013      	ands	r3, r2
 8001fec:	0019      	movs	r1, r3
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	685a      	ldr	r2, [r3, #4]
 8001ff2:	4b18      	ldr	r3, [pc, #96]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001ff4:	430a      	orrs	r2, r1
 8001ff6:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001ff8:	2317      	movs	r3, #23
 8001ffa:	18fb      	adds	r3, r7, r3
 8001ffc:	781b      	ldrb	r3, [r3, #0]
 8001ffe:	2b01      	cmp	r3, #1
 8002000:	d105      	bne.n	800200e <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002002:	4b14      	ldr	r3, [pc, #80]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002004:	69da      	ldr	r2, [r3, #28]
 8002006:	4b13      	ldr	r3, [pc, #76]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002008:	4917      	ldr	r1, [pc, #92]	; (8002068 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 800200a:	400a      	ands	r2, r1
 800200c:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	2201      	movs	r2, #1
 8002014:	4013      	ands	r3, r2
 8002016:	d009      	beq.n	800202c <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002018:	4b0e      	ldr	r3, [pc, #56]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800201a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201c:	2203      	movs	r2, #3
 800201e:	4393      	bics	r3, r2
 8002020:	0019      	movs	r1, r3
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	689a      	ldr	r2, [r3, #8]
 8002026:	4b0b      	ldr	r3, [pc, #44]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002028:	430a      	orrs	r2, r1
 800202a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	2220      	movs	r2, #32
 8002032:	4013      	ands	r3, r2
 8002034:	d009      	beq.n	800204a <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002036:	4b07      	ldr	r3, [pc, #28]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203a:	2210      	movs	r2, #16
 800203c:	4393      	bics	r3, r2
 800203e:	0019      	movs	r1, r3
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	68da      	ldr	r2, [r3, #12]
 8002044:	4b03      	ldr	r3, [pc, #12]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002046:	430a      	orrs	r2, r1
 8002048:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 800204a:	2300      	movs	r3, #0
}
 800204c:	0018      	movs	r0, r3
 800204e:	46bd      	mov	sp, r7
 8002050:	b006      	add	sp, #24
 8002052:	bd80      	pop	{r7, pc}
 8002054:	40021000 	.word	0x40021000
 8002058:	40007000 	.word	0x40007000
 800205c:	fffffcff 	.word	0xfffffcff
 8002060:	fffeffff 	.word	0xfffeffff
 8002064:	00001388 	.word	0x00001388
 8002068:	efffffff 	.word	0xefffffff

0800206c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b082      	sub	sp, #8
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d101      	bne.n	800207e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	e042      	b.n	8002104 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	223d      	movs	r2, #61	; 0x3d
 8002082:	5c9b      	ldrb	r3, [r3, r2]
 8002084:	b2db      	uxtb	r3, r3
 8002086:	2b00      	cmp	r3, #0
 8002088:	d107      	bne.n	800209a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	223c      	movs	r2, #60	; 0x3c
 800208e:	2100      	movs	r1, #0
 8002090:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	0018      	movs	r0, r3
 8002096:	f7fe fcd5 	bl	8000a44 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	223d      	movs	r2, #61	; 0x3d
 800209e:	2102      	movs	r1, #2
 80020a0:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	3304      	adds	r3, #4
 80020aa:	0019      	movs	r1, r3
 80020ac:	0010      	movs	r0, r2
 80020ae:	f000 f983 	bl	80023b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2246      	movs	r2, #70	; 0x46
 80020b6:	2101      	movs	r1, #1
 80020b8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	223e      	movs	r2, #62	; 0x3e
 80020be:	2101      	movs	r1, #1
 80020c0:	5499      	strb	r1, [r3, r2]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	223f      	movs	r2, #63	; 0x3f
 80020c6:	2101      	movs	r1, #1
 80020c8:	5499      	strb	r1, [r3, r2]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2240      	movs	r2, #64	; 0x40
 80020ce:	2101      	movs	r1, #1
 80020d0:	5499      	strb	r1, [r3, r2]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2241      	movs	r2, #65	; 0x41
 80020d6:	2101      	movs	r1, #1
 80020d8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2242      	movs	r2, #66	; 0x42
 80020de:	2101      	movs	r1, #1
 80020e0:	5499      	strb	r1, [r3, r2]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2243      	movs	r2, #67	; 0x43
 80020e6:	2101      	movs	r1, #1
 80020e8:	5499      	strb	r1, [r3, r2]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2244      	movs	r2, #68	; 0x44
 80020ee:	2101      	movs	r1, #1
 80020f0:	5499      	strb	r1, [r3, r2]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2245      	movs	r2, #69	; 0x45
 80020f6:	2101      	movs	r1, #1
 80020f8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	223d      	movs	r2, #61	; 0x3d
 80020fe:	2101      	movs	r1, #1
 8002100:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002102:	2300      	movs	r3, #0
}
 8002104:	0018      	movs	r0, r3
 8002106:	46bd      	mov	sp, r7
 8002108:	b002      	add	sp, #8
 800210a:	bd80      	pop	{r7, pc}

0800210c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b084      	sub	sp, #16
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
 8002114:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d108      	bne.n	800212e <HAL_TIM_PWM_Start+0x22>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	223e      	movs	r2, #62	; 0x3e
 8002120:	5c9b      	ldrb	r3, [r3, r2]
 8002122:	b2db      	uxtb	r3, r3
 8002124:	3b01      	subs	r3, #1
 8002126:	1e5a      	subs	r2, r3, #1
 8002128:	4193      	sbcs	r3, r2
 800212a:	b2db      	uxtb	r3, r3
 800212c:	e01f      	b.n	800216e <HAL_TIM_PWM_Start+0x62>
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	2b04      	cmp	r3, #4
 8002132:	d108      	bne.n	8002146 <HAL_TIM_PWM_Start+0x3a>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	223f      	movs	r2, #63	; 0x3f
 8002138:	5c9b      	ldrb	r3, [r3, r2]
 800213a:	b2db      	uxtb	r3, r3
 800213c:	3b01      	subs	r3, #1
 800213e:	1e5a      	subs	r2, r3, #1
 8002140:	4193      	sbcs	r3, r2
 8002142:	b2db      	uxtb	r3, r3
 8002144:	e013      	b.n	800216e <HAL_TIM_PWM_Start+0x62>
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	2b08      	cmp	r3, #8
 800214a:	d108      	bne.n	800215e <HAL_TIM_PWM_Start+0x52>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2240      	movs	r2, #64	; 0x40
 8002150:	5c9b      	ldrb	r3, [r3, r2]
 8002152:	b2db      	uxtb	r3, r3
 8002154:	3b01      	subs	r3, #1
 8002156:	1e5a      	subs	r2, r3, #1
 8002158:	4193      	sbcs	r3, r2
 800215a:	b2db      	uxtb	r3, r3
 800215c:	e007      	b.n	800216e <HAL_TIM_PWM_Start+0x62>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2241      	movs	r2, #65	; 0x41
 8002162:	5c9b      	ldrb	r3, [r3, r2]
 8002164:	b2db      	uxtb	r3, r3
 8002166:	3b01      	subs	r3, #1
 8002168:	1e5a      	subs	r2, r3, #1
 800216a:	4193      	sbcs	r3, r2
 800216c:	b2db      	uxtb	r3, r3
 800216e:	2b00      	cmp	r3, #0
 8002170:	d001      	beq.n	8002176 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e064      	b.n	8002240 <HAL_TIM_PWM_Start+0x134>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d104      	bne.n	8002186 <HAL_TIM_PWM_Start+0x7a>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	223e      	movs	r2, #62	; 0x3e
 8002180:	2102      	movs	r1, #2
 8002182:	5499      	strb	r1, [r3, r2]
 8002184:	e013      	b.n	80021ae <HAL_TIM_PWM_Start+0xa2>
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	2b04      	cmp	r3, #4
 800218a:	d104      	bne.n	8002196 <HAL_TIM_PWM_Start+0x8a>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	223f      	movs	r2, #63	; 0x3f
 8002190:	2102      	movs	r1, #2
 8002192:	5499      	strb	r1, [r3, r2]
 8002194:	e00b      	b.n	80021ae <HAL_TIM_PWM_Start+0xa2>
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	2b08      	cmp	r3, #8
 800219a:	d104      	bne.n	80021a6 <HAL_TIM_PWM_Start+0x9a>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2240      	movs	r2, #64	; 0x40
 80021a0:	2102      	movs	r1, #2
 80021a2:	5499      	strb	r1, [r3, r2]
 80021a4:	e003      	b.n	80021ae <HAL_TIM_PWM_Start+0xa2>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2241      	movs	r2, #65	; 0x41
 80021aa:	2102      	movs	r1, #2
 80021ac:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	6839      	ldr	r1, [r7, #0]
 80021b4:	2201      	movs	r2, #1
 80021b6:	0018      	movs	r0, r3
 80021b8:	f000 fb4a 	bl	8002850 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a21      	ldr	r2, [pc, #132]	; (8002248 <HAL_TIM_PWM_Start+0x13c>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d009      	beq.n	80021da <HAL_TIM_PWM_Start+0xce>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a20      	ldr	r2, [pc, #128]	; (800224c <HAL_TIM_PWM_Start+0x140>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d004      	beq.n	80021da <HAL_TIM_PWM_Start+0xce>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a1e      	ldr	r2, [pc, #120]	; (8002250 <HAL_TIM_PWM_Start+0x144>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d101      	bne.n	80021de <HAL_TIM_PWM_Start+0xd2>
 80021da:	2301      	movs	r3, #1
 80021dc:	e000      	b.n	80021e0 <HAL_TIM_PWM_Start+0xd4>
 80021de:	2300      	movs	r3, #0
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d008      	beq.n	80021f6 <HAL_TIM_PWM_Start+0xea>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	2180      	movs	r1, #128	; 0x80
 80021f0:	0209      	lsls	r1, r1, #8
 80021f2:	430a      	orrs	r2, r1
 80021f4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a13      	ldr	r2, [pc, #76]	; (8002248 <HAL_TIM_PWM_Start+0x13c>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d004      	beq.n	800220a <HAL_TIM_PWM_Start+0xfe>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a13      	ldr	r2, [pc, #76]	; (8002254 <HAL_TIM_PWM_Start+0x148>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d111      	bne.n	800222e <HAL_TIM_PWM_Start+0x122>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	2207      	movs	r2, #7
 8002212:	4013      	ands	r3, r2
 8002214:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	2b06      	cmp	r3, #6
 800221a:	d010      	beq.n	800223e <HAL_TIM_PWM_Start+0x132>
    {
      __HAL_TIM_ENABLE(htim);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	2101      	movs	r1, #1
 8002228:	430a      	orrs	r2, r1
 800222a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800222c:	e007      	b.n	800223e <HAL_TIM_PWM_Start+0x132>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	2101      	movs	r1, #1
 800223a:	430a      	orrs	r2, r1
 800223c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800223e:	2300      	movs	r3, #0
}
 8002240:	0018      	movs	r0, r3
 8002242:	46bd      	mov	sp, r7
 8002244:	b004      	add	sp, #16
 8002246:	bd80      	pop	{r7, pc}
 8002248:	40012c00 	.word	0x40012c00
 800224c:	40014400 	.word	0x40014400
 8002250:	40014800 	.word	0x40014800
 8002254:	40000400 	.word	0x40000400

08002258 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b084      	sub	sp, #16
 800225c:	af00      	add	r7, sp, #0
 800225e:	60f8      	str	r0, [r7, #12]
 8002260:	60b9      	str	r1, [r7, #8]
 8002262:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	223c      	movs	r2, #60	; 0x3c
 8002268:	5c9b      	ldrb	r3, [r3, r2]
 800226a:	2b01      	cmp	r3, #1
 800226c:	d101      	bne.n	8002272 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800226e:	2302      	movs	r3, #2
 8002270:	e09c      	b.n	80023ac <HAL_TIM_PWM_ConfigChannel+0x154>
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	223c      	movs	r2, #60	; 0x3c
 8002276:	2101      	movs	r1, #1
 8002278:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2b04      	cmp	r3, #4
 800227e:	d029      	beq.n	80022d4 <HAL_TIM_PWM_ConfigChannel+0x7c>
 8002280:	d802      	bhi.n	8002288 <HAL_TIM_PWM_ConfigChannel+0x30>
 8002282:	2b00      	cmp	r3, #0
 8002284:	d005      	beq.n	8002292 <HAL_TIM_PWM_ConfigChannel+0x3a>
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
      break;
    }

    default:
      break;
 8002286:	e08c      	b.n	80023a2 <HAL_TIM_PWM_ConfigChannel+0x14a>
  switch (Channel)
 8002288:	2b08      	cmp	r3, #8
 800228a:	d046      	beq.n	800231a <HAL_TIM_PWM_ConfigChannel+0xc2>
 800228c:	2b0c      	cmp	r3, #12
 800228e:	d065      	beq.n	800235c <HAL_TIM_PWM_ConfigChannel+0x104>
      break;
 8002290:	e087      	b.n	80023a2 <HAL_TIM_PWM_ConfigChannel+0x14a>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	68ba      	ldr	r2, [r7, #8]
 8002298:	0011      	movs	r1, r2
 800229a:	0018      	movs	r0, r3
 800229c:	f000 f8f8 	bl	8002490 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	699a      	ldr	r2, [r3, #24]
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	2108      	movs	r1, #8
 80022ac:	430a      	orrs	r2, r1
 80022ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	699a      	ldr	r2, [r3, #24]
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	2104      	movs	r1, #4
 80022bc:	438a      	bics	r2, r1
 80022be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	6999      	ldr	r1, [r3, #24]
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	691a      	ldr	r2, [r3, #16]
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	430a      	orrs	r2, r1
 80022d0:	619a      	str	r2, [r3, #24]
      break;
 80022d2:	e066      	b.n	80023a2 <HAL_TIM_PWM_ConfigChannel+0x14a>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	68ba      	ldr	r2, [r7, #8]
 80022da:	0011      	movs	r1, r2
 80022dc:	0018      	movs	r0, r3
 80022de:	f000 f955 	bl	800258c <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	699a      	ldr	r2, [r3, #24]
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	2180      	movs	r1, #128	; 0x80
 80022ee:	0109      	lsls	r1, r1, #4
 80022f0:	430a      	orrs	r2, r1
 80022f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	699a      	ldr	r2, [r3, #24]
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	492d      	ldr	r1, [pc, #180]	; (80023b4 <HAL_TIM_PWM_ConfigChannel+0x15c>)
 8002300:	400a      	ands	r2, r1
 8002302:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	6999      	ldr	r1, [r3, #24]
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	691b      	ldr	r3, [r3, #16]
 800230e:	021a      	lsls	r2, r3, #8
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	430a      	orrs	r2, r1
 8002316:	619a      	str	r2, [r3, #24]
      break;
 8002318:	e043      	b.n	80023a2 <HAL_TIM_PWM_ConfigChannel+0x14a>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	68ba      	ldr	r2, [r7, #8]
 8002320:	0011      	movs	r1, r2
 8002322:	0018      	movs	r0, r3
 8002324:	f000 f9b0 	bl	8002688 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	69da      	ldr	r2, [r3, #28]
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	2108      	movs	r1, #8
 8002334:	430a      	orrs	r2, r1
 8002336:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	69da      	ldr	r2, [r3, #28]
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	2104      	movs	r1, #4
 8002344:	438a      	bics	r2, r1
 8002346:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	69d9      	ldr	r1, [r3, #28]
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	691a      	ldr	r2, [r3, #16]
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	430a      	orrs	r2, r1
 8002358:	61da      	str	r2, [r3, #28]
      break;
 800235a:	e022      	b.n	80023a2 <HAL_TIM_PWM_ConfigChannel+0x14a>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	68ba      	ldr	r2, [r7, #8]
 8002362:	0011      	movs	r1, r2
 8002364:	0018      	movs	r0, r3
 8002366:	f000 fa0f 	bl	8002788 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	69da      	ldr	r2, [r3, #28]
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	2180      	movs	r1, #128	; 0x80
 8002376:	0109      	lsls	r1, r1, #4
 8002378:	430a      	orrs	r2, r1
 800237a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	69da      	ldr	r2, [r3, #28]
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	490b      	ldr	r1, [pc, #44]	; (80023b4 <HAL_TIM_PWM_ConfigChannel+0x15c>)
 8002388:	400a      	ands	r2, r1
 800238a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	69d9      	ldr	r1, [r3, #28]
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	691b      	ldr	r3, [r3, #16]
 8002396:	021a      	lsls	r2, r3, #8
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	430a      	orrs	r2, r1
 800239e:	61da      	str	r2, [r3, #28]
      break;
 80023a0:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	223c      	movs	r2, #60	; 0x3c
 80023a6:	2100      	movs	r1, #0
 80023a8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80023aa:	2300      	movs	r3, #0
}
 80023ac:	0018      	movs	r0, r3
 80023ae:	46bd      	mov	sp, r7
 80023b0:	b004      	add	sp, #16
 80023b2:	bd80      	pop	{r7, pc}
 80023b4:	fffffbff 	.word	0xfffffbff

080023b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b084      	sub	sp, #16
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
 80023c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	4a2b      	ldr	r2, [pc, #172]	; (8002478 <TIM_Base_SetConfig+0xc0>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d003      	beq.n	80023d8 <TIM_Base_SetConfig+0x20>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	4a2a      	ldr	r2, [pc, #168]	; (800247c <TIM_Base_SetConfig+0xc4>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d108      	bne.n	80023ea <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	2270      	movs	r2, #112	; 0x70
 80023dc:	4393      	bics	r3, r2
 80023de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	68fa      	ldr	r2, [r7, #12]
 80023e6:	4313      	orrs	r3, r2
 80023e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	4a22      	ldr	r2, [pc, #136]	; (8002478 <TIM_Base_SetConfig+0xc0>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d00f      	beq.n	8002412 <TIM_Base_SetConfig+0x5a>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	4a21      	ldr	r2, [pc, #132]	; (800247c <TIM_Base_SetConfig+0xc4>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d00b      	beq.n	8002412 <TIM_Base_SetConfig+0x5a>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	4a20      	ldr	r2, [pc, #128]	; (8002480 <TIM_Base_SetConfig+0xc8>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d007      	beq.n	8002412 <TIM_Base_SetConfig+0x5a>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	4a1f      	ldr	r2, [pc, #124]	; (8002484 <TIM_Base_SetConfig+0xcc>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d003      	beq.n	8002412 <TIM_Base_SetConfig+0x5a>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	4a1e      	ldr	r2, [pc, #120]	; (8002488 <TIM_Base_SetConfig+0xd0>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d108      	bne.n	8002424 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	4a1d      	ldr	r2, [pc, #116]	; (800248c <TIM_Base_SetConfig+0xd4>)
 8002416:	4013      	ands	r3, r2
 8002418:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	68db      	ldr	r3, [r3, #12]
 800241e:	68fa      	ldr	r2, [r7, #12]
 8002420:	4313      	orrs	r3, r2
 8002422:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	2280      	movs	r2, #128	; 0x80
 8002428:	4393      	bics	r3, r2
 800242a:	001a      	movs	r2, r3
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	695b      	ldr	r3, [r3, #20]
 8002430:	4313      	orrs	r3, r2
 8002432:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	68fa      	ldr	r2, [r7, #12]
 8002438:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	689a      	ldr	r2, [r3, #8]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	4a0a      	ldr	r2, [pc, #40]	; (8002478 <TIM_Base_SetConfig+0xc0>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d007      	beq.n	8002462 <TIM_Base_SetConfig+0xaa>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	4a0b      	ldr	r2, [pc, #44]	; (8002484 <TIM_Base_SetConfig+0xcc>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d003      	beq.n	8002462 <TIM_Base_SetConfig+0xaa>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	4a0a      	ldr	r2, [pc, #40]	; (8002488 <TIM_Base_SetConfig+0xd0>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d103      	bne.n	800246a <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	691a      	ldr	r2, [r3, #16]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2201      	movs	r2, #1
 800246e:	615a      	str	r2, [r3, #20]
}
 8002470:	46c0      	nop			; (mov r8, r8)
 8002472:	46bd      	mov	sp, r7
 8002474:	b004      	add	sp, #16
 8002476:	bd80      	pop	{r7, pc}
 8002478:	40012c00 	.word	0x40012c00
 800247c:	40000400 	.word	0x40000400
 8002480:	40002000 	.word	0x40002000
 8002484:	40014400 	.word	0x40014400
 8002488:	40014800 	.word	0x40014800
 800248c:	fffffcff 	.word	0xfffffcff

08002490 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b086      	sub	sp, #24
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
 8002498:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6a1b      	ldr	r3, [r3, #32]
 800249e:	2201      	movs	r2, #1
 80024a0:	4393      	bics	r3, r2
 80024a2:	001a      	movs	r2, r3
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6a1b      	ldr	r3, [r3, #32]
 80024ac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	699b      	ldr	r3, [r3, #24]
 80024b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	2270      	movs	r2, #112	; 0x70
 80024be:	4393      	bics	r3, r2
 80024c0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	2203      	movs	r2, #3
 80024c6:	4393      	bics	r3, r2
 80024c8:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	68fa      	ldr	r2, [r7, #12]
 80024d0:	4313      	orrs	r3, r2
 80024d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	2202      	movs	r2, #2
 80024d8:	4393      	bics	r3, r2
 80024da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	697a      	ldr	r2, [r7, #20]
 80024e2:	4313      	orrs	r3, r2
 80024e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	4a23      	ldr	r2, [pc, #140]	; (8002578 <TIM_OC1_SetConfig+0xe8>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d007      	beq.n	80024fe <TIM_OC1_SetConfig+0x6e>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	4a22      	ldr	r2, [pc, #136]	; (800257c <TIM_OC1_SetConfig+0xec>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d003      	beq.n	80024fe <TIM_OC1_SetConfig+0x6e>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	4a21      	ldr	r2, [pc, #132]	; (8002580 <TIM_OC1_SetConfig+0xf0>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d10c      	bne.n	8002518 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	2208      	movs	r2, #8
 8002502:	4393      	bics	r3, r2
 8002504:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	68db      	ldr	r3, [r3, #12]
 800250a:	697a      	ldr	r2, [r7, #20]
 800250c:	4313      	orrs	r3, r2
 800250e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	2204      	movs	r2, #4
 8002514:	4393      	bics	r3, r2
 8002516:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	4a17      	ldr	r2, [pc, #92]	; (8002578 <TIM_OC1_SetConfig+0xe8>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d007      	beq.n	8002530 <TIM_OC1_SetConfig+0xa0>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	4a16      	ldr	r2, [pc, #88]	; (800257c <TIM_OC1_SetConfig+0xec>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d003      	beq.n	8002530 <TIM_OC1_SetConfig+0xa0>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	4a15      	ldr	r2, [pc, #84]	; (8002580 <TIM_OC1_SetConfig+0xf0>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d111      	bne.n	8002554 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	4a14      	ldr	r2, [pc, #80]	; (8002584 <TIM_OC1_SetConfig+0xf4>)
 8002534:	4013      	ands	r3, r2
 8002536:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	4a13      	ldr	r2, [pc, #76]	; (8002588 <TIM_OC1_SetConfig+0xf8>)
 800253c:	4013      	ands	r3, r2
 800253e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	695b      	ldr	r3, [r3, #20]
 8002544:	693a      	ldr	r2, [r7, #16]
 8002546:	4313      	orrs	r3, r2
 8002548:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	699b      	ldr	r3, [r3, #24]
 800254e:	693a      	ldr	r2, [r7, #16]
 8002550:	4313      	orrs	r3, r2
 8002552:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	693a      	ldr	r2, [r7, #16]
 8002558:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	68fa      	ldr	r2, [r7, #12]
 800255e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	685a      	ldr	r2, [r3, #4]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	697a      	ldr	r2, [r7, #20]
 800256c:	621a      	str	r2, [r3, #32]
}
 800256e:	46c0      	nop			; (mov r8, r8)
 8002570:	46bd      	mov	sp, r7
 8002572:	b006      	add	sp, #24
 8002574:	bd80      	pop	{r7, pc}
 8002576:	46c0      	nop			; (mov r8, r8)
 8002578:	40012c00 	.word	0x40012c00
 800257c:	40014400 	.word	0x40014400
 8002580:	40014800 	.word	0x40014800
 8002584:	fffffeff 	.word	0xfffffeff
 8002588:	fffffdff 	.word	0xfffffdff

0800258c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b086      	sub	sp, #24
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
 8002594:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6a1b      	ldr	r3, [r3, #32]
 800259a:	2210      	movs	r2, #16
 800259c:	4393      	bics	r3, r2
 800259e:	001a      	movs	r2, r3
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6a1b      	ldr	r3, [r3, #32]
 80025a8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	699b      	ldr	r3, [r3, #24]
 80025b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	4a2c      	ldr	r2, [pc, #176]	; (800266c <TIM_OC2_SetConfig+0xe0>)
 80025ba:	4013      	ands	r3, r2
 80025bc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	4a2b      	ldr	r2, [pc, #172]	; (8002670 <TIM_OC2_SetConfig+0xe4>)
 80025c2:	4013      	ands	r3, r2
 80025c4:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	021b      	lsls	r3, r3, #8
 80025cc:	68fa      	ldr	r2, [r7, #12]
 80025ce:	4313      	orrs	r3, r2
 80025d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	2220      	movs	r2, #32
 80025d6:	4393      	bics	r3, r2
 80025d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	011b      	lsls	r3, r3, #4
 80025e0:	697a      	ldr	r2, [r7, #20]
 80025e2:	4313      	orrs	r3, r2
 80025e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	4a22      	ldr	r2, [pc, #136]	; (8002674 <TIM_OC2_SetConfig+0xe8>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d10d      	bne.n	800260a <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	2280      	movs	r2, #128	; 0x80
 80025f2:	4393      	bics	r3, r2
 80025f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	68db      	ldr	r3, [r3, #12]
 80025fa:	011b      	lsls	r3, r3, #4
 80025fc:	697a      	ldr	r2, [r7, #20]
 80025fe:	4313      	orrs	r3, r2
 8002600:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	2240      	movs	r2, #64	; 0x40
 8002606:	4393      	bics	r3, r2
 8002608:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	4a19      	ldr	r2, [pc, #100]	; (8002674 <TIM_OC2_SetConfig+0xe8>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d007      	beq.n	8002622 <TIM_OC2_SetConfig+0x96>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	4a18      	ldr	r2, [pc, #96]	; (8002678 <TIM_OC2_SetConfig+0xec>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d003      	beq.n	8002622 <TIM_OC2_SetConfig+0x96>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	4a17      	ldr	r2, [pc, #92]	; (800267c <TIM_OC2_SetConfig+0xf0>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d113      	bne.n	800264a <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	4a16      	ldr	r2, [pc, #88]	; (8002680 <TIM_OC2_SetConfig+0xf4>)
 8002626:	4013      	ands	r3, r2
 8002628:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	4a15      	ldr	r2, [pc, #84]	; (8002684 <TIM_OC2_SetConfig+0xf8>)
 800262e:	4013      	ands	r3, r2
 8002630:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	695b      	ldr	r3, [r3, #20]
 8002636:	009b      	lsls	r3, r3, #2
 8002638:	693a      	ldr	r2, [r7, #16]
 800263a:	4313      	orrs	r3, r2
 800263c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	699b      	ldr	r3, [r3, #24]
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	693a      	ldr	r2, [r7, #16]
 8002646:	4313      	orrs	r3, r2
 8002648:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	693a      	ldr	r2, [r7, #16]
 800264e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	68fa      	ldr	r2, [r7, #12]
 8002654:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	685a      	ldr	r2, [r3, #4]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	697a      	ldr	r2, [r7, #20]
 8002662:	621a      	str	r2, [r3, #32]
}
 8002664:	46c0      	nop			; (mov r8, r8)
 8002666:	46bd      	mov	sp, r7
 8002668:	b006      	add	sp, #24
 800266a:	bd80      	pop	{r7, pc}
 800266c:	ffff8fff 	.word	0xffff8fff
 8002670:	fffffcff 	.word	0xfffffcff
 8002674:	40012c00 	.word	0x40012c00
 8002678:	40014400 	.word	0x40014400
 800267c:	40014800 	.word	0x40014800
 8002680:	fffffbff 	.word	0xfffffbff
 8002684:	fffff7ff 	.word	0xfffff7ff

08002688 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b086      	sub	sp, #24
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
 8002690:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6a1b      	ldr	r3, [r3, #32]
 8002696:	4a33      	ldr	r2, [pc, #204]	; (8002764 <TIM_OC3_SetConfig+0xdc>)
 8002698:	401a      	ands	r2, r3
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6a1b      	ldr	r3, [r3, #32]
 80026a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	69db      	ldr	r3, [r3, #28]
 80026ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	2270      	movs	r2, #112	; 0x70
 80026b4:	4393      	bics	r3, r2
 80026b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	2203      	movs	r2, #3
 80026bc:	4393      	bics	r3, r2
 80026be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	68fa      	ldr	r2, [r7, #12]
 80026c6:	4313      	orrs	r3, r2
 80026c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	4a26      	ldr	r2, [pc, #152]	; (8002768 <TIM_OC3_SetConfig+0xe0>)
 80026ce:	4013      	ands	r3, r2
 80026d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	021b      	lsls	r3, r3, #8
 80026d8:	697a      	ldr	r2, [r7, #20]
 80026da:	4313      	orrs	r3, r2
 80026dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	4a22      	ldr	r2, [pc, #136]	; (800276c <TIM_OC3_SetConfig+0xe4>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d10d      	bne.n	8002702 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	4a21      	ldr	r2, [pc, #132]	; (8002770 <TIM_OC3_SetConfig+0xe8>)
 80026ea:	4013      	ands	r3, r2
 80026ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	68db      	ldr	r3, [r3, #12]
 80026f2:	021b      	lsls	r3, r3, #8
 80026f4:	697a      	ldr	r2, [r7, #20]
 80026f6:	4313      	orrs	r3, r2
 80026f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	4a1d      	ldr	r2, [pc, #116]	; (8002774 <TIM_OC3_SetConfig+0xec>)
 80026fe:	4013      	ands	r3, r2
 8002700:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	4a19      	ldr	r2, [pc, #100]	; (800276c <TIM_OC3_SetConfig+0xe4>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d007      	beq.n	800271a <TIM_OC3_SetConfig+0x92>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	4a1a      	ldr	r2, [pc, #104]	; (8002778 <TIM_OC3_SetConfig+0xf0>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d003      	beq.n	800271a <TIM_OC3_SetConfig+0x92>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	4a19      	ldr	r2, [pc, #100]	; (800277c <TIM_OC3_SetConfig+0xf4>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d113      	bne.n	8002742 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	4a18      	ldr	r2, [pc, #96]	; (8002780 <TIM_OC3_SetConfig+0xf8>)
 800271e:	4013      	ands	r3, r2
 8002720:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	4a17      	ldr	r2, [pc, #92]	; (8002784 <TIM_OC3_SetConfig+0xfc>)
 8002726:	4013      	ands	r3, r2
 8002728:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	695b      	ldr	r3, [r3, #20]
 800272e:	011b      	lsls	r3, r3, #4
 8002730:	693a      	ldr	r2, [r7, #16]
 8002732:	4313      	orrs	r3, r2
 8002734:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	699b      	ldr	r3, [r3, #24]
 800273a:	011b      	lsls	r3, r3, #4
 800273c:	693a      	ldr	r2, [r7, #16]
 800273e:	4313      	orrs	r3, r2
 8002740:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	693a      	ldr	r2, [r7, #16]
 8002746:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	68fa      	ldr	r2, [r7, #12]
 800274c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	685a      	ldr	r2, [r3, #4]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	697a      	ldr	r2, [r7, #20]
 800275a:	621a      	str	r2, [r3, #32]
}
 800275c:	46c0      	nop			; (mov r8, r8)
 800275e:	46bd      	mov	sp, r7
 8002760:	b006      	add	sp, #24
 8002762:	bd80      	pop	{r7, pc}
 8002764:	fffffeff 	.word	0xfffffeff
 8002768:	fffffdff 	.word	0xfffffdff
 800276c:	40012c00 	.word	0x40012c00
 8002770:	fffff7ff 	.word	0xfffff7ff
 8002774:	fffffbff 	.word	0xfffffbff
 8002778:	40014400 	.word	0x40014400
 800277c:	40014800 	.word	0x40014800
 8002780:	ffffefff 	.word	0xffffefff
 8002784:	ffffdfff 	.word	0xffffdfff

08002788 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b086      	sub	sp, #24
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
 8002790:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6a1b      	ldr	r3, [r3, #32]
 8002796:	4a26      	ldr	r2, [pc, #152]	; (8002830 <TIM_OC4_SetConfig+0xa8>)
 8002798:	401a      	ands	r2, r3
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6a1b      	ldr	r3, [r3, #32]
 80027a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	69db      	ldr	r3, [r3, #28]
 80027ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	4a20      	ldr	r2, [pc, #128]	; (8002834 <TIM_OC4_SetConfig+0xac>)
 80027b4:	4013      	ands	r3, r2
 80027b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	4a1f      	ldr	r2, [pc, #124]	; (8002838 <TIM_OC4_SetConfig+0xb0>)
 80027bc:	4013      	ands	r3, r2
 80027be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	021b      	lsls	r3, r3, #8
 80027c6:	68fa      	ldr	r2, [r7, #12]
 80027c8:	4313      	orrs	r3, r2
 80027ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	4a1b      	ldr	r2, [pc, #108]	; (800283c <TIM_OC4_SetConfig+0xb4>)
 80027d0:	4013      	ands	r3, r2
 80027d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	031b      	lsls	r3, r3, #12
 80027da:	693a      	ldr	r2, [r7, #16]
 80027dc:	4313      	orrs	r3, r2
 80027de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	4a17      	ldr	r2, [pc, #92]	; (8002840 <TIM_OC4_SetConfig+0xb8>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d007      	beq.n	80027f8 <TIM_OC4_SetConfig+0x70>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	4a16      	ldr	r2, [pc, #88]	; (8002844 <TIM_OC4_SetConfig+0xbc>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d003      	beq.n	80027f8 <TIM_OC4_SetConfig+0x70>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	4a15      	ldr	r2, [pc, #84]	; (8002848 <TIM_OC4_SetConfig+0xc0>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d109      	bne.n	800280c <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	4a14      	ldr	r2, [pc, #80]	; (800284c <TIM_OC4_SetConfig+0xc4>)
 80027fc:	4013      	ands	r3, r2
 80027fe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	695b      	ldr	r3, [r3, #20]
 8002804:	019b      	lsls	r3, r3, #6
 8002806:	697a      	ldr	r2, [r7, #20]
 8002808:	4313      	orrs	r3, r2
 800280a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	697a      	ldr	r2, [r7, #20]
 8002810:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	68fa      	ldr	r2, [r7, #12]
 8002816:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	685a      	ldr	r2, [r3, #4]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	693a      	ldr	r2, [r7, #16]
 8002824:	621a      	str	r2, [r3, #32]
}
 8002826:	46c0      	nop			; (mov r8, r8)
 8002828:	46bd      	mov	sp, r7
 800282a:	b006      	add	sp, #24
 800282c:	bd80      	pop	{r7, pc}
 800282e:	46c0      	nop			; (mov r8, r8)
 8002830:	ffffefff 	.word	0xffffefff
 8002834:	ffff8fff 	.word	0xffff8fff
 8002838:	fffffcff 	.word	0xfffffcff
 800283c:	ffffdfff 	.word	0xffffdfff
 8002840:	40012c00 	.word	0x40012c00
 8002844:	40014400 	.word	0x40014400
 8002848:	40014800 	.word	0x40014800
 800284c:	ffffbfff 	.word	0xffffbfff

08002850 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b086      	sub	sp, #24
 8002854:	af00      	add	r7, sp, #0
 8002856:	60f8      	str	r0, [r7, #12]
 8002858:	60b9      	str	r1, [r7, #8]
 800285a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	221f      	movs	r2, #31
 8002860:	4013      	ands	r3, r2
 8002862:	2201      	movs	r2, #1
 8002864:	409a      	lsls	r2, r3
 8002866:	0013      	movs	r3, r2
 8002868:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	6a1b      	ldr	r3, [r3, #32]
 800286e:	697a      	ldr	r2, [r7, #20]
 8002870:	43d2      	mvns	r2, r2
 8002872:	401a      	ands	r2, r3
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	6a1a      	ldr	r2, [r3, #32]
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	211f      	movs	r1, #31
 8002880:	400b      	ands	r3, r1
 8002882:	6879      	ldr	r1, [r7, #4]
 8002884:	4099      	lsls	r1, r3
 8002886:	000b      	movs	r3, r1
 8002888:	431a      	orrs	r2, r3
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	621a      	str	r2, [r3, #32]
}
 800288e:	46c0      	nop			; (mov r8, r8)
 8002890:	46bd      	mov	sp, r7
 8002892:	b006      	add	sp, #24
 8002894:	bd80      	pop	{r7, pc}
	...

08002898 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b084      	sub	sp, #16
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
 80028a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	223c      	movs	r2, #60	; 0x3c
 80028a6:	5c9b      	ldrb	r3, [r3, r2]
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d101      	bne.n	80028b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80028ac:	2302      	movs	r3, #2
 80028ae:	e03c      	b.n	800292a <HAL_TIMEx_MasterConfigSynchronization+0x92>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	223c      	movs	r2, #60	; 0x3c
 80028b4:	2101      	movs	r1, #1
 80028b6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	223d      	movs	r2, #61	; 0x3d
 80028bc:	2102      	movs	r1, #2
 80028be:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	2270      	movs	r2, #112	; 0x70
 80028d4:	4393      	bics	r3, r2
 80028d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	68fa      	ldr	r2, [r7, #12]
 80028de:	4313      	orrs	r3, r2
 80028e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	68fa      	ldr	r2, [r7, #12]
 80028e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a11      	ldr	r2, [pc, #68]	; (8002934 <HAL_TIMEx_MasterConfigSynchronization+0x9c>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d004      	beq.n	80028fe <HAL_TIMEx_MasterConfigSynchronization+0x66>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a0f      	ldr	r2, [pc, #60]	; (8002938 <HAL_TIMEx_MasterConfigSynchronization+0xa0>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d10c      	bne.n	8002918 <HAL_TIMEx_MasterConfigSynchronization+0x80>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	2280      	movs	r2, #128	; 0x80
 8002902:	4393      	bics	r3, r2
 8002904:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	68ba      	ldr	r2, [r7, #8]
 800290c:	4313      	orrs	r3, r2
 800290e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	68ba      	ldr	r2, [r7, #8]
 8002916:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	223d      	movs	r2, #61	; 0x3d
 800291c:	2101      	movs	r1, #1
 800291e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	223c      	movs	r2, #60	; 0x3c
 8002924:	2100      	movs	r1, #0
 8002926:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002928:	2300      	movs	r3, #0
}
 800292a:	0018      	movs	r0, r3
 800292c:	46bd      	mov	sp, r7
 800292e:	b004      	add	sp, #16
 8002930:	bd80      	pop	{r7, pc}
 8002932:	46c0      	nop			; (mov r8, r8)
 8002934:	40012c00 	.word	0x40012c00
 8002938:	40000400 	.word	0x40000400

0800293c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b084      	sub	sp, #16
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
 8002944:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002946:	2300      	movs	r3, #0
 8002948:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	223c      	movs	r2, #60	; 0x3c
 800294e:	5c9b      	ldrb	r3, [r3, r2]
 8002950:	2b01      	cmp	r3, #1
 8002952:	d101      	bne.n	8002958 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002954:	2302      	movs	r3, #2
 8002956:	e03e      	b.n	80029d6 <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	223c      	movs	r2, #60	; 0x3c
 800295c:	2101      	movs	r1, #1
 800295e:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	22ff      	movs	r2, #255	; 0xff
 8002964:	4393      	bics	r3, r2
 8002966:	001a      	movs	r2, r3
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	68db      	ldr	r3, [r3, #12]
 800296c:	4313      	orrs	r3, r2
 800296e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	4a1b      	ldr	r2, [pc, #108]	; (80029e0 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8002974:	401a      	ands	r2, r3
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	4313      	orrs	r3, r2
 800297c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	4a18      	ldr	r2, [pc, #96]	; (80029e4 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 8002982:	401a      	ands	r2, r3
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	4313      	orrs	r3, r2
 800298a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	4a16      	ldr	r2, [pc, #88]	; (80029e8 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8002990:	401a      	ands	r2, r3
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4313      	orrs	r3, r2
 8002998:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	4a13      	ldr	r2, [pc, #76]	; (80029ec <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 800299e:	401a      	ands	r2, r3
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	691b      	ldr	r3, [r3, #16]
 80029a4:	4313      	orrs	r3, r2
 80029a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	4a11      	ldr	r2, [pc, #68]	; (80029f0 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 80029ac:	401a      	ands	r2, r3
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	695b      	ldr	r3, [r3, #20]
 80029b2:	4313      	orrs	r3, r2
 80029b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	4a0e      	ldr	r2, [pc, #56]	; (80029f4 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 80029ba:	401a      	ands	r2, r3
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	69db      	ldr	r3, [r3, #28]
 80029c0:	4313      	orrs	r3, r2
 80029c2:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	68fa      	ldr	r2, [r7, #12]
 80029ca:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	223c      	movs	r2, #60	; 0x3c
 80029d0:	2100      	movs	r1, #0
 80029d2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80029d4:	2300      	movs	r3, #0
}
 80029d6:	0018      	movs	r0, r3
 80029d8:	46bd      	mov	sp, r7
 80029da:	b004      	add	sp, #16
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	46c0      	nop			; (mov r8, r8)
 80029e0:	fffffcff 	.word	0xfffffcff
 80029e4:	fffffbff 	.word	0xfffffbff
 80029e8:	fffff7ff 	.word	0xfffff7ff
 80029ec:	ffffefff 	.word	0xffffefff
 80029f0:	ffffdfff 	.word	0xffffdfff
 80029f4:	ffffbfff 	.word	0xffffbfff

080029f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b082      	sub	sp, #8
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d101      	bne.n	8002a0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e044      	b.n	8002a94 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d107      	bne.n	8002a22 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2274      	movs	r2, #116	; 0x74
 8002a16:	2100      	movs	r1, #0
 8002a18:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	0018      	movs	r0, r3
 8002a1e:	f7fe f871 	bl	8000b04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2224      	movs	r2, #36	; 0x24
 8002a26:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	2101      	movs	r1, #1
 8002a34:	438a      	bics	r2, r1
 8002a36:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	0018      	movs	r0, r3
 8002a3c:	f000 f90c 	bl	8002c58 <UART_SetConfig>
 8002a40:	0003      	movs	r3, r0
 8002a42:	2b01      	cmp	r3, #1
 8002a44:	d101      	bne.n	8002a4a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e024      	b.n	8002a94 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d003      	beq.n	8002a5a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	0018      	movs	r0, r3
 8002a56:	f000 fa25 	bl	8002ea4 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	685a      	ldr	r2, [r3, #4]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	490d      	ldr	r1, [pc, #52]	; (8002a9c <HAL_UART_Init+0xa4>)
 8002a66:	400a      	ands	r2, r1
 8002a68:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	689a      	ldr	r2, [r3, #8]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	2108      	movs	r1, #8
 8002a76:	438a      	bics	r2, r1
 8002a78:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	2101      	movs	r1, #1
 8002a86:	430a      	orrs	r2, r1
 8002a88:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	0018      	movs	r0, r3
 8002a8e:	f000 fabd 	bl	800300c <UART_CheckIdleState>
 8002a92:	0003      	movs	r3, r0
}
 8002a94:	0018      	movs	r0, r3
 8002a96:	46bd      	mov	sp, r7
 8002a98:	b002      	add	sp, #8
 8002a9a:	bd80      	pop	{r7, pc}
 8002a9c:	fffff7ff 	.word	0xfffff7ff

08002aa0 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b08a      	sub	sp, #40	; 0x28
 8002aa4:	af02      	add	r7, sp, #8
 8002aa6:	60f8      	str	r0, [r7, #12]
 8002aa8:	60b9      	str	r1, [r7, #8]
 8002aaa:	603b      	str	r3, [r7, #0]
 8002aac:	1dbb      	adds	r3, r7, #6
 8002aae:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ab4:	2b20      	cmp	r3, #32
 8002ab6:	d000      	beq.n	8002aba <HAL_UART_Receive+0x1a>
 8002ab8:	e0c6      	b.n	8002c48 <HAL_UART_Receive+0x1a8>
  {
    if ((pData == NULL) || (Size == 0U))
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d003      	beq.n	8002ac8 <HAL_UART_Receive+0x28>
 8002ac0:	1dbb      	adds	r3, r7, #6
 8002ac2:	881b      	ldrh	r3, [r3, #0]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d101      	bne.n	8002acc <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	e0be      	b.n	8002c4a <HAL_UART_Receive+0x1aa>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	689a      	ldr	r2, [r3, #8]
 8002ad0:	2380      	movs	r3, #128	; 0x80
 8002ad2:	015b      	lsls	r3, r3, #5
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d109      	bne.n	8002aec <HAL_UART_Receive+0x4c>
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	691b      	ldr	r3, [r3, #16]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d105      	bne.n	8002aec <HAL_UART_Receive+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	d001      	beq.n	8002aec <HAL_UART_Receive+0x4c>
      {
        return  HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	e0ae      	b.n	8002c4a <HAL_UART_Receive+0x1aa>
      }
    }

    __HAL_LOCK(huart);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	2274      	movs	r2, #116	; 0x74
 8002af0:	5c9b      	ldrb	r3, [r3, r2]
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	d101      	bne.n	8002afa <HAL_UART_Receive+0x5a>
 8002af6:	2302      	movs	r3, #2
 8002af8:	e0a7      	b.n	8002c4a <HAL_UART_Receive+0x1aa>
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	2274      	movs	r2, #116	; 0x74
 8002afe:	2101      	movs	r1, #1
 8002b00:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	2280      	movs	r2, #128	; 0x80
 8002b06:	2100      	movs	r1, #0
 8002b08:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	2222      	movs	r2, #34	; 0x22
 8002b0e:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	2200      	movs	r2, #0
 8002b14:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002b16:	f7fe f8e3 	bl	8000ce0 <HAL_GetTick>
 8002b1a:	0003      	movs	r3, r0
 8002b1c:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	1dba      	adds	r2, r7, #6
 8002b22:	2158      	movs	r1, #88	; 0x58
 8002b24:	8812      	ldrh	r2, [r2, #0]
 8002b26:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	1dba      	adds	r2, r7, #6
 8002b2c:	215a      	movs	r1, #90	; 0x5a
 8002b2e:	8812      	ldrh	r2, [r2, #0]
 8002b30:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	689a      	ldr	r2, [r3, #8]
 8002b36:	2380      	movs	r3, #128	; 0x80
 8002b38:	015b      	lsls	r3, r3, #5
 8002b3a:	429a      	cmp	r2, r3
 8002b3c:	d10d      	bne.n	8002b5a <HAL_UART_Receive+0xba>
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	691b      	ldr	r3, [r3, #16]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d104      	bne.n	8002b50 <HAL_UART_Receive+0xb0>
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	225c      	movs	r2, #92	; 0x5c
 8002b4a:	4942      	ldr	r1, [pc, #264]	; (8002c54 <HAL_UART_Receive+0x1b4>)
 8002b4c:	5299      	strh	r1, [r3, r2]
 8002b4e:	e01a      	b.n	8002b86 <HAL_UART_Receive+0xe6>
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	225c      	movs	r2, #92	; 0x5c
 8002b54:	21ff      	movs	r1, #255	; 0xff
 8002b56:	5299      	strh	r1, [r3, r2]
 8002b58:	e015      	b.n	8002b86 <HAL_UART_Receive+0xe6>
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d10d      	bne.n	8002b7e <HAL_UART_Receive+0xde>
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	691b      	ldr	r3, [r3, #16]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d104      	bne.n	8002b74 <HAL_UART_Receive+0xd4>
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	225c      	movs	r2, #92	; 0x5c
 8002b6e:	21ff      	movs	r1, #255	; 0xff
 8002b70:	5299      	strh	r1, [r3, r2]
 8002b72:	e008      	b.n	8002b86 <HAL_UART_Receive+0xe6>
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	225c      	movs	r2, #92	; 0x5c
 8002b78:	217f      	movs	r1, #127	; 0x7f
 8002b7a:	5299      	strh	r1, [r3, r2]
 8002b7c:	e003      	b.n	8002b86 <HAL_UART_Receive+0xe6>
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	225c      	movs	r2, #92	; 0x5c
 8002b82:	2100      	movs	r1, #0
 8002b84:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8002b86:	2312      	movs	r3, #18
 8002b88:	18fb      	adds	r3, r7, r3
 8002b8a:	68fa      	ldr	r2, [r7, #12]
 8002b8c:	215c      	movs	r1, #92	; 0x5c
 8002b8e:	5a52      	ldrh	r2, [r2, r1]
 8002b90:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	689a      	ldr	r2, [r3, #8]
 8002b96:	2380      	movs	r3, #128	; 0x80
 8002b98:	015b      	lsls	r3, r3, #5
 8002b9a:	429a      	cmp	r2, r3
 8002b9c:	d108      	bne.n	8002bb0 <HAL_UART_Receive+0x110>
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	691b      	ldr	r3, [r3, #16]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d104      	bne.n	8002bb0 <HAL_UART_Receive+0x110>
    {
      pdata8bits  = NULL;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	61bb      	str	r3, [r7, #24]
 8002bae:	e003      	b.n	8002bb8 <HAL_UART_Receive+0x118>
    }
    else
    {
      pdata8bits  = pData;
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	2274      	movs	r2, #116	; 0x74
 8002bbc:	2100      	movs	r1, #0
 8002bbe:	5499      	strb	r1, [r3, r2]

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002bc0:	e037      	b.n	8002c32 <HAL_UART_Receive+0x192>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002bc2:	697a      	ldr	r2, [r7, #20]
 8002bc4:	68f8      	ldr	r0, [r7, #12]
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	9300      	str	r3, [sp, #0]
 8002bca:	0013      	movs	r3, r2
 8002bcc:	2200      	movs	r2, #0
 8002bce:	2120      	movs	r1, #32
 8002bd0:	f000 fa66 	bl	80030a0 <UART_WaitOnFlagUntilTimeout>
 8002bd4:	1e03      	subs	r3, r0, #0
 8002bd6:	d001      	beq.n	8002bdc <HAL_UART_Receive+0x13c>
      {
        return HAL_TIMEOUT;
 8002bd8:	2303      	movs	r3, #3
 8002bda:	e036      	b.n	8002c4a <HAL_UART_Receive+0x1aa>
      }
      if (pdata8bits == NULL)
 8002bdc:	69fb      	ldr	r3, [r7, #28]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d10e      	bne.n	8002c00 <HAL_UART_Receive+0x160>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002be8:	b29b      	uxth	r3, r3
 8002bea:	2212      	movs	r2, #18
 8002bec:	18ba      	adds	r2, r7, r2
 8002bee:	8812      	ldrh	r2, [r2, #0]
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	b29a      	uxth	r2, r3
 8002bf4:	69bb      	ldr	r3, [r7, #24]
 8002bf6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002bf8:	69bb      	ldr	r3, [r7, #24]
 8002bfa:	3302      	adds	r3, #2
 8002bfc:	61bb      	str	r3, [r7, #24]
 8002bfe:	e00f      	b.n	8002c20 <HAL_UART_Receive+0x180>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002c06:	b29b      	uxth	r3, r3
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	2212      	movs	r2, #18
 8002c0c:	18ba      	adds	r2, r7, r2
 8002c0e:	8812      	ldrh	r2, [r2, #0]
 8002c10:	b2d2      	uxtb	r2, r2
 8002c12:	4013      	ands	r3, r2
 8002c14:	b2da      	uxtb	r2, r3
 8002c16:	69fb      	ldr	r3, [r7, #28]
 8002c18:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002c1a:	69fb      	ldr	r3, [r7, #28]
 8002c1c:	3301      	adds	r3, #1
 8002c1e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	225a      	movs	r2, #90	; 0x5a
 8002c24:	5a9b      	ldrh	r3, [r3, r2]
 8002c26:	b29b      	uxth	r3, r3
 8002c28:	3b01      	subs	r3, #1
 8002c2a:	b299      	uxth	r1, r3
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	225a      	movs	r2, #90	; 0x5a
 8002c30:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	225a      	movs	r2, #90	; 0x5a
 8002c36:	5a9b      	ldrh	r3, [r3, r2]
 8002c38:	b29b      	uxth	r3, r3
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d1c1      	bne.n	8002bc2 <HAL_UART_Receive+0x122>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	2220      	movs	r2, #32
 8002c42:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002c44:	2300      	movs	r3, #0
 8002c46:	e000      	b.n	8002c4a <HAL_UART_Receive+0x1aa>
  }
  else
  {
    return HAL_BUSY;
 8002c48:	2302      	movs	r3, #2
  }
}
 8002c4a:	0018      	movs	r0, r3
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	b008      	add	sp, #32
 8002c50:	bd80      	pop	{r7, pc}
 8002c52:	46c0      	nop			; (mov r8, r8)
 8002c54:	000001ff 	.word	0x000001ff

08002c58 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b088      	sub	sp, #32
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002c60:	231e      	movs	r3, #30
 8002c62:	18fb      	adds	r3, r7, r3
 8002c64:	2200      	movs	r2, #0
 8002c66:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	689a      	ldr	r2, [r3, #8]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	691b      	ldr	r3, [r3, #16]
 8002c70:	431a      	orrs	r2, r3
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	695b      	ldr	r3, [r3, #20]
 8002c76:	431a      	orrs	r2, r3
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	69db      	ldr	r3, [r3, #28]
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a81      	ldr	r2, [pc, #516]	; (8002e8c <UART_SetConfig+0x234>)
 8002c88:	4013      	ands	r3, r2
 8002c8a:	0019      	movs	r1, r3
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	697a      	ldr	r2, [r7, #20]
 8002c92:	430a      	orrs	r2, r1
 8002c94:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	4a7c      	ldr	r2, [pc, #496]	; (8002e90 <UART_SetConfig+0x238>)
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	0019      	movs	r1, r3
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	68da      	ldr	r2, [r3, #12]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	430a      	orrs	r2, r1
 8002cac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	699b      	ldr	r3, [r3, #24]
 8002cb2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6a1b      	ldr	r3, [r3, #32]
 8002cb8:	697a      	ldr	r2, [r7, #20]
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	4a73      	ldr	r2, [pc, #460]	; (8002e94 <UART_SetConfig+0x23c>)
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	0019      	movs	r1, r3
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	697a      	ldr	r2, [r7, #20]
 8002cd0:	430a      	orrs	r2, r1
 8002cd2:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002cd4:	4b70      	ldr	r3, [pc, #448]	; (8002e98 <UART_SetConfig+0x240>)
 8002cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd8:	2203      	movs	r2, #3
 8002cda:	4013      	ands	r3, r2
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d00f      	beq.n	8002d00 <UART_SetConfig+0xa8>
 8002ce0:	d304      	bcc.n	8002cec <UART_SetConfig+0x94>
 8002ce2:	2b02      	cmp	r3, #2
 8002ce4:	d011      	beq.n	8002d0a <UART_SetConfig+0xb2>
 8002ce6:	2b03      	cmp	r3, #3
 8002ce8:	d005      	beq.n	8002cf6 <UART_SetConfig+0x9e>
 8002cea:	e013      	b.n	8002d14 <UART_SetConfig+0xbc>
 8002cec:	231f      	movs	r3, #31
 8002cee:	18fb      	adds	r3, r7, r3
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	701a      	strb	r2, [r3, #0]
 8002cf4:	e012      	b.n	8002d1c <UART_SetConfig+0xc4>
 8002cf6:	231f      	movs	r3, #31
 8002cf8:	18fb      	adds	r3, r7, r3
 8002cfa:	2202      	movs	r2, #2
 8002cfc:	701a      	strb	r2, [r3, #0]
 8002cfe:	e00d      	b.n	8002d1c <UART_SetConfig+0xc4>
 8002d00:	231f      	movs	r3, #31
 8002d02:	18fb      	adds	r3, r7, r3
 8002d04:	2204      	movs	r2, #4
 8002d06:	701a      	strb	r2, [r3, #0]
 8002d08:	e008      	b.n	8002d1c <UART_SetConfig+0xc4>
 8002d0a:	231f      	movs	r3, #31
 8002d0c:	18fb      	adds	r3, r7, r3
 8002d0e:	2208      	movs	r2, #8
 8002d10:	701a      	strb	r2, [r3, #0]
 8002d12:	e003      	b.n	8002d1c <UART_SetConfig+0xc4>
 8002d14:	231f      	movs	r3, #31
 8002d16:	18fb      	adds	r3, r7, r3
 8002d18:	2210      	movs	r2, #16
 8002d1a:	701a      	strb	r2, [r3, #0]
 8002d1c:	46c0      	nop			; (mov r8, r8)

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	69da      	ldr	r2, [r3, #28]
 8002d22:	2380      	movs	r3, #128	; 0x80
 8002d24:	021b      	lsls	r3, r3, #8
 8002d26:	429a      	cmp	r2, r3
 8002d28:	d15c      	bne.n	8002de4 <UART_SetConfig+0x18c>
  {
    switch (clocksource)
 8002d2a:	231f      	movs	r3, #31
 8002d2c:	18fb      	adds	r3, r7, r3
 8002d2e:	781b      	ldrb	r3, [r3, #0]
 8002d30:	2b02      	cmp	r3, #2
 8002d32:	d00d      	beq.n	8002d50 <UART_SetConfig+0xf8>
 8002d34:	dc02      	bgt.n	8002d3c <UART_SetConfig+0xe4>
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d005      	beq.n	8002d46 <UART_SetConfig+0xee>
 8002d3a:	e015      	b.n	8002d68 <UART_SetConfig+0x110>
 8002d3c:	2b04      	cmp	r3, #4
 8002d3e:	d00a      	beq.n	8002d56 <UART_SetConfig+0xfe>
 8002d40:	2b08      	cmp	r3, #8
 8002d42:	d00d      	beq.n	8002d60 <UART_SetConfig+0x108>
 8002d44:	e010      	b.n	8002d68 <UART_SetConfig+0x110>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d46:	f7ff f8ad 	bl	8001ea4 <HAL_RCC_GetPCLK1Freq>
 8002d4a:	0003      	movs	r3, r0
 8002d4c:	61bb      	str	r3, [r7, #24]
        break;
 8002d4e:	e012      	b.n	8002d76 <UART_SetConfig+0x11e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002d50:	4b52      	ldr	r3, [pc, #328]	; (8002e9c <UART_SetConfig+0x244>)
 8002d52:	61bb      	str	r3, [r7, #24]
        break;
 8002d54:	e00f      	b.n	8002d76 <UART_SetConfig+0x11e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d56:	f7ff f837 	bl	8001dc8 <HAL_RCC_GetSysClockFreq>
 8002d5a:	0003      	movs	r3, r0
 8002d5c:	61bb      	str	r3, [r7, #24]
        break;
 8002d5e:	e00a      	b.n	8002d76 <UART_SetConfig+0x11e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002d60:	2380      	movs	r3, #128	; 0x80
 8002d62:	021b      	lsls	r3, r3, #8
 8002d64:	61bb      	str	r3, [r7, #24]
        break;
 8002d66:	e006      	b.n	8002d76 <UART_SetConfig+0x11e>
      default:
        pclk = 0U;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002d6c:	231e      	movs	r3, #30
 8002d6e:	18fb      	adds	r3, r7, r3
 8002d70:	2201      	movs	r2, #1
 8002d72:	701a      	strb	r2, [r3, #0]
        break;
 8002d74:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002d76:	69bb      	ldr	r3, [r7, #24]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d100      	bne.n	8002d7e <UART_SetConfig+0x126>
 8002d7c:	e079      	b.n	8002e72 <UART_SetConfig+0x21a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002d7e:	69bb      	ldr	r3, [r7, #24]
 8002d80:	005a      	lsls	r2, r3, #1
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	085b      	lsrs	r3, r3, #1
 8002d88:	18d2      	adds	r2, r2, r3
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	0019      	movs	r1, r3
 8002d90:	0010      	movs	r0, r2
 8002d92:	f7fd f9b9 	bl	8000108 <__udivsi3>
 8002d96:	0003      	movs	r3, r0
 8002d98:	b29b      	uxth	r3, r3
 8002d9a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	2b0f      	cmp	r3, #15
 8002da0:	d91b      	bls.n	8002dda <UART_SetConfig+0x182>
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	4a3e      	ldr	r2, [pc, #248]	; (8002ea0 <UART_SetConfig+0x248>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d817      	bhi.n	8002dda <UART_SetConfig+0x182>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	b29a      	uxth	r2, r3
 8002dae:	200e      	movs	r0, #14
 8002db0:	183b      	adds	r3, r7, r0
 8002db2:	210f      	movs	r1, #15
 8002db4:	438a      	bics	r2, r1
 8002db6:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	085b      	lsrs	r3, r3, #1
 8002dbc:	b29b      	uxth	r3, r3
 8002dbe:	2207      	movs	r2, #7
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	b299      	uxth	r1, r3
 8002dc4:	183b      	adds	r3, r7, r0
 8002dc6:	183a      	adds	r2, r7, r0
 8002dc8:	8812      	ldrh	r2, [r2, #0]
 8002dca:	430a      	orrs	r2, r1
 8002dcc:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	183a      	adds	r2, r7, r0
 8002dd4:	8812      	ldrh	r2, [r2, #0]
 8002dd6:	60da      	str	r2, [r3, #12]
 8002dd8:	e04b      	b.n	8002e72 <UART_SetConfig+0x21a>
      }
      else
      {
        ret = HAL_ERROR;
 8002dda:	231e      	movs	r3, #30
 8002ddc:	18fb      	adds	r3, r7, r3
 8002dde:	2201      	movs	r2, #1
 8002de0:	701a      	strb	r2, [r3, #0]
 8002de2:	e046      	b.n	8002e72 <UART_SetConfig+0x21a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002de4:	231f      	movs	r3, #31
 8002de6:	18fb      	adds	r3, r7, r3
 8002de8:	781b      	ldrb	r3, [r3, #0]
 8002dea:	2b02      	cmp	r3, #2
 8002dec:	d00d      	beq.n	8002e0a <UART_SetConfig+0x1b2>
 8002dee:	dc02      	bgt.n	8002df6 <UART_SetConfig+0x19e>
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d005      	beq.n	8002e00 <UART_SetConfig+0x1a8>
 8002df4:	e015      	b.n	8002e22 <UART_SetConfig+0x1ca>
 8002df6:	2b04      	cmp	r3, #4
 8002df8:	d00a      	beq.n	8002e10 <UART_SetConfig+0x1b8>
 8002dfa:	2b08      	cmp	r3, #8
 8002dfc:	d00d      	beq.n	8002e1a <UART_SetConfig+0x1c2>
 8002dfe:	e010      	b.n	8002e22 <UART_SetConfig+0x1ca>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e00:	f7ff f850 	bl	8001ea4 <HAL_RCC_GetPCLK1Freq>
 8002e04:	0003      	movs	r3, r0
 8002e06:	61bb      	str	r3, [r7, #24]
        break;
 8002e08:	e012      	b.n	8002e30 <UART_SetConfig+0x1d8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002e0a:	4b24      	ldr	r3, [pc, #144]	; (8002e9c <UART_SetConfig+0x244>)
 8002e0c:	61bb      	str	r3, [r7, #24]
        break;
 8002e0e:	e00f      	b.n	8002e30 <UART_SetConfig+0x1d8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e10:	f7fe ffda 	bl	8001dc8 <HAL_RCC_GetSysClockFreq>
 8002e14:	0003      	movs	r3, r0
 8002e16:	61bb      	str	r3, [r7, #24]
        break;
 8002e18:	e00a      	b.n	8002e30 <UART_SetConfig+0x1d8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002e1a:	2380      	movs	r3, #128	; 0x80
 8002e1c:	021b      	lsls	r3, r3, #8
 8002e1e:	61bb      	str	r3, [r7, #24]
        break;
 8002e20:	e006      	b.n	8002e30 <UART_SetConfig+0x1d8>
      default:
        pclk = 0U;
 8002e22:	2300      	movs	r3, #0
 8002e24:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002e26:	231e      	movs	r3, #30
 8002e28:	18fb      	adds	r3, r7, r3
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	701a      	strb	r2, [r3, #0]
        break;
 8002e2e:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002e30:	69bb      	ldr	r3, [r7, #24]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d01d      	beq.n	8002e72 <UART_SetConfig+0x21a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	085a      	lsrs	r2, r3, #1
 8002e3c:	69bb      	ldr	r3, [r7, #24]
 8002e3e:	18d2      	adds	r2, r2, r3
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	0019      	movs	r1, r3
 8002e46:	0010      	movs	r0, r2
 8002e48:	f7fd f95e 	bl	8000108 <__udivsi3>
 8002e4c:	0003      	movs	r3, r0
 8002e4e:	b29b      	uxth	r3, r3
 8002e50:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	2b0f      	cmp	r3, #15
 8002e56:	d908      	bls.n	8002e6a <UART_SetConfig+0x212>
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	4a11      	ldr	r2, [pc, #68]	; (8002ea0 <UART_SetConfig+0x248>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d804      	bhi.n	8002e6a <UART_SetConfig+0x212>
      {
        huart->Instance->BRR = usartdiv;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	693a      	ldr	r2, [r7, #16]
 8002e66:	60da      	str	r2, [r3, #12]
 8002e68:	e003      	b.n	8002e72 <UART_SetConfig+0x21a>
      }
      else
      {
        ret = HAL_ERROR;
 8002e6a:	231e      	movs	r3, #30
 8002e6c:	18fb      	adds	r3, r7, r3
 8002e6e:	2201      	movs	r2, #1
 8002e70:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2200      	movs	r2, #0
 8002e76:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002e7e:	231e      	movs	r3, #30
 8002e80:	18fb      	adds	r3, r7, r3
 8002e82:	781b      	ldrb	r3, [r3, #0]
}
 8002e84:	0018      	movs	r0, r3
 8002e86:	46bd      	mov	sp, r7
 8002e88:	b008      	add	sp, #32
 8002e8a:	bd80      	pop	{r7, pc}
 8002e8c:	ffff69f3 	.word	0xffff69f3
 8002e90:	ffffcfff 	.word	0xffffcfff
 8002e94:	fffff4ff 	.word	0xfffff4ff
 8002e98:	40021000 	.word	0x40021000
 8002e9c:	007a1200 	.word	0x007a1200
 8002ea0:	0000ffff 	.word	0x0000ffff

08002ea4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b082      	sub	sp, #8
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	4013      	ands	r3, r2
 8002eb4:	d00b      	beq.n	8002ece <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	4a4a      	ldr	r2, [pc, #296]	; (8002fe8 <UART_AdvFeatureConfig+0x144>)
 8002ebe:	4013      	ands	r3, r2
 8002ec0:	0019      	movs	r1, r3
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	430a      	orrs	r2, r1
 8002ecc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed2:	2202      	movs	r2, #2
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	d00b      	beq.n	8002ef0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	4a43      	ldr	r2, [pc, #268]	; (8002fec <UART_AdvFeatureConfig+0x148>)
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	0019      	movs	r1, r3
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	430a      	orrs	r2, r1
 8002eee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef4:	2204      	movs	r2, #4
 8002ef6:	4013      	ands	r3, r2
 8002ef8:	d00b      	beq.n	8002f12 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	4a3b      	ldr	r2, [pc, #236]	; (8002ff0 <UART_AdvFeatureConfig+0x14c>)
 8002f02:	4013      	ands	r3, r2
 8002f04:	0019      	movs	r1, r3
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	430a      	orrs	r2, r1
 8002f10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f16:	2208      	movs	r2, #8
 8002f18:	4013      	ands	r3, r2
 8002f1a:	d00b      	beq.n	8002f34 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	4a34      	ldr	r2, [pc, #208]	; (8002ff4 <UART_AdvFeatureConfig+0x150>)
 8002f24:	4013      	ands	r3, r2
 8002f26:	0019      	movs	r1, r3
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	430a      	orrs	r2, r1
 8002f32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f38:	2210      	movs	r2, #16
 8002f3a:	4013      	ands	r3, r2
 8002f3c:	d00b      	beq.n	8002f56 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	4a2c      	ldr	r2, [pc, #176]	; (8002ff8 <UART_AdvFeatureConfig+0x154>)
 8002f46:	4013      	ands	r3, r2
 8002f48:	0019      	movs	r1, r3
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	430a      	orrs	r2, r1
 8002f54:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f5a:	2220      	movs	r2, #32
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	d00b      	beq.n	8002f78 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	4a25      	ldr	r2, [pc, #148]	; (8002ffc <UART_AdvFeatureConfig+0x158>)
 8002f68:	4013      	ands	r3, r2
 8002f6a:	0019      	movs	r1, r3
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	430a      	orrs	r2, r1
 8002f76:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f7c:	2240      	movs	r2, #64	; 0x40
 8002f7e:	4013      	ands	r3, r2
 8002f80:	d01d      	beq.n	8002fbe <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	4a1d      	ldr	r2, [pc, #116]	; (8003000 <UART_AdvFeatureConfig+0x15c>)
 8002f8a:	4013      	ands	r3, r2
 8002f8c:	0019      	movs	r1, r3
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	430a      	orrs	r2, r1
 8002f98:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f9e:	2380      	movs	r3, #128	; 0x80
 8002fa0:	035b      	lsls	r3, r3, #13
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	d10b      	bne.n	8002fbe <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	4a15      	ldr	r2, [pc, #84]	; (8003004 <UART_AdvFeatureConfig+0x160>)
 8002fae:	4013      	ands	r3, r2
 8002fb0:	0019      	movs	r1, r3
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	430a      	orrs	r2, r1
 8002fbc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc2:	2280      	movs	r2, #128	; 0x80
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	d00b      	beq.n	8002fe0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	4a0e      	ldr	r2, [pc, #56]	; (8003008 <UART_AdvFeatureConfig+0x164>)
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	0019      	movs	r1, r3
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	430a      	orrs	r2, r1
 8002fde:	605a      	str	r2, [r3, #4]
  }
}
 8002fe0:	46c0      	nop			; (mov r8, r8)
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	b002      	add	sp, #8
 8002fe6:	bd80      	pop	{r7, pc}
 8002fe8:	fffdffff 	.word	0xfffdffff
 8002fec:	fffeffff 	.word	0xfffeffff
 8002ff0:	fffbffff 	.word	0xfffbffff
 8002ff4:	ffff7fff 	.word	0xffff7fff
 8002ff8:	ffffefff 	.word	0xffffefff
 8002ffc:	ffffdfff 	.word	0xffffdfff
 8003000:	ffefffff 	.word	0xffefffff
 8003004:	ff9fffff 	.word	0xff9fffff
 8003008:	fff7ffff 	.word	0xfff7ffff

0800300c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b086      	sub	sp, #24
 8003010:	af02      	add	r7, sp, #8
 8003012:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2280      	movs	r2, #128	; 0x80
 8003018:	2100      	movs	r1, #0
 800301a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800301c:	f7fd fe60 	bl	8000ce0 <HAL_GetTick>
 8003020:	0003      	movs	r3, r0
 8003022:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	2208      	movs	r2, #8
 800302c:	4013      	ands	r3, r2
 800302e:	2b08      	cmp	r3, #8
 8003030:	d10d      	bne.n	800304e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003032:	68fa      	ldr	r2, [r7, #12]
 8003034:	2380      	movs	r3, #128	; 0x80
 8003036:	0399      	lsls	r1, r3, #14
 8003038:	6878      	ldr	r0, [r7, #4]
 800303a:	4b18      	ldr	r3, [pc, #96]	; (800309c <UART_CheckIdleState+0x90>)
 800303c:	9300      	str	r3, [sp, #0]
 800303e:	0013      	movs	r3, r2
 8003040:	2200      	movs	r2, #0
 8003042:	f000 f82d 	bl	80030a0 <UART_WaitOnFlagUntilTimeout>
 8003046:	1e03      	subs	r3, r0, #0
 8003048:	d001      	beq.n	800304e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800304a:	2303      	movs	r3, #3
 800304c:	e022      	b.n	8003094 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	2204      	movs	r2, #4
 8003056:	4013      	ands	r3, r2
 8003058:	2b04      	cmp	r3, #4
 800305a:	d10d      	bne.n	8003078 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800305c:	68fa      	ldr	r2, [r7, #12]
 800305e:	2380      	movs	r3, #128	; 0x80
 8003060:	03d9      	lsls	r1, r3, #15
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	4b0d      	ldr	r3, [pc, #52]	; (800309c <UART_CheckIdleState+0x90>)
 8003066:	9300      	str	r3, [sp, #0]
 8003068:	0013      	movs	r3, r2
 800306a:	2200      	movs	r2, #0
 800306c:	f000 f818 	bl	80030a0 <UART_WaitOnFlagUntilTimeout>
 8003070:	1e03      	subs	r3, r0, #0
 8003072:	d001      	beq.n	8003078 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003074:	2303      	movs	r3, #3
 8003076:	e00d      	b.n	8003094 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2220      	movs	r2, #32
 800307c:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2220      	movs	r2, #32
 8003082:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2200      	movs	r2, #0
 8003088:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2274      	movs	r2, #116	; 0x74
 800308e:	2100      	movs	r1, #0
 8003090:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003092:	2300      	movs	r3, #0
}
 8003094:	0018      	movs	r0, r3
 8003096:	46bd      	mov	sp, r7
 8003098:	b004      	add	sp, #16
 800309a:	bd80      	pop	{r7, pc}
 800309c:	01ffffff 	.word	0x01ffffff

080030a0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b084      	sub	sp, #16
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	60f8      	str	r0, [r7, #12]
 80030a8:	60b9      	str	r1, [r7, #8]
 80030aa:	603b      	str	r3, [r7, #0]
 80030ac:	1dfb      	adds	r3, r7, #7
 80030ae:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030b0:	e05e      	b.n	8003170 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030b2:	69bb      	ldr	r3, [r7, #24]
 80030b4:	3301      	adds	r3, #1
 80030b6:	d05b      	beq.n	8003170 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030b8:	f7fd fe12 	bl	8000ce0 <HAL_GetTick>
 80030bc:	0002      	movs	r2, r0
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	1ad3      	subs	r3, r2, r3
 80030c2:	69ba      	ldr	r2, [r7, #24]
 80030c4:	429a      	cmp	r2, r3
 80030c6:	d302      	bcc.n	80030ce <UART_WaitOnFlagUntilTimeout+0x2e>
 80030c8:	69bb      	ldr	r3, [r7, #24]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d11b      	bne.n	8003106 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	492f      	ldr	r1, [pc, #188]	; (8003198 <UART_WaitOnFlagUntilTimeout+0xf8>)
 80030da:	400a      	ands	r2, r1
 80030dc:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	689a      	ldr	r2, [r3, #8]
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	2101      	movs	r1, #1
 80030ea:	438a      	bics	r2, r1
 80030ec:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	2220      	movs	r2, #32
 80030f2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	2220      	movs	r2, #32
 80030f8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2274      	movs	r2, #116	; 0x74
 80030fe:	2100      	movs	r1, #0
 8003100:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003102:	2303      	movs	r3, #3
 8003104:	e044      	b.n	8003190 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	2204      	movs	r2, #4
 800310e:	4013      	ands	r3, r2
 8003110:	d02e      	beq.n	8003170 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	69da      	ldr	r2, [r3, #28]
 8003118:	2380      	movs	r3, #128	; 0x80
 800311a:	011b      	lsls	r3, r3, #4
 800311c:	401a      	ands	r2, r3
 800311e:	2380      	movs	r3, #128	; 0x80
 8003120:	011b      	lsls	r3, r3, #4
 8003122:	429a      	cmp	r2, r3
 8003124:	d124      	bne.n	8003170 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	2280      	movs	r2, #128	; 0x80
 800312c:	0112      	lsls	r2, r2, #4
 800312e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4917      	ldr	r1, [pc, #92]	; (8003198 <UART_WaitOnFlagUntilTimeout+0xf8>)
 800313c:	400a      	ands	r2, r1
 800313e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	689a      	ldr	r2, [r3, #8]
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	2101      	movs	r1, #1
 800314c:	438a      	bics	r2, r1
 800314e:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2220      	movs	r2, #32
 8003154:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2220      	movs	r2, #32
 800315a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	2280      	movs	r2, #128	; 0x80
 8003160:	2120      	movs	r1, #32
 8003162:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	2274      	movs	r2, #116	; 0x74
 8003168:	2100      	movs	r1, #0
 800316a:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800316c:	2303      	movs	r3, #3
 800316e:	e00f      	b.n	8003190 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	69db      	ldr	r3, [r3, #28]
 8003176:	68ba      	ldr	r2, [r7, #8]
 8003178:	4013      	ands	r3, r2
 800317a:	68ba      	ldr	r2, [r7, #8]
 800317c:	1ad3      	subs	r3, r2, r3
 800317e:	425a      	negs	r2, r3
 8003180:	4153      	adcs	r3, r2
 8003182:	b2db      	uxtb	r3, r3
 8003184:	001a      	movs	r2, r3
 8003186:	1dfb      	adds	r3, r7, #7
 8003188:	781b      	ldrb	r3, [r3, #0]
 800318a:	429a      	cmp	r2, r3
 800318c:	d091      	beq.n	80030b2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800318e:	2300      	movs	r3, #0
}
 8003190:	0018      	movs	r0, r3
 8003192:	46bd      	mov	sp, r7
 8003194:	b004      	add	sp, #16
 8003196:	bd80      	pop	{r7, pc}
 8003198:	fffffe5f 	.word	0xfffffe5f

0800319c <__libc_init_array>:
 800319c:	b570      	push	{r4, r5, r6, lr}
 800319e:	2600      	movs	r6, #0
 80031a0:	4d0c      	ldr	r5, [pc, #48]	; (80031d4 <__libc_init_array+0x38>)
 80031a2:	4c0d      	ldr	r4, [pc, #52]	; (80031d8 <__libc_init_array+0x3c>)
 80031a4:	1b64      	subs	r4, r4, r5
 80031a6:	10a4      	asrs	r4, r4, #2
 80031a8:	42a6      	cmp	r6, r4
 80031aa:	d109      	bne.n	80031c0 <__libc_init_array+0x24>
 80031ac:	2600      	movs	r6, #0
 80031ae:	f000 f821 	bl	80031f4 <_init>
 80031b2:	4d0a      	ldr	r5, [pc, #40]	; (80031dc <__libc_init_array+0x40>)
 80031b4:	4c0a      	ldr	r4, [pc, #40]	; (80031e0 <__libc_init_array+0x44>)
 80031b6:	1b64      	subs	r4, r4, r5
 80031b8:	10a4      	asrs	r4, r4, #2
 80031ba:	42a6      	cmp	r6, r4
 80031bc:	d105      	bne.n	80031ca <__libc_init_array+0x2e>
 80031be:	bd70      	pop	{r4, r5, r6, pc}
 80031c0:	00b3      	lsls	r3, r6, #2
 80031c2:	58eb      	ldr	r3, [r5, r3]
 80031c4:	4798      	blx	r3
 80031c6:	3601      	adds	r6, #1
 80031c8:	e7ee      	b.n	80031a8 <__libc_init_array+0xc>
 80031ca:	00b3      	lsls	r3, r6, #2
 80031cc:	58eb      	ldr	r3, [r5, r3]
 80031ce:	4798      	blx	r3
 80031d0:	3601      	adds	r6, #1
 80031d2:	e7f2      	b.n	80031ba <__libc_init_array+0x1e>
 80031d4:	0800325c 	.word	0x0800325c
 80031d8:	0800325c 	.word	0x0800325c
 80031dc:	0800325c 	.word	0x0800325c
 80031e0:	08003260 	.word	0x08003260

080031e4 <memset>:
 80031e4:	0003      	movs	r3, r0
 80031e6:	1812      	adds	r2, r2, r0
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d100      	bne.n	80031ee <memset+0xa>
 80031ec:	4770      	bx	lr
 80031ee:	7019      	strb	r1, [r3, #0]
 80031f0:	3301      	adds	r3, #1
 80031f2:	e7f9      	b.n	80031e8 <memset+0x4>

080031f4 <_init>:
 80031f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031f6:	46c0      	nop			; (mov r8, r8)
 80031f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031fa:	bc08      	pop	{r3}
 80031fc:	469e      	mov	lr, r3
 80031fe:	4770      	bx	lr

08003200 <_fini>:
 8003200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003202:	46c0      	nop			; (mov r8, r8)
 8003204:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003206:	bc08      	pop	{r3}
 8003208:	469e      	mov	lr, r3
 800320a:	4770      	bx	lr
