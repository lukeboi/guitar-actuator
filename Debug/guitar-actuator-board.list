
guitar-actuator-board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .user_data    0000000c  08003c00  08003c00  00023c00  2**2
                  ALLOC
  2 .text         00002ff4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000038  080030b4  080030b4  000130b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  080030ec  080030ec  00020010  2**0
                  CONTENTS
  5 .ARM          00000000  080030ec  080030ec  00020010  2**0
                  CONTENTS
  6 .preinit_array 00000000  080030ec  080030ec  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  080030ec  080030ec  000130ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  080030f0  080030f0  000130f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000010  20000000  080030f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00000128  20000010  08003104  00020010  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20000138  08003104  00020138  2**0
                  ALLOC
 12 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000acf7  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 00001ec5  00000000  00000000  0002ad2f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000cc8  00000000  00000000  0002cbf8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000bf8  00000000  00000000  0002d8c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0000fe16  00000000  00000000  0002e4b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000b987  00000000  00000000  0003e2ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0005fe88  00000000  00000000  00049c55  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  000a9add  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002d30  00000000  00000000  000a9b58  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800309c 	.word	0x0800309c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	0800309c 	.word	0x0800309c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <init_config>:

__attribute__((__section__(".user_data"))) config_t flash_config;
config_t ram_config; // Ram config is stored in ram (as opposed to flash)

// Loads config from flash and into ram
void init_config() {
 8000220:	b5b0      	push	{r4, r5, r7, lr}
 8000222:	b086      	sub	sp, #24
 8000224:	af04      	add	r7, sp, #16
	// When code is uploaded, if you want to preserve past settings then make overwrite_config false.
	// If you want to set new settings, set them here and make overwrite_config true.
	bool overwrite_config = false;
 8000226:	1dfb      	adds	r3, r7, #7
 8000228:	2200      	movs	r2, #0
 800022a:	701a      	strb	r2, [r3, #0]
	ram_config.note = 45;
 800022c:	4b10      	ldr	r3, [pc, #64]	; (8000270 <init_config+0x50>)
 800022e:	222d      	movs	r2, #45	; 0x2d
 8000230:	601a      	str	r2, [r3, #0]


	if(!memcmp(ram_config, flash_config, sizeof(config_t)) && overwrite_config) {
 8000232:	4910      	ldr	r1, [pc, #64]	; (8000274 <init_config+0x54>)
 8000234:	4a0e      	ldr	r2, [pc, #56]	; (8000270 <init_config+0x50>)
 8000236:	230c      	movs	r3, #12
 8000238:	9302      	str	r3, [sp, #8]
 800023a:	466b      	mov	r3, sp
 800023c:	0018      	movs	r0, r3
 800023e:	1d0b      	adds	r3, r1, #4
 8000240:	cb30      	ldmia	r3!, {r4, r5}
 8000242:	c030      	stmia	r0!, {r4, r5}
 8000244:	680b      	ldr	r3, [r1, #0]
 8000246:	6810      	ldr	r0, [r2, #0]
 8000248:	6851      	ldr	r1, [r2, #4]
 800024a:	6892      	ldr	r2, [r2, #8]
 800024c:	f002 ff0e 	bl	800306c <memcmp>
 8000250:	1e03      	subs	r3, r0, #0
 8000252:	d105      	bne.n	8000260 <init_config+0x40>
 8000254:	1dfb      	adds	r3, r7, #7
 8000256:	781b      	ldrb	r3, [r3, #0]
 8000258:	2b00      	cmp	r3, #0
 800025a:	d001      	beq.n	8000260 <init_config+0x40>
		Write_Flash();
 800025c:	f000 f80c 	bl	8000278 <Write_Flash>
	}
	ram_config = flash_config;
 8000260:	4b03      	ldr	r3, [pc, #12]	; (8000270 <init_config+0x50>)
 8000262:	4a04      	ldr	r2, [pc, #16]	; (8000274 <init_config+0x54>)
 8000264:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000266:	c313      	stmia	r3!, {r0, r1, r4}
}
 8000268:	46c0      	nop			; (mov r8, r8)
 800026a:	46bd      	mov	sp, r7
 800026c:	b002      	add	sp, #8
 800026e:	bdb0      	pop	{r4, r5, r7, pc}
 8000270:	20000034 	.word	0x20000034
 8000274:	08003c00 	.word	0x08003c00

08000278 <Write_Flash>:

// Writes ram config struct to flash.
// If you want to change the config in flash, change ram config and call this function.
void Write_Flash()
{
 8000278:	b5f0      	push	{r4, r5, r6, r7, lr}
 800027a:	b08d      	sub	sp, #52	; 0x34
 800027c:	af04      	add	r7, sp, #16
	// Only write to flash if our config files differ
	if(memcmp(ram_config, flash_config, sizeof(config_t))) {
 800027e:	4b26      	ldr	r3, [pc, #152]	; (8000318 <Write_Flash+0xa0>)
 8000280:	469c      	mov	ip, r3
 8000282:	4a26      	ldr	r2, [pc, #152]	; (800031c <Write_Flash+0xa4>)
 8000284:	230c      	movs	r3, #12
 8000286:	9302      	str	r3, [sp, #8]
 8000288:	466b      	mov	r3, sp
 800028a:	0018      	movs	r0, r3
 800028c:	4663      	mov	r3, ip
 800028e:	3304      	adds	r3, #4
 8000290:	cb42      	ldmia	r3!, {r1, r6}
 8000292:	c042      	stmia	r0!, {r1, r6}
 8000294:	4663      	mov	r3, ip
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	6810      	ldr	r0, [r2, #0]
 800029a:	6851      	ldr	r1, [r2, #4]
 800029c:	6892      	ldr	r2, [r2, #8]
 800029e:	f002 fee5 	bl	800306c <memcmp>
 80002a2:	1e03      	subs	r3, r0, #0
 80002a4:	d133      	bne.n	800030e <Write_Flash+0x96>
		return;
	}

    HAL_FLASH_Unlock();
 80002a6:	f000 fdd5 	bl	8000e54 <HAL_FLASH_Unlock>

    int startAddress = 0x08003c00;
 80002aa:	4b1d      	ldr	r3, [pc, #116]	; (8000320 <Write_Flash+0xa8>)
 80002ac:	61bb      	str	r3, [r7, #24]
    FLASH_EraseInitTypeDef flashPageEraseConfig;
    flashPageEraseConfig.NbPages = 1;
 80002ae:	2108      	movs	r1, #8
 80002b0:	187b      	adds	r3, r7, r1
 80002b2:	2201      	movs	r2, #1
 80002b4:	609a      	str	r2, [r3, #8]
    flashPageEraseConfig.PageAddress = startAddress;
 80002b6:	69ba      	ldr	r2, [r7, #24]
 80002b8:	187b      	adds	r3, r7, r1
 80002ba:	605a      	str	r2, [r3, #4]
    flashPageEraseConfig.TypeErase = FLASH_TYPEERASE_PAGES;
 80002bc:	187b      	adds	r3, r7, r1
 80002be:	2200      	movs	r2, #0
 80002c0:	601a      	str	r2, [r3, #0]
    uint32_t pageErrors;
    HAL_FLASHEx_Erase(&flashPageEraseConfig, &pageErrors);
 80002c2:	1d3a      	adds	r2, r7, #4
 80002c4:	187b      	adds	r3, r7, r1
 80002c6:	0011      	movs	r1, r2
 80002c8:	0018      	movs	r0, r3
 80002ca:	f000 fe83 	bl	8000fd4 <HAL_FLASHEx_Erase>
    uint32_t* data = (uint32_t*)&ram_config;
 80002ce:	4b13      	ldr	r3, [pc, #76]	; (800031c <Write_Flash+0xa4>)
 80002d0:	617b      	str	r3, [r7, #20]
    for(int i = 0; i<sizeof(config_t); i++) {
 80002d2:	2300      	movs	r3, #0
 80002d4:	61fb      	str	r3, [r7, #28]
 80002d6:	e014      	b.n	8000302 <Write_Flash+0x8a>
    	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, startAddress+(4*i), data[i]);
 80002d8:	69fb      	ldr	r3, [r7, #28]
 80002da:	009a      	lsls	r2, r3, #2
 80002dc:	69bb      	ldr	r3, [r7, #24]
 80002de:	18d3      	adds	r3, r2, r3
 80002e0:	0019      	movs	r1, r3
 80002e2:	69fb      	ldr	r3, [r7, #28]
 80002e4:	009b      	lsls	r3, r3, #2
 80002e6:	697a      	ldr	r2, [r7, #20]
 80002e8:	18d3      	adds	r3, r2, r3
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	001c      	movs	r4, r3
 80002ee:	2300      	movs	r3, #0
 80002f0:	001d      	movs	r5, r3
 80002f2:	0022      	movs	r2, r4
 80002f4:	002b      	movs	r3, r5
 80002f6:	2002      	movs	r0, #2
 80002f8:	f000 fd16 	bl	8000d28 <HAL_FLASH_Program>
    for(int i = 0; i<sizeof(config_t); i++) {
 80002fc:	69fb      	ldr	r3, [r7, #28]
 80002fe:	3301      	adds	r3, #1
 8000300:	61fb      	str	r3, [r7, #28]
 8000302:	69fb      	ldr	r3, [r7, #28]
 8000304:	2b0b      	cmp	r3, #11
 8000306:	d9e7      	bls.n	80002d8 <Write_Flash+0x60>
    }
    HAL_FLASH_Lock();
 8000308:	f000 fdca 	bl	8000ea0 <HAL_FLASH_Lock>
 800030c:	e000      	b.n	8000310 <Write_Flash+0x98>
		return;
 800030e:	46c0      	nop			; (mov r8, r8)
}
 8000310:	46bd      	mov	sp, r7
 8000312:	b009      	add	sp, #36	; 0x24
 8000314:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000316:	46c0      	nop			; (mov r8, r8)
 8000318:	08003c00 	.word	0x08003c00
 800031c:	20000034 	.word	0x20000034
 8000320:	08003c00 	.word	0x08003c00

08000324 <process_midi_message>:
extern UART_HandleTypeDef huart1;
extern config_t config;


//processes a MIDI message. we return a 1 if we need to strum. Some messages can be 2 bytes, so the third byte might just be 0x0.
int process_midi_message(uint8_t byte1) { //TODO: later change this to array
 8000324:	b580      	push	{r7, lr}
 8000326:	b082      	sub	sp, #8
 8000328:	af00      	add	r7, sp, #0
 800032a:	0002      	movs	r2, r0
 800032c:	1dfb      	adds	r3, r7, #7
 800032e:	701a      	strb	r2, [r3, #0]
	if(byte1 >= 128) { //check to see if the first bit of the first byte this means that its a system message and we need to switch to that status
 8000330:	1dfb      	adds	r3, r7, #7
 8000332:	781b      	ldrb	r3, [r3, #0]
 8000334:	b25b      	sxtb	r3, r3
 8000336:	2b00      	cmp	r3, #0
 8000338:	da1a      	bge.n	8000370 <process_midi_message+0x4c>
        CURRENT_STATUS = byte1; //unused for now
 800033a:	1dfb      	adds	r3, r7, #7
 800033c:	781a      	ldrb	r2, [r3, #0]
 800033e:	4b2a      	ldr	r3, [pc, #168]	; (80003e8 <process_midi_message+0xc4>)
 8000340:	601a      	str	r2, [r3, #0]

        switch (byte1) { //now, interpret the message itself
 8000342:	1dfb      	adds	r3, r7, #7
 8000344:	781b      	ldrb	r3, [r3, #0]
 8000346:	2bb0      	cmp	r3, #176	; 0xb0
 8000348:	d03d      	beq.n	80003c6 <process_midi_message+0xa2>
 800034a:	dc06      	bgt.n	800035a <process_midi_message+0x36>
 800034c:	2b90      	cmp	r3, #144	; 0x90
 800034e:	d00b      	beq.n	8000368 <process_midi_message+0x44>
 8000350:	2ba0      	cmp	r3, #160	; 0xa0
 8000352:	d03a      	beq.n	80003ca <process_midi_message+0xa6>
 8000354:	2b80      	cmp	r3, #128	; 0x80
 8000356:	d03a      	beq.n	80003ce <process_midi_message+0xaa>

        case STATUS_PITCH_BEND:
            break;

        default:
            break;
 8000358:	e040      	b.n	80003dc <process_midi_message+0xb8>
        switch (byte1) { //now, interpret the message itself
 800035a:	2bd0      	cmp	r3, #208	; 0xd0
 800035c:	d039      	beq.n	80003d2 <process_midi_message+0xae>
 800035e:	2be0      	cmp	r3, #224	; 0xe0
 8000360:	d039      	beq.n	80003d6 <process_midi_message+0xb2>
 8000362:	2bc0      	cmp	r3, #192	; 0xc0
 8000364:	d039      	beq.n	80003da <process_midi_message+0xb6>
            break;
 8000366:	e039      	b.n	80003dc <process_midi_message+0xb8>
        	state = STATE_READ_KEY;
 8000368:	4b20      	ldr	r3, [pc, #128]	; (80003ec <process_midi_message+0xc8>)
 800036a:	2202      	movs	r2, #2
 800036c:	701a      	strb	r2, [r3, #0]
            break;
 800036e:	e035      	b.n	80003dc <process_midi_message+0xb8>
        }
    }
    else {
        //if the first byte isn’t a status byte, then we are in the previous status. aka running status. depending on current status
        switch(state) {
 8000370:	4b1e      	ldr	r3, [pc, #120]	; (80003ec <process_midi_message+0xc8>)
 8000372:	781b      	ldrb	r3, [r3, #0]
 8000374:	2b02      	cmp	r3, #2
 8000376:	d002      	beq.n	800037e <process_midi_message+0x5a>
 8000378:	2b03      	cmp	r3, #3
 800037a:	d008      	beq.n	800038e <process_midi_message+0x6a>
 800037c:	e02e      	b.n	80003dc <process_midi_message+0xb8>
        case STATE_READ_KEY:
        	recived_key = byte1;
 800037e:	4b1c      	ldr	r3, [pc, #112]	; (80003f0 <process_midi_message+0xcc>)
 8000380:	1dfa      	adds	r2, r7, #7
 8000382:	7812      	ldrb	r2, [r2, #0]
 8000384:	701a      	strb	r2, [r3, #0]
        	state = STATE_READ_VELOCITY;
 8000386:	4b19      	ldr	r3, [pc, #100]	; (80003ec <process_midi_message+0xc8>)
 8000388:	2203      	movs	r2, #3
 800038a:	701a      	strb	r2, [r3, #0]
        	break;
 800038c:	e026      	b.n	80003dc <process_midi_message+0xb8>

        case STATE_READ_VELOCITY:
        	recived_velocity = byte1;
 800038e:	4b19      	ldr	r3, [pc, #100]	; (80003f4 <process_midi_message+0xd0>)
 8000390:	1dfa      	adds	r2, r7, #7
 8000392:	7812      	ldrb	r2, [r2, #0]
 8000394:	701a      	strb	r2, [r3, #0]
        	if (recived_key == ram_config.note && recived_velocity > 0) {
 8000396:	4b16      	ldr	r3, [pc, #88]	; (80003f0 <process_midi_message+0xcc>)
 8000398:	781b      	ldrb	r3, [r3, #0]
 800039a:	001a      	movs	r2, r3
 800039c:	4b16      	ldr	r3, [pc, #88]	; (80003f8 <process_midi_message+0xd4>)
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	429a      	cmp	r2, r3
 80003a2:	d107      	bne.n	80003b4 <process_midi_message+0x90>
 80003a4:	4b13      	ldr	r3, [pc, #76]	; (80003f4 <process_midi_message+0xd0>)
 80003a6:	781b      	ldrb	r3, [r3, #0]
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d003      	beq.n	80003b4 <process_midi_message+0x90>
        		state = STATE_PLAY_NOTE;
 80003ac:	4b0f      	ldr	r3, [pc, #60]	; (80003ec <process_midi_message+0xc8>)
 80003ae:	2204      	movs	r2, #4
 80003b0:	701a      	strb	r2, [r3, #0]
 80003b2:	e002      	b.n	80003ba <process_midi_message+0x96>
        	}
        	else {
        		state = STATE_IDLE;
 80003b4:	4b0d      	ldr	r3, [pc, #52]	; (80003ec <process_midi_message+0xc8>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	701a      	strb	r2, [r3, #0]
        	}
    		process_programming_state(recived_key);
 80003ba:	4b0d      	ldr	r3, [pc, #52]	; (80003f0 <process_midi_message+0xcc>)
 80003bc:	781b      	ldrb	r3, [r3, #0]
 80003be:	0018      	movs	r0, r3
 80003c0:	f000 f81c 	bl	80003fc <process_programming_state>
 80003c4:	e00a      	b.n	80003dc <process_midi_message+0xb8>
            break;
 80003c6:	46c0      	nop			; (mov r8, r8)
 80003c8:	e008      	b.n	80003dc <process_midi_message+0xb8>
            break;
 80003ca:	46c0      	nop			; (mov r8, r8)
 80003cc:	e006      	b.n	80003dc <process_midi_message+0xb8>
            break;
 80003ce:	46c0      	nop			; (mov r8, r8)
 80003d0:	e004      	b.n	80003dc <process_midi_message+0xb8>
            break;
 80003d2:	46c0      	nop			; (mov r8, r8)
 80003d4:	e002      	b.n	80003dc <process_midi_message+0xb8>
            break;
 80003d6:	46c0      	nop			; (mov r8, r8)
 80003d8:	e000      	b.n	80003dc <process_midi_message+0xb8>
            break;
 80003da:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 80003dc:	46c0      	nop			; (mov r8, r8)
 80003de:	0018      	movs	r0, r3
 80003e0:	46bd      	mov	sp, r7
 80003e2:	b002      	add	sp, #8
 80003e4:	bd80      	pop	{r7, pc}
 80003e6:	46c0      	nop			; (mov r8, r8)
 80003e8:	2000002c 	.word	0x2000002c
 80003ec:	20000040 	.word	0x20000040
 80003f0:	20000043 	.word	0x20000043
 80003f4:	20000042 	.word	0x20000042
 80003f8:	20000034 	.word	0x20000034

080003fc <process_programming_state>:

// State machine for programming state (programming state is for changing paramaters in flash)
void process_programming_state(uint8_t note) {
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b082      	sub	sp, #8
 8000400:	af00      	add	r7, sp, #0
 8000402:	0002      	movs	r2, r0
 8000404:	1dfb      	adds	r3, r7, #7
 8000406:	701a      	strb	r2, [r3, #0]
	switch(programming_state) {
 8000408:	4b21      	ldr	r3, [pc, #132]	; (8000490 <process_programming_state+0x94>)
 800040a:	781b      	ldrb	r3, [r3, #0]
 800040c:	2b01      	cmp	r3, #1
 800040e:	d014      	beq.n	800043a <process_programming_state+0x3e>
 8000410:	dc02      	bgt.n	8000418 <process_programming_state+0x1c>
 8000412:	2b00      	cmp	r3, #0
 8000414:	d005      	beq.n	8000422 <process_programming_state+0x26>
		else {
			programming_state = PASSCODE_NONE;
		}
		break;
	}
}
 8000416:	e037      	b.n	8000488 <process_programming_state+0x8c>
	switch(programming_state) {
 8000418:	2b02      	cmp	r3, #2
 800041a:	d01a      	beq.n	8000452 <process_programming_state+0x56>
 800041c:	2b03      	cmp	r3, #3
 800041e:	d024      	beq.n	800046a <process_programming_state+0x6e>
}
 8000420:	e032      	b.n	8000488 <process_programming_state+0x8c>
		if (note == 84) {
 8000422:	1dfb      	adds	r3, r7, #7
 8000424:	781b      	ldrb	r3, [r3, #0]
 8000426:	2b54      	cmp	r3, #84	; 0x54
 8000428:	d103      	bne.n	8000432 <process_programming_state+0x36>
			programming_state = PASSCODE_1;
 800042a:	4b19      	ldr	r3, [pc, #100]	; (8000490 <process_programming_state+0x94>)
 800042c:	2201      	movs	r2, #1
 800042e:	701a      	strb	r2, [r3, #0]
		break;
 8000430:	e02a      	b.n	8000488 <process_programming_state+0x8c>
			programming_state = PASSCODE_NONE;
 8000432:	4b17      	ldr	r3, [pc, #92]	; (8000490 <process_programming_state+0x94>)
 8000434:	2200      	movs	r2, #0
 8000436:	701a      	strb	r2, [r3, #0]
		break;
 8000438:	e026      	b.n	8000488 <process_programming_state+0x8c>
		if (note == 82) {
 800043a:	1dfb      	adds	r3, r7, #7
 800043c:	781b      	ldrb	r3, [r3, #0]
 800043e:	2b52      	cmp	r3, #82	; 0x52
 8000440:	d103      	bne.n	800044a <process_programming_state+0x4e>
			programming_state = PASSCODE_2;
 8000442:	4b13      	ldr	r3, [pc, #76]	; (8000490 <process_programming_state+0x94>)
 8000444:	2202      	movs	r2, #2
 8000446:	701a      	strb	r2, [r3, #0]
		break;
 8000448:	e01e      	b.n	8000488 <process_programming_state+0x8c>
			programming_state = PASSCODE_NONE;
 800044a:	4b11      	ldr	r3, [pc, #68]	; (8000490 <process_programming_state+0x94>)
 800044c:	2200      	movs	r2, #0
 800044e:	701a      	strb	r2, [r3, #0]
		break;
 8000450:	e01a      	b.n	8000488 <process_programming_state+0x8c>
		if (note == 83) {
 8000452:	1dfb      	adds	r3, r7, #7
 8000454:	781b      	ldrb	r3, [r3, #0]
 8000456:	2b53      	cmp	r3, #83	; 0x53
 8000458:	d103      	bne.n	8000462 <process_programming_state+0x66>
			programming_state = PASSCODE_3;
 800045a:	4b0d      	ldr	r3, [pc, #52]	; (8000490 <process_programming_state+0x94>)
 800045c:	2203      	movs	r2, #3
 800045e:	701a      	strb	r2, [r3, #0]
		break;
 8000460:	e012      	b.n	8000488 <process_programming_state+0x8c>
			programming_state = PASSCODE_NONE;
 8000462:	4b0b      	ldr	r3, [pc, #44]	; (8000490 <process_programming_state+0x94>)
 8000464:	2200      	movs	r2, #0
 8000466:	701a      	strb	r2, [r3, #0]
		break;
 8000468:	e00e      	b.n	8000488 <process_programming_state+0x8c>
		if (note == 81) {
 800046a:	1dfb      	adds	r3, r7, #7
 800046c:	781b      	ldrb	r3, [r3, #0]
 800046e:	2b51      	cmp	r3, #81	; 0x51
 8000470:	d106      	bne.n	8000480 <process_programming_state+0x84>
			programming_state = PROGRAMMING;
 8000472:	4b07      	ldr	r3, [pc, #28]	; (8000490 <process_programming_state+0x94>)
 8000474:	2204      	movs	r2, #4
 8000476:	701a      	strb	r2, [r3, #0]
			state = STATE_PROGRAMMING;
 8000478:	4b06      	ldr	r3, [pc, #24]	; (8000494 <process_programming_state+0x98>)
 800047a:	2205      	movs	r2, #5
 800047c:	701a      	strb	r2, [r3, #0]
		break;
 800047e:	e002      	b.n	8000486 <process_programming_state+0x8a>
			programming_state = PASSCODE_NONE;
 8000480:	4b03      	ldr	r3, [pc, #12]	; (8000490 <process_programming_state+0x94>)
 8000482:	2200      	movs	r2, #0
 8000484:	701a      	strb	r2, [r3, #0]
		break;
 8000486:	46c0      	nop			; (mov r8, r8)
}
 8000488:	46c0      	nop			; (mov r8, r8)
 800048a:	46bd      	mov	sp, r7
 800048c:	b002      	add	sp, #8
 800048e:	bd80      	pop	{r7, pc}
 8000490:	20000041 	.word	0x20000041
 8000494:	20000040 	.word	0x20000040

08000498 <set_pulse>:
#include "strummer.h"
#include "./main.h"

int is_flipped = 0;

void set_pulse(int p) {
 8000498:	b580      	push	{r7, lr}
 800049a:	b082      	sub	sp, #8
 800049c:	af00      	add	r7, sp, #0
 800049e:	6078      	str	r0, [r7, #4]
	TIM1->CCR2 = p;
 80004a0:	4b03      	ldr	r3, [pc, #12]	; (80004b0 <set_pulse+0x18>)
 80004a2:	687a      	ldr	r2, [r7, #4]
 80004a4:	639a      	str	r2, [r3, #56]	; 0x38
}
 80004a6:	46c0      	nop			; (mov r8, r8)
 80004a8:	46bd      	mov	sp, r7
 80004aa:	b002      	add	sp, #8
 80004ac:	bd80      	pop	{r7, pc}
 80004ae:	46c0      	nop			; (mov r8, r8)
 80004b0:	40012c00 	.word	0x40012c00

080004b4 <strum>:

void strum() {
 80004b4:	b580      	push	{r7, lr}
 80004b6:	af00      	add	r7, sp, #0
    if(is_flipped == 0) {
 80004b8:	4b0a      	ldr	r3, [pc, #40]	; (80004e4 <strum+0x30>)
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d107      	bne.n	80004d0 <strum+0x1c>
        set_pulse(STRUMMED_ON_POSITION);
 80004c0:	4b09      	ldr	r3, [pc, #36]	; (80004e8 <strum+0x34>)
 80004c2:	0018      	movs	r0, r3
 80004c4:	f7ff ffe8 	bl	8000498 <set_pulse>
        is_flipped = 1;
 80004c8:	4b06      	ldr	r3, [pc, #24]	; (80004e4 <strum+0x30>)
 80004ca:	2201      	movs	r2, #1
 80004cc:	601a      	str	r2, [r3, #0]
    }
    else {
        set_pulse(STRUMMED_OFF_POSITION);
        is_flipped = 0;
    }
}
 80004ce:	e006      	b.n	80004de <strum+0x2a>
        set_pulse(STRUMMED_OFF_POSITION);
 80004d0:	4b06      	ldr	r3, [pc, #24]	; (80004ec <strum+0x38>)
 80004d2:	0018      	movs	r0, r3
 80004d4:	f7ff ffe0 	bl	8000498 <set_pulse>
        is_flipped = 0;
 80004d8:	4b02      	ldr	r3, [pc, #8]	; (80004e4 <strum+0x30>)
 80004da:	2200      	movs	r2, #0
 80004dc:	601a      	str	r2, [r3, #0]
}
 80004de:	46c0      	nop			; (mov r8, r8)
 80004e0:	46bd      	mov	sp, r7
 80004e2:	bd80      	pop	{r7, pc}
 80004e4:	20000030 	.word	0x20000030
 80004e8:	0000199d 	.word	0x0000199d
 80004ec:	00000cce 	.word	0x00000cce

080004f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f4:	f000 fade 	bl	8000ab4 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f8:	f000 f836 	bl	8000568 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004fc:	f000 f962 	bl	80007c4 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000500:	f000 f894 	bl	800062c <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000504:	f000 f928 	bl	8000758 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000508:	4b13      	ldr	r3, [pc, #76]	; (8000558 <main+0x68>)
 800050a:	2104      	movs	r1, #4
 800050c:	0018      	movs	r0, r3
 800050e:	f001 fd41 	bl	8001f94 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  init_config();
 8000512:	f7ff fe85 	bl	8000220 <init_config>
  blink(3);
 8000516:	2003      	movs	r0, #3
 8000518:	f000 f98c 	bl	8000834 <blink>
  toggleLED();
 800051c:	f000 f9a2 	bl	8000864 <toggleLED>
  strum();
 8000520:	f7ff ffc8 	bl	80004b4 <strum>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	if(HAL_UART_Receive(&huart1, &message, 1, HAL_MAX_DELAY) == HAL_OK) {
 8000524:	2301      	movs	r3, #1
 8000526:	425b      	negs	r3, r3
 8000528:	490c      	ldr	r1, [pc, #48]	; (800055c <main+0x6c>)
 800052a:	480d      	ldr	r0, [pc, #52]	; (8000560 <main+0x70>)
 800052c:	2201      	movs	r2, #1
 800052e:	f002 f9fb 	bl	8002928 <HAL_UART_Receive>
 8000532:	1e03      	subs	r3, r0, #0
 8000534:	d104      	bne.n	8000540 <main+0x50>
		process_midi_message(message);
 8000536:	4b09      	ldr	r3, [pc, #36]	; (800055c <main+0x6c>)
 8000538:	781b      	ldrb	r3, [r3, #0]
 800053a:	0018      	movs	r0, r3
 800053c:	f7ff fef2 	bl	8000324 <process_midi_message>
	}

	if (state == STATE_PLAY_NOTE) {
 8000540:	4b08      	ldr	r3, [pc, #32]	; (8000564 <main+0x74>)
 8000542:	781b      	ldrb	r3, [r3, #0]
 8000544:	2b04      	cmp	r3, #4
 8000546:	d1ed      	bne.n	8000524 <main+0x34>
		toggleLED();
 8000548:	f000 f98c 	bl	8000864 <toggleLED>
		strum();
 800054c:	f7ff ffb2 	bl	80004b4 <strum>
		state = STATE_IDLE;
 8000550:	4b04      	ldr	r3, [pc, #16]	; (8000564 <main+0x74>)
 8000552:	2200      	movs	r2, #0
 8000554:	701a      	strb	r2, [r3, #0]
	if(HAL_UART_Receive(&huart1, &message, 1, HAL_MAX_DELAY) == HAL_OK) {
 8000556:	e7e5      	b.n	8000524 <main+0x34>
 8000558:	200000c8 	.word	0x200000c8
 800055c:	20000000 	.word	0x20000000
 8000560:	20000044 	.word	0x20000044
 8000564:	20000040 	.word	0x20000040

08000568 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000568:	b590      	push	{r4, r7, lr}
 800056a:	b095      	sub	sp, #84	; 0x54
 800056c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800056e:	2420      	movs	r4, #32
 8000570:	193b      	adds	r3, r7, r4
 8000572:	0018      	movs	r0, r3
 8000574:	2330      	movs	r3, #48	; 0x30
 8000576:	001a      	movs	r2, r3
 8000578:	2100      	movs	r1, #0
 800057a:	f002 fd86 	bl	800308a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800057e:	2310      	movs	r3, #16
 8000580:	18fb      	adds	r3, r7, r3
 8000582:	0018      	movs	r0, r3
 8000584:	2310      	movs	r3, #16
 8000586:	001a      	movs	r2, r3
 8000588:	2100      	movs	r1, #0
 800058a:	f002 fd7e 	bl	800308a <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800058e:	003b      	movs	r3, r7
 8000590:	0018      	movs	r0, r3
 8000592:	2310      	movs	r3, #16
 8000594:	001a      	movs	r2, r3
 8000596:	2100      	movs	r1, #0
 8000598:	f002 fd77 	bl	800308a <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800059c:	0021      	movs	r1, r4
 800059e:	187b      	adds	r3, r7, r1
 80005a0:	2202      	movs	r2, #2
 80005a2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005a4:	187b      	adds	r3, r7, r1
 80005a6:	2201      	movs	r2, #1
 80005a8:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005aa:	187b      	adds	r3, r7, r1
 80005ac:	2210      	movs	r2, #16
 80005ae:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005b0:	187b      	adds	r3, r7, r1
 80005b2:	2202      	movs	r2, #2
 80005b4:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005b6:	187b      	adds	r3, r7, r1
 80005b8:	2200      	movs	r2, #0
 80005ba:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80005bc:	187b      	adds	r3, r7, r1
 80005be:	22a0      	movs	r2, #160	; 0xa0
 80005c0:	0392      	lsls	r2, r2, #14
 80005c2:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80005c4:	187b      	adds	r3, r7, r1
 80005c6:	2200      	movs	r2, #0
 80005c8:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ca:	187b      	adds	r3, r7, r1
 80005cc:	0018      	movs	r0, r3
 80005ce:	f000 ff55 	bl	800147c <HAL_RCC_OscConfig>
 80005d2:	1e03      	subs	r3, r0, #0
 80005d4:	d001      	beq.n	80005da <SystemClock_Config+0x72>
  {
    Error_Handler();
 80005d6:	f000 f950 	bl	800087a <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005da:	2110      	movs	r1, #16
 80005dc:	187b      	adds	r3, r7, r1
 80005de:	2207      	movs	r2, #7
 80005e0:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005e2:	187b      	adds	r3, r7, r1
 80005e4:	2202      	movs	r2, #2
 80005e6:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005e8:	187b      	adds	r3, r7, r1
 80005ea:	2200      	movs	r2, #0
 80005ec:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005ee:	187b      	adds	r3, r7, r1
 80005f0:	2200      	movs	r2, #0
 80005f2:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005f4:	187b      	adds	r3, r7, r1
 80005f6:	2101      	movs	r1, #1
 80005f8:	0018      	movs	r0, r3
 80005fa:	f001 fa5b 	bl	8001ab4 <HAL_RCC_ClockConfig>
 80005fe:	1e03      	subs	r3, r0, #0
 8000600:	d001      	beq.n	8000606 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000602:	f000 f93a 	bl	800087a <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000606:	003b      	movs	r3, r7
 8000608:	2201      	movs	r2, #1
 800060a:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800060c:	003b      	movs	r3, r7
 800060e:	2200      	movs	r2, #0
 8000610:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000612:	003b      	movs	r3, r7
 8000614:	0018      	movs	r0, r3
 8000616:	f001 fb9f 	bl	8001d58 <HAL_RCCEx_PeriphCLKConfig>
 800061a:	1e03      	subs	r3, r0, #0
 800061c:	d001      	beq.n	8000622 <SystemClock_Config+0xba>
  {
    Error_Handler();
 800061e:	f000 f92c 	bl	800087a <Error_Handler>
  }
}
 8000622:	46c0      	nop			; (mov r8, r8)
 8000624:	46bd      	mov	sp, r7
 8000626:	b015      	add	sp, #84	; 0x54
 8000628:	bd90      	pop	{r4, r7, pc}
	...

0800062c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b092      	sub	sp, #72	; 0x48
 8000630:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000632:	2340      	movs	r3, #64	; 0x40
 8000634:	18fb      	adds	r3, r7, r3
 8000636:	0018      	movs	r0, r3
 8000638:	2308      	movs	r3, #8
 800063a:	001a      	movs	r2, r3
 800063c:	2100      	movs	r1, #0
 800063e:	f002 fd24 	bl	800308a <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000642:	2324      	movs	r3, #36	; 0x24
 8000644:	18fb      	adds	r3, r7, r3
 8000646:	0018      	movs	r0, r3
 8000648:	231c      	movs	r3, #28
 800064a:	001a      	movs	r2, r3
 800064c:	2100      	movs	r1, #0
 800064e:	f002 fd1c 	bl	800308a <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000652:	1d3b      	adds	r3, r7, #4
 8000654:	0018      	movs	r0, r3
 8000656:	2320      	movs	r3, #32
 8000658:	001a      	movs	r2, r3
 800065a:	2100      	movs	r1, #0
 800065c:	f002 fd15 	bl	800308a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000660:	4b3a      	ldr	r3, [pc, #232]	; (800074c <MX_TIM1_Init+0x120>)
 8000662:	4a3b      	ldr	r2, [pc, #236]	; (8000750 <MX_TIM1_Init+0x124>)
 8000664:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 14;
 8000666:	4b39      	ldr	r3, [pc, #228]	; (800074c <MX_TIM1_Init+0x120>)
 8000668:	220e      	movs	r2, #14
 800066a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800066c:	4b37      	ldr	r3, [pc, #220]	; (800074c <MX_TIM1_Init+0x120>)
 800066e:	2200      	movs	r2, #0
 8000670:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000672:	4b36      	ldr	r3, [pc, #216]	; (800074c <MX_TIM1_Init+0x120>)
 8000674:	4a37      	ldr	r2, [pc, #220]	; (8000754 <MX_TIM1_Init+0x128>)
 8000676:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000678:	4b34      	ldr	r3, [pc, #208]	; (800074c <MX_TIM1_Init+0x120>)
 800067a:	2200      	movs	r2, #0
 800067c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800067e:	4b33      	ldr	r3, [pc, #204]	; (800074c <MX_TIM1_Init+0x120>)
 8000680:	2200      	movs	r2, #0
 8000682:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000684:	4b31      	ldr	r3, [pc, #196]	; (800074c <MX_TIM1_Init+0x120>)
 8000686:	2200      	movs	r2, #0
 8000688:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800068a:	4b30      	ldr	r3, [pc, #192]	; (800074c <MX_TIM1_Init+0x120>)
 800068c:	0018      	movs	r0, r3
 800068e:	f001 fc31 	bl	8001ef4 <HAL_TIM_PWM_Init>
 8000692:	1e03      	subs	r3, r0, #0
 8000694:	d001      	beq.n	800069a <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000696:	f000 f8f0 	bl	800087a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800069a:	2140      	movs	r1, #64	; 0x40
 800069c:	187b      	adds	r3, r7, r1
 800069e:	2200      	movs	r2, #0
 80006a0:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006a2:	187b      	adds	r3, r7, r1
 80006a4:	2200      	movs	r2, #0
 80006a6:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80006a8:	187a      	adds	r2, r7, r1
 80006aa:	4b28      	ldr	r3, [pc, #160]	; (800074c <MX_TIM1_Init+0x120>)
 80006ac:	0011      	movs	r1, r2
 80006ae:	0018      	movs	r0, r3
 80006b0:	f002 f836 	bl	8002720 <HAL_TIMEx_MasterConfigSynchronization>
 80006b4:	1e03      	subs	r3, r0, #0
 80006b6:	d001      	beq.n	80006bc <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80006b8:	f000 f8df 	bl	800087a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006bc:	2124      	movs	r1, #36	; 0x24
 80006be:	187b      	adds	r3, r7, r1
 80006c0:	2260      	movs	r2, #96	; 0x60
 80006c2:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80006c4:	187b      	adds	r3, r7, r1
 80006c6:	2200      	movs	r2, #0
 80006c8:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006ca:	187b      	adds	r3, r7, r1
 80006cc:	2200      	movs	r2, #0
 80006ce:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80006d0:	187b      	adds	r3, r7, r1
 80006d2:	2200      	movs	r2, #0
 80006d4:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006d6:	187b      	adds	r3, r7, r1
 80006d8:	2200      	movs	r2, #0
 80006da:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80006dc:	187b      	adds	r3, r7, r1
 80006de:	2200      	movs	r2, #0
 80006e0:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80006e2:	187b      	adds	r3, r7, r1
 80006e4:	2200      	movs	r2, #0
 80006e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80006e8:	1879      	adds	r1, r7, r1
 80006ea:	4b18      	ldr	r3, [pc, #96]	; (800074c <MX_TIM1_Init+0x120>)
 80006ec:	2204      	movs	r2, #4
 80006ee:	0018      	movs	r0, r3
 80006f0:	f001 fcf6 	bl	80020e0 <HAL_TIM_PWM_ConfigChannel>
 80006f4:	1e03      	subs	r3, r0, #0
 80006f6:	d001      	beq.n	80006fc <MX_TIM1_Init+0xd0>
  {
    Error_Handler();
 80006f8:	f000 f8bf 	bl	800087a <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80006fc:	1d3b      	adds	r3, r7, #4
 80006fe:	2200      	movs	r2, #0
 8000700:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000702:	1d3b      	adds	r3, r7, #4
 8000704:	2200      	movs	r2, #0
 8000706:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000708:	1d3b      	adds	r3, r7, #4
 800070a:	2200      	movs	r2, #0
 800070c:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800070e:	1d3b      	adds	r3, r7, #4
 8000710:	2200      	movs	r2, #0
 8000712:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000714:	1d3b      	adds	r3, r7, #4
 8000716:	2200      	movs	r2, #0
 8000718:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800071a:	1d3b      	adds	r3, r7, #4
 800071c:	2280      	movs	r2, #128	; 0x80
 800071e:	0192      	lsls	r2, r2, #6
 8000720:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000722:	1d3b      	adds	r3, r7, #4
 8000724:	2200      	movs	r2, #0
 8000726:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000728:	1d3a      	adds	r2, r7, #4
 800072a:	4b08      	ldr	r3, [pc, #32]	; (800074c <MX_TIM1_Init+0x120>)
 800072c:	0011      	movs	r1, r2
 800072e:	0018      	movs	r0, r3
 8000730:	f002 f848 	bl	80027c4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000734:	1e03      	subs	r3, r0, #0
 8000736:	d001      	beq.n	800073c <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8000738:	f000 f89f 	bl	800087a <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800073c:	4b03      	ldr	r3, [pc, #12]	; (800074c <MX_TIM1_Init+0x120>)
 800073e:	0018      	movs	r0, r3
 8000740:	f000 f8e4 	bl	800090c <HAL_TIM_MspPostInit>

}
 8000744:	46c0      	nop			; (mov r8, r8)
 8000746:	46bd      	mov	sp, r7
 8000748:	b012      	add	sp, #72	; 0x48
 800074a:	bd80      	pop	{r7, pc}
 800074c:	200000c8 	.word	0x200000c8
 8000750:	40012c00 	.word	0x40012c00
 8000754:	0000ffff 	.word	0x0000ffff

08000758 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800075c:	4b16      	ldr	r3, [pc, #88]	; (80007b8 <MX_USART1_UART_Init+0x60>)
 800075e:	4a17      	ldr	r2, [pc, #92]	; (80007bc <MX_USART1_UART_Init+0x64>)
 8000760:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 31250;
 8000762:	4b15      	ldr	r3, [pc, #84]	; (80007b8 <MX_USART1_UART_Init+0x60>)
 8000764:	4a16      	ldr	r2, [pc, #88]	; (80007c0 <MX_USART1_UART_Init+0x68>)
 8000766:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000768:	4b13      	ldr	r3, [pc, #76]	; (80007b8 <MX_USART1_UART_Init+0x60>)
 800076a:	2200      	movs	r2, #0
 800076c:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800076e:	4b12      	ldr	r3, [pc, #72]	; (80007b8 <MX_USART1_UART_Init+0x60>)
 8000770:	2200      	movs	r2, #0
 8000772:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000774:	4b10      	ldr	r3, [pc, #64]	; (80007b8 <MX_USART1_UART_Init+0x60>)
 8000776:	2200      	movs	r2, #0
 8000778:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800077a:	4b0f      	ldr	r3, [pc, #60]	; (80007b8 <MX_USART1_UART_Init+0x60>)
 800077c:	220c      	movs	r2, #12
 800077e:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000780:	4b0d      	ldr	r3, [pc, #52]	; (80007b8 <MX_USART1_UART_Init+0x60>)
 8000782:	2200      	movs	r2, #0
 8000784:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000786:	4b0c      	ldr	r3, [pc, #48]	; (80007b8 <MX_USART1_UART_Init+0x60>)
 8000788:	2200      	movs	r2, #0
 800078a:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800078c:	4b0a      	ldr	r3, [pc, #40]	; (80007b8 <MX_USART1_UART_Init+0x60>)
 800078e:	2200      	movs	r2, #0
 8000790:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 8000792:	4b09      	ldr	r3, [pc, #36]	; (80007b8 <MX_USART1_UART_Init+0x60>)
 8000794:	2210      	movs	r2, #16
 8000796:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8000798:	4b07      	ldr	r3, [pc, #28]	; (80007b8 <MX_USART1_UART_Init+0x60>)
 800079a:	2280      	movs	r2, #128	; 0x80
 800079c:	0152      	lsls	r2, r2, #5
 800079e:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007a0:	4b05      	ldr	r3, [pc, #20]	; (80007b8 <MX_USART1_UART_Init+0x60>)
 80007a2:	0018      	movs	r0, r3
 80007a4:	f002 f86c 	bl	8002880 <HAL_UART_Init>
 80007a8:	1e03      	subs	r3, r0, #0
 80007aa:	d001      	beq.n	80007b0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80007ac:	f000 f865 	bl	800087a <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007b0:	46c0      	nop			; (mov r8, r8)
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	46c0      	nop			; (mov r8, r8)
 80007b8:	20000044 	.word	0x20000044
 80007bc:	40013800 	.word	0x40013800
 80007c0:	00007a12 	.word	0x00007a12

080007c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b086      	sub	sp, #24
 80007c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ca:	1d3b      	adds	r3, r7, #4
 80007cc:	0018      	movs	r0, r3
 80007ce:	2314      	movs	r3, #20
 80007d0:	001a      	movs	r2, r3
 80007d2:	2100      	movs	r1, #0
 80007d4:	f002 fc59 	bl	800308a <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d8:	4b15      	ldr	r3, [pc, #84]	; (8000830 <MX_GPIO_Init+0x6c>)
 80007da:	695a      	ldr	r2, [r3, #20]
 80007dc:	4b14      	ldr	r3, [pc, #80]	; (8000830 <MX_GPIO_Init+0x6c>)
 80007de:	2180      	movs	r1, #128	; 0x80
 80007e0:	0289      	lsls	r1, r1, #10
 80007e2:	430a      	orrs	r2, r1
 80007e4:	615a      	str	r2, [r3, #20]
 80007e6:	4b12      	ldr	r3, [pc, #72]	; (8000830 <MX_GPIO_Init+0x6c>)
 80007e8:	695a      	ldr	r2, [r3, #20]
 80007ea:	2380      	movs	r3, #128	; 0x80
 80007ec:	029b      	lsls	r3, r3, #10
 80007ee:	4013      	ands	r3, r2
 80007f0:	603b      	str	r3, [r7, #0]
 80007f2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, GPIO_PIN_RESET);
 80007f4:	2390      	movs	r3, #144	; 0x90
 80007f6:	05db      	lsls	r3, r3, #23
 80007f8:	2200      	movs	r2, #0
 80007fa:	2110      	movs	r1, #16
 80007fc:	0018      	movs	r0, r3
 80007fe:	f000 fe05 	bl	800140c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : led_Pin */
  GPIO_InitStruct.Pin = led_Pin;
 8000802:	1d3b      	adds	r3, r7, #4
 8000804:	2210      	movs	r2, #16
 8000806:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000808:	1d3b      	adds	r3, r7, #4
 800080a:	2201      	movs	r2, #1
 800080c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080e:	1d3b      	adds	r3, r7, #4
 8000810:	2200      	movs	r2, #0
 8000812:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000814:	1d3b      	adds	r3, r7, #4
 8000816:	2200      	movs	r2, #0
 8000818:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(led_GPIO_Port, &GPIO_InitStruct);
 800081a:	1d3a      	adds	r2, r7, #4
 800081c:	2390      	movs	r3, #144	; 0x90
 800081e:	05db      	lsls	r3, r3, #23
 8000820:	0011      	movs	r1, r2
 8000822:	0018      	movs	r0, r3
 8000824:	f000 fc82 	bl	800112c <HAL_GPIO_Init>

}
 8000828:	46c0      	nop			; (mov r8, r8)
 800082a:	46bd      	mov	sp, r7
 800082c:	b006      	add	sp, #24
 800082e:	bd80      	pop	{r7, pc}
 8000830:	40021000 	.word	0x40021000

08000834 <blink>:

/* USER CODE BEGIN 4 */
// Blinks debug LED a given number of times
void blink(int x) {
 8000834:	b580      	push	{r7, lr}
 8000836:	b084      	sub	sp, #16
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < x * 2; i++) {
 800083c:	2300      	movs	r3, #0
 800083e:	60fb      	str	r3, [r7, #12]
 8000840:	e007      	b.n	8000852 <blink+0x1e>
		toggleLED();
 8000842:	f000 f80f 	bl	8000864 <toggleLED>
		HAL_Delay(100);
 8000846:	2064      	movs	r0, #100	; 0x64
 8000848:	f000 f998 	bl	8000b7c <HAL_Delay>
	for(int i = 0; i < x * 2; i++) {
 800084c:	68fb      	ldr	r3, [r7, #12]
 800084e:	3301      	adds	r3, #1
 8000850:	60fb      	str	r3, [r7, #12]
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	005b      	lsls	r3, r3, #1
 8000856:	68fa      	ldr	r2, [r7, #12]
 8000858:	429a      	cmp	r2, r3
 800085a:	dbf2      	blt.n	8000842 <blink+0xe>
	}
}
 800085c:	46c0      	nop			; (mov r8, r8)
 800085e:	46bd      	mov	sp, r7
 8000860:	b004      	add	sp, #16
 8000862:	bd80      	pop	{r7, pc}

08000864 <toggleLED>:

// Toggles debug LED on board
void toggleLED() {
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(led_GPIO_Port, led_Pin);
 8000868:	2390      	movs	r3, #144	; 0x90
 800086a:	05db      	lsls	r3, r3, #23
 800086c:	2110      	movs	r1, #16
 800086e:	0018      	movs	r0, r3
 8000870:	f000 fde9 	bl	8001446 <HAL_GPIO_TogglePin>
}
 8000874:	46c0      	nop			; (mov r8, r8)
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}

0800087a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800087a:	b580      	push	{r7, lr}
 800087c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800087e:	46c0      	nop			; (mov r8, r8)
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}

08000884 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800088a:	4b0f      	ldr	r3, [pc, #60]	; (80008c8 <HAL_MspInit+0x44>)
 800088c:	699a      	ldr	r2, [r3, #24]
 800088e:	4b0e      	ldr	r3, [pc, #56]	; (80008c8 <HAL_MspInit+0x44>)
 8000890:	2101      	movs	r1, #1
 8000892:	430a      	orrs	r2, r1
 8000894:	619a      	str	r2, [r3, #24]
 8000896:	4b0c      	ldr	r3, [pc, #48]	; (80008c8 <HAL_MspInit+0x44>)
 8000898:	699b      	ldr	r3, [r3, #24]
 800089a:	2201      	movs	r2, #1
 800089c:	4013      	ands	r3, r2
 800089e:	607b      	str	r3, [r7, #4]
 80008a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008a2:	4b09      	ldr	r3, [pc, #36]	; (80008c8 <HAL_MspInit+0x44>)
 80008a4:	69da      	ldr	r2, [r3, #28]
 80008a6:	4b08      	ldr	r3, [pc, #32]	; (80008c8 <HAL_MspInit+0x44>)
 80008a8:	2180      	movs	r1, #128	; 0x80
 80008aa:	0549      	lsls	r1, r1, #21
 80008ac:	430a      	orrs	r2, r1
 80008ae:	61da      	str	r2, [r3, #28]
 80008b0:	4b05      	ldr	r3, [pc, #20]	; (80008c8 <HAL_MspInit+0x44>)
 80008b2:	69da      	ldr	r2, [r3, #28]
 80008b4:	2380      	movs	r3, #128	; 0x80
 80008b6:	055b      	lsls	r3, r3, #21
 80008b8:	4013      	ands	r3, r2
 80008ba:	603b      	str	r3, [r7, #0]
 80008bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008be:	46c0      	nop			; (mov r8, r8)
 80008c0:	46bd      	mov	sp, r7
 80008c2:	b002      	add	sp, #8
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	46c0      	nop			; (mov r8, r8)
 80008c8:	40021000 	.word	0x40021000

080008cc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b084      	sub	sp, #16
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	4a0a      	ldr	r2, [pc, #40]	; (8000904 <HAL_TIM_PWM_MspInit+0x38>)
 80008da:	4293      	cmp	r3, r2
 80008dc:	d10d      	bne.n	80008fa <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80008de:	4b0a      	ldr	r3, [pc, #40]	; (8000908 <HAL_TIM_PWM_MspInit+0x3c>)
 80008e0:	699a      	ldr	r2, [r3, #24]
 80008e2:	4b09      	ldr	r3, [pc, #36]	; (8000908 <HAL_TIM_PWM_MspInit+0x3c>)
 80008e4:	2180      	movs	r1, #128	; 0x80
 80008e6:	0109      	lsls	r1, r1, #4
 80008e8:	430a      	orrs	r2, r1
 80008ea:	619a      	str	r2, [r3, #24]
 80008ec:	4b06      	ldr	r3, [pc, #24]	; (8000908 <HAL_TIM_PWM_MspInit+0x3c>)
 80008ee:	699a      	ldr	r2, [r3, #24]
 80008f0:	2380      	movs	r3, #128	; 0x80
 80008f2:	011b      	lsls	r3, r3, #4
 80008f4:	4013      	ands	r3, r2
 80008f6:	60fb      	str	r3, [r7, #12]
 80008f8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80008fa:	46c0      	nop			; (mov r8, r8)
 80008fc:	46bd      	mov	sp, r7
 80008fe:	b004      	add	sp, #16
 8000900:	bd80      	pop	{r7, pc}
 8000902:	46c0      	nop			; (mov r8, r8)
 8000904:	40012c00 	.word	0x40012c00
 8000908:	40021000 	.word	0x40021000

0800090c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b088      	sub	sp, #32
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000914:	230c      	movs	r3, #12
 8000916:	18fb      	adds	r3, r7, r3
 8000918:	0018      	movs	r0, r3
 800091a:	2314      	movs	r3, #20
 800091c:	001a      	movs	r2, r3
 800091e:	2100      	movs	r1, #0
 8000920:	f002 fbb3 	bl	800308a <memset>
  if(htim->Instance==TIM1)
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	4a16      	ldr	r2, [pc, #88]	; (8000984 <HAL_TIM_MspPostInit+0x78>)
 800092a:	4293      	cmp	r3, r2
 800092c:	d125      	bne.n	800097a <HAL_TIM_MspPostInit+0x6e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800092e:	4b16      	ldr	r3, [pc, #88]	; (8000988 <HAL_TIM_MspPostInit+0x7c>)
 8000930:	695a      	ldr	r2, [r3, #20]
 8000932:	4b15      	ldr	r3, [pc, #84]	; (8000988 <HAL_TIM_MspPostInit+0x7c>)
 8000934:	2180      	movs	r1, #128	; 0x80
 8000936:	0289      	lsls	r1, r1, #10
 8000938:	430a      	orrs	r2, r1
 800093a:	615a      	str	r2, [r3, #20]
 800093c:	4b12      	ldr	r3, [pc, #72]	; (8000988 <HAL_TIM_MspPostInit+0x7c>)
 800093e:	695a      	ldr	r2, [r3, #20]
 8000940:	2380      	movs	r3, #128	; 0x80
 8000942:	029b      	lsls	r3, r3, #10
 8000944:	4013      	ands	r3, r2
 8000946:	60bb      	str	r3, [r7, #8]
 8000948:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800094a:	210c      	movs	r1, #12
 800094c:	187b      	adds	r3, r7, r1
 800094e:	2280      	movs	r2, #128	; 0x80
 8000950:	0092      	lsls	r2, r2, #2
 8000952:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000954:	187b      	adds	r3, r7, r1
 8000956:	2202      	movs	r2, #2
 8000958:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095a:	187b      	adds	r3, r7, r1
 800095c:	2200      	movs	r2, #0
 800095e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000960:	187b      	adds	r3, r7, r1
 8000962:	2200      	movs	r2, #0
 8000964:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000966:	187b      	adds	r3, r7, r1
 8000968:	2202      	movs	r2, #2
 800096a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800096c:	187a      	adds	r2, r7, r1
 800096e:	2390      	movs	r3, #144	; 0x90
 8000970:	05db      	lsls	r3, r3, #23
 8000972:	0011      	movs	r1, r2
 8000974:	0018      	movs	r0, r3
 8000976:	f000 fbd9 	bl	800112c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800097a:	46c0      	nop			; (mov r8, r8)
 800097c:	46bd      	mov	sp, r7
 800097e:	b008      	add	sp, #32
 8000980:	bd80      	pop	{r7, pc}
 8000982:	46c0      	nop			; (mov r8, r8)
 8000984:	40012c00 	.word	0x40012c00
 8000988:	40021000 	.word	0x40021000

0800098c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b08a      	sub	sp, #40	; 0x28
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000994:	2314      	movs	r3, #20
 8000996:	18fb      	adds	r3, r7, r3
 8000998:	0018      	movs	r0, r3
 800099a:	2314      	movs	r3, #20
 800099c:	001a      	movs	r2, r3
 800099e:	2100      	movs	r1, #0
 80009a0:	f002 fb73 	bl	800308a <memset>
  if(huart->Instance==USART1)
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	4a1c      	ldr	r2, [pc, #112]	; (8000a1c <HAL_UART_MspInit+0x90>)
 80009aa:	4293      	cmp	r3, r2
 80009ac:	d132      	bne.n	8000a14 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80009ae:	4b1c      	ldr	r3, [pc, #112]	; (8000a20 <HAL_UART_MspInit+0x94>)
 80009b0:	699a      	ldr	r2, [r3, #24]
 80009b2:	4b1b      	ldr	r3, [pc, #108]	; (8000a20 <HAL_UART_MspInit+0x94>)
 80009b4:	2180      	movs	r1, #128	; 0x80
 80009b6:	01c9      	lsls	r1, r1, #7
 80009b8:	430a      	orrs	r2, r1
 80009ba:	619a      	str	r2, [r3, #24]
 80009bc:	4b18      	ldr	r3, [pc, #96]	; (8000a20 <HAL_UART_MspInit+0x94>)
 80009be:	699a      	ldr	r2, [r3, #24]
 80009c0:	2380      	movs	r3, #128	; 0x80
 80009c2:	01db      	lsls	r3, r3, #7
 80009c4:	4013      	ands	r3, r2
 80009c6:	613b      	str	r3, [r7, #16]
 80009c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ca:	4b15      	ldr	r3, [pc, #84]	; (8000a20 <HAL_UART_MspInit+0x94>)
 80009cc:	695a      	ldr	r2, [r3, #20]
 80009ce:	4b14      	ldr	r3, [pc, #80]	; (8000a20 <HAL_UART_MspInit+0x94>)
 80009d0:	2180      	movs	r1, #128	; 0x80
 80009d2:	0289      	lsls	r1, r1, #10
 80009d4:	430a      	orrs	r2, r1
 80009d6:	615a      	str	r2, [r3, #20]
 80009d8:	4b11      	ldr	r3, [pc, #68]	; (8000a20 <HAL_UART_MspInit+0x94>)
 80009da:	695a      	ldr	r2, [r3, #20]
 80009dc:	2380      	movs	r3, #128	; 0x80
 80009de:	029b      	lsls	r3, r3, #10
 80009e0:	4013      	ands	r3, r2
 80009e2:	60fb      	str	r3, [r7, #12]
 80009e4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA2     ------> USART1_TX
    PA3     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80009e6:	2114      	movs	r1, #20
 80009e8:	187b      	adds	r3, r7, r1
 80009ea:	220c      	movs	r2, #12
 80009ec:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ee:	187b      	adds	r3, r7, r1
 80009f0:	2202      	movs	r2, #2
 80009f2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f4:	187b      	adds	r3, r7, r1
 80009f6:	2200      	movs	r2, #0
 80009f8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009fa:	187b      	adds	r3, r7, r1
 80009fc:	2203      	movs	r2, #3
 80009fe:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000a00:	187b      	adds	r3, r7, r1
 8000a02:	2201      	movs	r2, #1
 8000a04:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a06:	187a      	adds	r2, r7, r1
 8000a08:	2390      	movs	r3, #144	; 0x90
 8000a0a:	05db      	lsls	r3, r3, #23
 8000a0c:	0011      	movs	r1, r2
 8000a0e:	0018      	movs	r0, r3
 8000a10:	f000 fb8c 	bl	800112c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000a14:	46c0      	nop			; (mov r8, r8)
 8000a16:	46bd      	mov	sp, r7
 8000a18:	b00a      	add	sp, #40	; 0x28
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	40013800 	.word	0x40013800
 8000a20:	40021000 	.word	0x40021000

08000a24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000a28:	46c0      	nop			; (mov r8, r8)
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}

08000a2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a2e:	b580      	push	{r7, lr}
 8000a30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a32:	e7fe      	b.n	8000a32 <HardFault_Handler+0x4>

08000a34 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000a38:	46c0      	nop			; (mov r8, r8)
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}

08000a3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a3e:	b580      	push	{r7, lr}
 8000a40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a42:	46c0      	nop			; (mov r8, r8)
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}

08000a48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a4c:	f000 f87a 	bl	8000b44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a50:	46c0      	nop			; (mov r8, r8)
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}

08000a56 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a56:	b580      	push	{r7, lr}
 8000a58:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000a5a:	46c0      	nop			; (mov r8, r8)
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}

08000a60 <Reset_Handler>:
 8000a60:	480d      	ldr	r0, [pc, #52]	; (8000a98 <LoopForever+0x2>)
 8000a62:	4685      	mov	sp, r0
 8000a64:	480d      	ldr	r0, [pc, #52]	; (8000a9c <LoopForever+0x6>)
 8000a66:	490e      	ldr	r1, [pc, #56]	; (8000aa0 <LoopForever+0xa>)
 8000a68:	4a0e      	ldr	r2, [pc, #56]	; (8000aa4 <LoopForever+0xe>)
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	e002      	b.n	8000a74 <LoopCopyDataInit>

08000a6e <CopyDataInit>:
 8000a6e:	58d4      	ldr	r4, [r2, r3]
 8000a70:	50c4      	str	r4, [r0, r3]
 8000a72:	3304      	adds	r3, #4

08000a74 <LoopCopyDataInit>:
 8000a74:	18c4      	adds	r4, r0, r3
 8000a76:	428c      	cmp	r4, r1
 8000a78:	d3f9      	bcc.n	8000a6e <CopyDataInit>
 8000a7a:	4a0b      	ldr	r2, [pc, #44]	; (8000aa8 <LoopForever+0x12>)
 8000a7c:	4c0b      	ldr	r4, [pc, #44]	; (8000aac <LoopForever+0x16>)
 8000a7e:	2300      	movs	r3, #0
 8000a80:	e001      	b.n	8000a86 <LoopFillZerobss>

08000a82 <FillZerobss>:
 8000a82:	6013      	str	r3, [r2, #0]
 8000a84:	3204      	adds	r2, #4

08000a86 <LoopFillZerobss>:
 8000a86:	42a2      	cmp	r2, r4
 8000a88:	d3fb      	bcc.n	8000a82 <FillZerobss>
 8000a8a:	f7ff ffe4 	bl	8000a56 <SystemInit>
 8000a8e:	f002 fac9 	bl	8003024 <__libc_init_array>
 8000a92:	f7ff fd2d 	bl	80004f0 <main>

08000a96 <LoopForever>:
 8000a96:	e7fe      	b.n	8000a96 <LoopForever>
 8000a98:	20001000 	.word	0x20001000
 8000a9c:	20000000 	.word	0x20000000
 8000aa0:	20000010 	.word	0x20000010
 8000aa4:	080030f4 	.word	0x080030f4
 8000aa8:	20000010 	.word	0x20000010
 8000aac:	20000138 	.word	0x20000138

08000ab0 <ADC1_IRQHandler>:
 8000ab0:	e7fe      	b.n	8000ab0 <ADC1_IRQHandler>
	...

08000ab4 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ab8:	4b07      	ldr	r3, [pc, #28]	; (8000ad8 <HAL_Init+0x24>)
 8000aba:	681a      	ldr	r2, [r3, #0]
 8000abc:	4b06      	ldr	r3, [pc, #24]	; (8000ad8 <HAL_Init+0x24>)
 8000abe:	2110      	movs	r1, #16
 8000ac0:	430a      	orrs	r2, r1
 8000ac2:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000ac4:	2000      	movs	r0, #0
 8000ac6:	f000 f809 	bl	8000adc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000aca:	f7ff fedb 	bl	8000884 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ace:	2300      	movs	r3, #0
}
 8000ad0:	0018      	movs	r0, r3
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	46c0      	nop			; (mov r8, r8)
 8000ad8:	40022000 	.word	0x40022000

08000adc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000adc:	b590      	push	{r4, r7, lr}
 8000ade:	b083      	sub	sp, #12
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ae4:	4b14      	ldr	r3, [pc, #80]	; (8000b38 <HAL_InitTick+0x5c>)
 8000ae6:	681c      	ldr	r4, [r3, #0]
 8000ae8:	4b14      	ldr	r3, [pc, #80]	; (8000b3c <HAL_InitTick+0x60>)
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	0019      	movs	r1, r3
 8000aee:	23fa      	movs	r3, #250	; 0xfa
 8000af0:	0098      	lsls	r0, r3, #2
 8000af2:	f7ff fb09 	bl	8000108 <__udivsi3>
 8000af6:	0003      	movs	r3, r0
 8000af8:	0019      	movs	r1, r3
 8000afa:	0020      	movs	r0, r4
 8000afc:	f7ff fb04 	bl	8000108 <__udivsi3>
 8000b00:	0003      	movs	r3, r0
 8000b02:	0018      	movs	r0, r3
 8000b04:	f000 f903 	bl	8000d0e <HAL_SYSTICK_Config>
 8000b08:	1e03      	subs	r3, r0, #0
 8000b0a:	d001      	beq.n	8000b10 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	e00f      	b.n	8000b30 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	2b03      	cmp	r3, #3
 8000b14:	d80b      	bhi.n	8000b2e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b16:	6879      	ldr	r1, [r7, #4]
 8000b18:	2301      	movs	r3, #1
 8000b1a:	425b      	negs	r3, r3
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	0018      	movs	r0, r3
 8000b20:	f000 f8e0 	bl	8000ce4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b24:	4b06      	ldr	r3, [pc, #24]	; (8000b40 <HAL_InitTick+0x64>)
 8000b26:	687a      	ldr	r2, [r7, #4]
 8000b28:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	e000      	b.n	8000b30 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000b2e:	2301      	movs	r3, #1
}
 8000b30:	0018      	movs	r0, r3
 8000b32:	46bd      	mov	sp, r7
 8000b34:	b003      	add	sp, #12
 8000b36:	bd90      	pop	{r4, r7, pc}
 8000b38:	20000004 	.word	0x20000004
 8000b3c:	2000000c 	.word	0x2000000c
 8000b40:	20000008 	.word	0x20000008

08000b44 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b48:	4b05      	ldr	r3, [pc, #20]	; (8000b60 <HAL_IncTick+0x1c>)
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	001a      	movs	r2, r3
 8000b4e:	4b05      	ldr	r3, [pc, #20]	; (8000b64 <HAL_IncTick+0x20>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	18d2      	adds	r2, r2, r3
 8000b54:	4b03      	ldr	r3, [pc, #12]	; (8000b64 <HAL_IncTick+0x20>)
 8000b56:	601a      	str	r2, [r3, #0]
}
 8000b58:	46c0      	nop			; (mov r8, r8)
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	46c0      	nop			; (mov r8, r8)
 8000b60:	2000000c 	.word	0x2000000c
 8000b64:	20000110 	.word	0x20000110

08000b68 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b6c:	4b02      	ldr	r3, [pc, #8]	; (8000b78 <HAL_GetTick+0x10>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
}
 8000b70:	0018      	movs	r0, r3
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	46c0      	nop			; (mov r8, r8)
 8000b78:	20000110 	.word	0x20000110

08000b7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b084      	sub	sp, #16
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b84:	f7ff fff0 	bl	8000b68 <HAL_GetTick>
 8000b88:	0003      	movs	r3, r0
 8000b8a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	3301      	adds	r3, #1
 8000b94:	d005      	beq.n	8000ba2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b96:	4b09      	ldr	r3, [pc, #36]	; (8000bbc <HAL_Delay+0x40>)
 8000b98:	781b      	ldrb	r3, [r3, #0]
 8000b9a:	001a      	movs	r2, r3
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	189b      	adds	r3, r3, r2
 8000ba0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000ba2:	46c0      	nop			; (mov r8, r8)
 8000ba4:	f7ff ffe0 	bl	8000b68 <HAL_GetTick>
 8000ba8:	0002      	movs	r2, r0
 8000baa:	68bb      	ldr	r3, [r7, #8]
 8000bac:	1ad3      	subs	r3, r2, r3
 8000bae:	68fa      	ldr	r2, [r7, #12]
 8000bb0:	429a      	cmp	r2, r3
 8000bb2:	d8f7      	bhi.n	8000ba4 <HAL_Delay+0x28>
  {
  }
}
 8000bb4:	46c0      	nop			; (mov r8, r8)
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	b004      	add	sp, #16
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	2000000c 	.word	0x2000000c

08000bc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bc0:	b590      	push	{r4, r7, lr}
 8000bc2:	b083      	sub	sp, #12
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	0002      	movs	r2, r0
 8000bc8:	6039      	str	r1, [r7, #0]
 8000bca:	1dfb      	adds	r3, r7, #7
 8000bcc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000bce:	1dfb      	adds	r3, r7, #7
 8000bd0:	781b      	ldrb	r3, [r3, #0]
 8000bd2:	2b7f      	cmp	r3, #127	; 0x7f
 8000bd4:	d828      	bhi.n	8000c28 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bd6:	4a2f      	ldr	r2, [pc, #188]	; (8000c94 <__NVIC_SetPriority+0xd4>)
 8000bd8:	1dfb      	adds	r3, r7, #7
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	b25b      	sxtb	r3, r3
 8000bde:	089b      	lsrs	r3, r3, #2
 8000be0:	33c0      	adds	r3, #192	; 0xc0
 8000be2:	009b      	lsls	r3, r3, #2
 8000be4:	589b      	ldr	r3, [r3, r2]
 8000be6:	1dfa      	adds	r2, r7, #7
 8000be8:	7812      	ldrb	r2, [r2, #0]
 8000bea:	0011      	movs	r1, r2
 8000bec:	2203      	movs	r2, #3
 8000bee:	400a      	ands	r2, r1
 8000bf0:	00d2      	lsls	r2, r2, #3
 8000bf2:	21ff      	movs	r1, #255	; 0xff
 8000bf4:	4091      	lsls	r1, r2
 8000bf6:	000a      	movs	r2, r1
 8000bf8:	43d2      	mvns	r2, r2
 8000bfa:	401a      	ands	r2, r3
 8000bfc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	019b      	lsls	r3, r3, #6
 8000c02:	22ff      	movs	r2, #255	; 0xff
 8000c04:	401a      	ands	r2, r3
 8000c06:	1dfb      	adds	r3, r7, #7
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	0018      	movs	r0, r3
 8000c0c:	2303      	movs	r3, #3
 8000c0e:	4003      	ands	r3, r0
 8000c10:	00db      	lsls	r3, r3, #3
 8000c12:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c14:	481f      	ldr	r0, [pc, #124]	; (8000c94 <__NVIC_SetPriority+0xd4>)
 8000c16:	1dfb      	adds	r3, r7, #7
 8000c18:	781b      	ldrb	r3, [r3, #0]
 8000c1a:	b25b      	sxtb	r3, r3
 8000c1c:	089b      	lsrs	r3, r3, #2
 8000c1e:	430a      	orrs	r2, r1
 8000c20:	33c0      	adds	r3, #192	; 0xc0
 8000c22:	009b      	lsls	r3, r3, #2
 8000c24:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000c26:	e031      	b.n	8000c8c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c28:	4a1b      	ldr	r2, [pc, #108]	; (8000c98 <__NVIC_SetPriority+0xd8>)
 8000c2a:	1dfb      	adds	r3, r7, #7
 8000c2c:	781b      	ldrb	r3, [r3, #0]
 8000c2e:	0019      	movs	r1, r3
 8000c30:	230f      	movs	r3, #15
 8000c32:	400b      	ands	r3, r1
 8000c34:	3b08      	subs	r3, #8
 8000c36:	089b      	lsrs	r3, r3, #2
 8000c38:	3306      	adds	r3, #6
 8000c3a:	009b      	lsls	r3, r3, #2
 8000c3c:	18d3      	adds	r3, r2, r3
 8000c3e:	3304      	adds	r3, #4
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	1dfa      	adds	r2, r7, #7
 8000c44:	7812      	ldrb	r2, [r2, #0]
 8000c46:	0011      	movs	r1, r2
 8000c48:	2203      	movs	r2, #3
 8000c4a:	400a      	ands	r2, r1
 8000c4c:	00d2      	lsls	r2, r2, #3
 8000c4e:	21ff      	movs	r1, #255	; 0xff
 8000c50:	4091      	lsls	r1, r2
 8000c52:	000a      	movs	r2, r1
 8000c54:	43d2      	mvns	r2, r2
 8000c56:	401a      	ands	r2, r3
 8000c58:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	019b      	lsls	r3, r3, #6
 8000c5e:	22ff      	movs	r2, #255	; 0xff
 8000c60:	401a      	ands	r2, r3
 8000c62:	1dfb      	adds	r3, r7, #7
 8000c64:	781b      	ldrb	r3, [r3, #0]
 8000c66:	0018      	movs	r0, r3
 8000c68:	2303      	movs	r3, #3
 8000c6a:	4003      	ands	r3, r0
 8000c6c:	00db      	lsls	r3, r3, #3
 8000c6e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c70:	4809      	ldr	r0, [pc, #36]	; (8000c98 <__NVIC_SetPriority+0xd8>)
 8000c72:	1dfb      	adds	r3, r7, #7
 8000c74:	781b      	ldrb	r3, [r3, #0]
 8000c76:	001c      	movs	r4, r3
 8000c78:	230f      	movs	r3, #15
 8000c7a:	4023      	ands	r3, r4
 8000c7c:	3b08      	subs	r3, #8
 8000c7e:	089b      	lsrs	r3, r3, #2
 8000c80:	430a      	orrs	r2, r1
 8000c82:	3306      	adds	r3, #6
 8000c84:	009b      	lsls	r3, r3, #2
 8000c86:	18c3      	adds	r3, r0, r3
 8000c88:	3304      	adds	r3, #4
 8000c8a:	601a      	str	r2, [r3, #0]
}
 8000c8c:	46c0      	nop			; (mov r8, r8)
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	b003      	add	sp, #12
 8000c92:	bd90      	pop	{r4, r7, pc}
 8000c94:	e000e100 	.word	0xe000e100
 8000c98:	e000ed00 	.word	0xe000ed00

08000c9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	3b01      	subs	r3, #1
 8000ca8:	4a0c      	ldr	r2, [pc, #48]	; (8000cdc <SysTick_Config+0x40>)
 8000caa:	4293      	cmp	r3, r2
 8000cac:	d901      	bls.n	8000cb2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cae:	2301      	movs	r3, #1
 8000cb0:	e010      	b.n	8000cd4 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cb2:	4b0b      	ldr	r3, [pc, #44]	; (8000ce0 <SysTick_Config+0x44>)
 8000cb4:	687a      	ldr	r2, [r7, #4]
 8000cb6:	3a01      	subs	r2, #1
 8000cb8:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cba:	2301      	movs	r3, #1
 8000cbc:	425b      	negs	r3, r3
 8000cbe:	2103      	movs	r1, #3
 8000cc0:	0018      	movs	r0, r3
 8000cc2:	f7ff ff7d 	bl	8000bc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cc6:	4b06      	ldr	r3, [pc, #24]	; (8000ce0 <SysTick_Config+0x44>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ccc:	4b04      	ldr	r3, [pc, #16]	; (8000ce0 <SysTick_Config+0x44>)
 8000cce:	2207      	movs	r2, #7
 8000cd0:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cd2:	2300      	movs	r3, #0
}
 8000cd4:	0018      	movs	r0, r3
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	b002      	add	sp, #8
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	00ffffff 	.word	0x00ffffff
 8000ce0:	e000e010 	.word	0xe000e010

08000ce4 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b084      	sub	sp, #16
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	60b9      	str	r1, [r7, #8]
 8000cec:	607a      	str	r2, [r7, #4]
 8000cee:	210f      	movs	r1, #15
 8000cf0:	187b      	adds	r3, r7, r1
 8000cf2:	1c02      	adds	r2, r0, #0
 8000cf4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000cf6:	68ba      	ldr	r2, [r7, #8]
 8000cf8:	187b      	adds	r3, r7, r1
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	b25b      	sxtb	r3, r3
 8000cfe:	0011      	movs	r1, r2
 8000d00:	0018      	movs	r0, r3
 8000d02:	f7ff ff5d 	bl	8000bc0 <__NVIC_SetPriority>
}
 8000d06:	46c0      	nop			; (mov r8, r8)
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	b004      	add	sp, #16
 8000d0c:	bd80      	pop	{r7, pc}

08000d0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d0e:	b580      	push	{r7, lr}
 8000d10:	b082      	sub	sp, #8
 8000d12:	af00      	add	r7, sp, #0
 8000d14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	0018      	movs	r0, r3
 8000d1a:	f7ff ffbf 	bl	8000c9c <SysTick_Config>
 8000d1e:	0003      	movs	r3, r0
}
 8000d20:	0018      	movs	r0, r3
 8000d22:	46bd      	mov	sp, r7
 8000d24:	b002      	add	sp, #8
 8000d26:	bd80      	pop	{r7, pc}

08000d28 <HAL_FLASH_Program>:
  * @param  Data          Specifie the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8000d28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d2a:	b087      	sub	sp, #28
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	60f8      	str	r0, [r7, #12]
 8000d30:	60b9      	str	r1, [r7, #8]
 8000d32:	603a      	str	r2, [r7, #0]
 8000d34:	607b      	str	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000d36:	2317      	movs	r3, #23
 8000d38:	18fb      	adds	r3, r7, r3
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	701a      	strb	r2, [r3, #0]
  uint8_t index = 0U;
 8000d3e:	2316      	movs	r3, #22
 8000d40:	18fb      	adds	r3, r7, r3
 8000d42:	2200      	movs	r2, #0
 8000d44:	701a      	strb	r2, [r3, #0]
  uint8_t nbiterations = 0U;
 8000d46:	2315      	movs	r3, #21
 8000d48:	18fb      	adds	r3, r7, r3
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	701a      	strb	r2, [r3, #0]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000d4e:	4b3e      	ldr	r3, [pc, #248]	; (8000e48 <HAL_FLASH_Program+0x120>)
 8000d50:	7e1b      	ldrb	r3, [r3, #24]
 8000d52:	2b01      	cmp	r3, #1
 8000d54:	d101      	bne.n	8000d5a <HAL_FLASH_Program+0x32>
 8000d56:	2302      	movs	r3, #2
 8000d58:	e072      	b.n	8000e40 <HAL_FLASH_Program+0x118>
 8000d5a:	4b3b      	ldr	r3, [pc, #236]	; (8000e48 <HAL_FLASH_Program+0x120>)
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	761a      	strb	r2, [r3, #24]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000d60:	2317      	movs	r3, #23
 8000d62:	18fe      	adds	r6, r7, r3
 8000d64:	4b39      	ldr	r3, [pc, #228]	; (8000e4c <HAL_FLASH_Program+0x124>)
 8000d66:	0018      	movs	r0, r3
 8000d68:	f000 f8c4 	bl	8000ef4 <FLASH_WaitForLastOperation>
 8000d6c:	0003      	movs	r3, r0
 8000d6e:	7033      	strb	r3, [r6, #0]
  
  if(status == HAL_OK)
 8000d70:	2317      	movs	r3, #23
 8000d72:	18fb      	adds	r3, r7, r3
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d15c      	bne.n	8000e34 <HAL_FLASH_Program+0x10c>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	2b01      	cmp	r3, #1
 8000d7e:	d104      	bne.n	8000d8a <HAL_FLASH_Program+0x62>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8000d80:	2315      	movs	r3, #21
 8000d82:	18fb      	adds	r3, r7, r3
 8000d84:	2201      	movs	r2, #1
 8000d86:	701a      	strb	r2, [r3, #0]
 8000d88:	e00b      	b.n	8000da2 <HAL_FLASH_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	2b02      	cmp	r3, #2
 8000d8e:	d104      	bne.n	8000d9a <HAL_FLASH_Program+0x72>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8000d90:	2315      	movs	r3, #21
 8000d92:	18fb      	adds	r3, r7, r3
 8000d94:	2202      	movs	r2, #2
 8000d96:	701a      	strb	r2, [r3, #0]
 8000d98:	e003      	b.n	8000da2 <HAL_FLASH_Program+0x7a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8000d9a:	2315      	movs	r3, #21
 8000d9c:	18fb      	adds	r3, r7, r3
 8000d9e:	2204      	movs	r2, #4
 8000da0:	701a      	strb	r2, [r3, #0]
    }

    for (index = 0U; index < nbiterations; index++)
 8000da2:	2316      	movs	r3, #22
 8000da4:	18fb      	adds	r3, r7, r3
 8000da6:	2200      	movs	r2, #0
 8000da8:	701a      	strb	r2, [r3, #0]
 8000daa:	e039      	b.n	8000e20 <HAL_FLASH_Program+0xf8>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8000dac:	2116      	movs	r1, #22
 8000dae:	187b      	adds	r3, r7, r1
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	005a      	lsls	r2, r3, #1
 8000db4:	68bb      	ldr	r3, [r7, #8]
 8000db6:	18d0      	adds	r0, r2, r3
 8000db8:	187b      	adds	r3, r7, r1
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	011b      	lsls	r3, r3, #4
 8000dbe:	001a      	movs	r2, r3
 8000dc0:	3a20      	subs	r2, #32
 8000dc2:	2a00      	cmp	r2, #0
 8000dc4:	db03      	blt.n	8000dce <HAL_FLASH_Program+0xa6>
 8000dc6:	6879      	ldr	r1, [r7, #4]
 8000dc8:	40d1      	lsrs	r1, r2
 8000dca:	000c      	movs	r4, r1
 8000dcc:	e008      	b.n	8000de0 <HAL_FLASH_Program+0xb8>
 8000dce:	2220      	movs	r2, #32
 8000dd0:	1ad2      	subs	r2, r2, r3
 8000dd2:	6879      	ldr	r1, [r7, #4]
 8000dd4:	4091      	lsls	r1, r2
 8000dd6:	000a      	movs	r2, r1
 8000dd8:	6839      	ldr	r1, [r7, #0]
 8000dda:	40d9      	lsrs	r1, r3
 8000ddc:	000c      	movs	r4, r1
 8000dde:	4314      	orrs	r4, r2
 8000de0:	687a      	ldr	r2, [r7, #4]
 8000de2:	40da      	lsrs	r2, r3
 8000de4:	0015      	movs	r5, r2
 8000de6:	b2a3      	uxth	r3, r4
 8000de8:	0019      	movs	r1, r3
 8000dea:	f000 f867 	bl	8000ebc <FLASH_Program_HalfWord>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000dee:	2317      	movs	r3, #23
 8000df0:	18fe      	adds	r6, r7, r3
 8000df2:	4b16      	ldr	r3, [pc, #88]	; (8000e4c <HAL_FLASH_Program+0x124>)
 8000df4:	0018      	movs	r0, r3
 8000df6:	f000 f87d 	bl	8000ef4 <FLASH_WaitForLastOperation>
 8000dfa:	0003      	movs	r3, r0
 8000dfc:	7033      	strb	r3, [r6, #0]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8000dfe:	4b14      	ldr	r3, [pc, #80]	; (8000e50 <HAL_FLASH_Program+0x128>)
 8000e00:	691a      	ldr	r2, [r3, #16]
 8000e02:	4b13      	ldr	r3, [pc, #76]	; (8000e50 <HAL_FLASH_Program+0x128>)
 8000e04:	2101      	movs	r1, #1
 8000e06:	438a      	bics	r2, r1
 8000e08:	611a      	str	r2, [r3, #16]
      /* In case of error, stop programming procedure */
      if (status != HAL_OK)
 8000e0a:	2317      	movs	r3, #23
 8000e0c:	18fb      	adds	r3, r7, r3
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d10e      	bne.n	8000e32 <HAL_FLASH_Program+0x10a>
    for (index = 0U; index < nbiterations; index++)
 8000e14:	2116      	movs	r1, #22
 8000e16:	187b      	adds	r3, r7, r1
 8000e18:	781a      	ldrb	r2, [r3, #0]
 8000e1a:	187b      	adds	r3, r7, r1
 8000e1c:	3201      	adds	r2, #1
 8000e1e:	701a      	strb	r2, [r3, #0]
 8000e20:	2316      	movs	r3, #22
 8000e22:	18fa      	adds	r2, r7, r3
 8000e24:	2315      	movs	r3, #21
 8000e26:	18fb      	adds	r3, r7, r3
 8000e28:	7812      	ldrb	r2, [r2, #0]
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	429a      	cmp	r2, r3
 8000e2e:	d3bd      	bcc.n	8000dac <HAL_FLASH_Program+0x84>
 8000e30:	e000      	b.n	8000e34 <HAL_FLASH_Program+0x10c>
      {
        break;
 8000e32:	46c0      	nop			; (mov r8, r8)
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8000e34:	4b04      	ldr	r3, [pc, #16]	; (8000e48 <HAL_FLASH_Program+0x120>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	761a      	strb	r2, [r3, #24]

  return status;
 8000e3a:	2317      	movs	r3, #23
 8000e3c:	18fb      	adds	r3, r7, r3
 8000e3e:	781b      	ldrb	r3, [r3, #0]
}
 8000e40:	0018      	movs	r0, r3
 8000e42:	46bd      	mov	sp, r7
 8000e44:	b007      	add	sp, #28
 8000e46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e48:	20000118 	.word	0x20000118
 8000e4c:	0000c350 	.word	0x0000c350
 8000e50:	40022000 	.word	0x40022000

08000e54 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8000e5a:	1dfb      	adds	r3, r7, #7
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	701a      	strb	r2, [r3, #0]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000e60:	4b0c      	ldr	r3, [pc, #48]	; (8000e94 <HAL_FLASH_Unlock+0x40>)
 8000e62:	691b      	ldr	r3, [r3, #16]
 8000e64:	2280      	movs	r2, #128	; 0x80
 8000e66:	4013      	ands	r3, r2
 8000e68:	d00d      	beq.n	8000e86 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8000e6a:	4b0a      	ldr	r3, [pc, #40]	; (8000e94 <HAL_FLASH_Unlock+0x40>)
 8000e6c:	4a0a      	ldr	r2, [pc, #40]	; (8000e98 <HAL_FLASH_Unlock+0x44>)
 8000e6e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8000e70:	4b08      	ldr	r3, [pc, #32]	; (8000e94 <HAL_FLASH_Unlock+0x40>)
 8000e72:	4a0a      	ldr	r2, [pc, #40]	; (8000e9c <HAL_FLASH_Unlock+0x48>)
 8000e74:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000e76:	4b07      	ldr	r3, [pc, #28]	; (8000e94 <HAL_FLASH_Unlock+0x40>)
 8000e78:	691b      	ldr	r3, [r3, #16]
 8000e7a:	2280      	movs	r2, #128	; 0x80
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	d002      	beq.n	8000e86 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8000e80:	1dfb      	adds	r3, r7, #7
 8000e82:	2201      	movs	r2, #1
 8000e84:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8000e86:	1dfb      	adds	r3, r7, #7
 8000e88:	781b      	ldrb	r3, [r3, #0]
}
 8000e8a:	0018      	movs	r0, r3
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	b002      	add	sp, #8
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	46c0      	nop			; (mov r8, r8)
 8000e94:	40022000 	.word	0x40022000
 8000e98:	45670123 	.word	0x45670123
 8000e9c:	cdef89ab 	.word	0xcdef89ab

08000ea0 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8000ea4:	4b04      	ldr	r3, [pc, #16]	; (8000eb8 <HAL_FLASH_Lock+0x18>)
 8000ea6:	691a      	ldr	r2, [r3, #16]
 8000ea8:	4b03      	ldr	r3, [pc, #12]	; (8000eb8 <HAL_FLASH_Lock+0x18>)
 8000eaa:	2180      	movs	r1, #128	; 0x80
 8000eac:	430a      	orrs	r2, r1
 8000eae:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 8000eb0:	2300      	movs	r3, #0
}
 8000eb2:	0018      	movs	r0, r3
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	40022000 	.word	0x40022000

08000ebc <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
 8000ec4:	000a      	movs	r2, r1
 8000ec6:	1cbb      	adds	r3, r7, #2
 8000ec8:	801a      	strh	r2, [r3, #0]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000eca:	4b08      	ldr	r3, [pc, #32]	; (8000eec <FLASH_Program_HalfWord+0x30>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	61da      	str	r2, [r3, #28]
  
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8000ed0:	4b07      	ldr	r3, [pc, #28]	; (8000ef0 <FLASH_Program_HalfWord+0x34>)
 8000ed2:	691a      	ldr	r2, [r3, #16]
 8000ed4:	4b06      	ldr	r3, [pc, #24]	; (8000ef0 <FLASH_Program_HalfWord+0x34>)
 8000ed6:	2101      	movs	r1, #1
 8000ed8:	430a      	orrs	r2, r1
 8000eda:	611a      	str	r2, [r3, #16]

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	1cba      	adds	r2, r7, #2
 8000ee0:	8812      	ldrh	r2, [r2, #0]
 8000ee2:	801a      	strh	r2, [r3, #0]
}
 8000ee4:	46c0      	nop			; (mov r8, r8)
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	b002      	add	sp, #8
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	20000118 	.word	0x20000118
 8000ef0:	40022000 	.word	0x40022000

08000ef4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b084      	sub	sp, #16
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8000efc:	f7ff fe34 	bl	8000b68 <HAL_GetTick>
 8000f00:	0003      	movs	r3, r0
 8000f02:	60fb      	str	r3, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000f04:	e00f      	b.n	8000f26 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	3301      	adds	r3, #1
 8000f0a:	d00c      	beq.n	8000f26 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d007      	beq.n	8000f22 <FLASH_WaitForLastOperation+0x2e>
 8000f12:	f7ff fe29 	bl	8000b68 <HAL_GetTick>
 8000f16:	0002      	movs	r2, r0
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	1ad3      	subs	r3, r2, r3
 8000f1c:	687a      	ldr	r2, [r7, #4]
 8000f1e:	429a      	cmp	r2, r3
 8000f20:	d201      	bcs.n	8000f26 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8000f22:	2303      	movs	r3, #3
 8000f24:	e01f      	b.n	8000f66 <FLASH_WaitForLastOperation+0x72>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000f26:	4b12      	ldr	r3, [pc, #72]	; (8000f70 <FLASH_WaitForLastOperation+0x7c>)
 8000f28:	68db      	ldr	r3, [r3, #12]
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	2b01      	cmp	r3, #1
 8000f30:	d0e9      	beq.n	8000f06 <FLASH_WaitForLastOperation+0x12>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8000f32:	4b0f      	ldr	r3, [pc, #60]	; (8000f70 <FLASH_WaitForLastOperation+0x7c>)
 8000f34:	68db      	ldr	r3, [r3, #12]
 8000f36:	2220      	movs	r2, #32
 8000f38:	4013      	ands	r3, r2
 8000f3a:	2b20      	cmp	r3, #32
 8000f3c:	d102      	bne.n	8000f44 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8000f3e:	4b0c      	ldr	r3, [pc, #48]	; (8000f70 <FLASH_WaitForLastOperation+0x7c>)
 8000f40:	2220      	movs	r2, #32
 8000f42:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000f44:	4b0a      	ldr	r3, [pc, #40]	; (8000f70 <FLASH_WaitForLastOperation+0x7c>)
 8000f46:	68db      	ldr	r3, [r3, #12]
 8000f48:	2210      	movs	r2, #16
 8000f4a:	4013      	ands	r3, r2
 8000f4c:	2b10      	cmp	r3, #16
 8000f4e:	d005      	beq.n	8000f5c <FLASH_WaitForLastOperation+0x68>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000f50:	4b07      	ldr	r3, [pc, #28]	; (8000f70 <FLASH_WaitForLastOperation+0x7c>)
 8000f52:	68db      	ldr	r3, [r3, #12]
 8000f54:	2204      	movs	r2, #4
 8000f56:	4013      	ands	r3, r2
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000f58:	2b04      	cmp	r3, #4
 8000f5a:	d103      	bne.n	8000f64 <FLASH_WaitForLastOperation+0x70>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8000f5c:	f000 f80a 	bl	8000f74 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8000f60:	2301      	movs	r3, #1
 8000f62:	e000      	b.n	8000f66 <FLASH_WaitForLastOperation+0x72>
  }

  /* There is no error flag set */
  return HAL_OK;
 8000f64:	2300      	movs	r3, #0
}
 8000f66:	0018      	movs	r0, r3
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	b004      	add	sp, #16
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	46c0      	nop			; (mov r8, r8)
 8000f70:	40022000 	.word	0x40022000

08000f74 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8000f7e:	4b13      	ldr	r3, [pc, #76]	; (8000fcc <FLASH_SetErrorCode+0x58>)
 8000f80:	68db      	ldr	r3, [r3, #12]
 8000f82:	2210      	movs	r2, #16
 8000f84:	4013      	ands	r3, r2
 8000f86:	2b10      	cmp	r3, #16
 8000f88:	d109      	bne.n	8000f9e <FLASH_SetErrorCode+0x2a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8000f8a:	4b11      	ldr	r3, [pc, #68]	; (8000fd0 <FLASH_SetErrorCode+0x5c>)
 8000f8c:	69db      	ldr	r3, [r3, #28]
 8000f8e:	2202      	movs	r2, #2
 8000f90:	431a      	orrs	r2, r3
 8000f92:	4b0f      	ldr	r3, [pc, #60]	; (8000fd0 <FLASH_SetErrorCode+0x5c>)
 8000f94:	61da      	str	r2, [r3, #28]
    flags |= FLASH_FLAG_WRPERR;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	2210      	movs	r2, #16
 8000f9a:	4313      	orrs	r3, r2
 8000f9c:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000f9e:	4b0b      	ldr	r3, [pc, #44]	; (8000fcc <FLASH_SetErrorCode+0x58>)
 8000fa0:	68db      	ldr	r3, [r3, #12]
 8000fa2:	2204      	movs	r2, #4
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	2b04      	cmp	r3, #4
 8000fa8:	d109      	bne.n	8000fbe <FLASH_SetErrorCode+0x4a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8000faa:	4b09      	ldr	r3, [pc, #36]	; (8000fd0 <FLASH_SetErrorCode+0x5c>)
 8000fac:	69db      	ldr	r3, [r3, #28]
 8000fae:	2201      	movs	r2, #1
 8000fb0:	431a      	orrs	r2, r3
 8000fb2:	4b07      	ldr	r3, [pc, #28]	; (8000fd0 <FLASH_SetErrorCode+0x5c>)
 8000fb4:	61da      	str	r2, [r3, #28]
    flags |= FLASH_FLAG_PGERR;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	2204      	movs	r2, #4
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	607b      	str	r3, [r7, #4]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8000fbe:	4b03      	ldr	r3, [pc, #12]	; (8000fcc <FLASH_SetErrorCode+0x58>)
 8000fc0:	687a      	ldr	r2, [r7, #4]
 8000fc2:	60da      	str	r2, [r3, #12]
}  
 8000fc4:	46c0      	nop			; (mov r8, r8)
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	b002      	add	sp, #8
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	40022000 	.word	0x40022000
 8000fd0:	20000118 	.word	0x20000118

08000fd4 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8000fd4:	b5b0      	push	{r4, r5, r7, lr}
 8000fd6:	b084      	sub	sp, #16
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
 8000fdc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000fde:	230f      	movs	r3, #15
 8000fe0:	18fb      	adds	r3, r7, r3
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	701a      	strb	r2, [r3, #0]
  uint32_t address = 0U;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000fea:	4b32      	ldr	r3, [pc, #200]	; (80010b4 <HAL_FLASHEx_Erase+0xe0>)
 8000fec:	7e1b      	ldrb	r3, [r3, #24]
 8000fee:	2b01      	cmp	r3, #1
 8000ff0:	d101      	bne.n	8000ff6 <HAL_FLASHEx_Erase+0x22>
 8000ff2:	2302      	movs	r3, #2
 8000ff4:	e05a      	b.n	80010ac <HAL_FLASHEx_Erase+0xd8>
 8000ff6:	4b2f      	ldr	r3, [pc, #188]	; (80010b4 <HAL_FLASHEx_Erase+0xe0>)
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	2b01      	cmp	r3, #1
 8001002:	d116      	bne.n	8001032 <HAL_FLASHEx_Erase+0x5e>
  {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8001004:	4b2c      	ldr	r3, [pc, #176]	; (80010b8 <HAL_FLASHEx_Erase+0xe4>)
 8001006:	0018      	movs	r0, r3
 8001008:	f7ff ff74 	bl	8000ef4 <FLASH_WaitForLastOperation>
 800100c:	1e03      	subs	r3, r0, #0
 800100e:	d147      	bne.n	80010a0 <HAL_FLASHEx_Erase+0xcc>
      {
        /*Mass erase to be done*/
        FLASH_MassErase();
 8001010:	f000 f856 	bl	80010c0 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001014:	230f      	movs	r3, #15
 8001016:	18fc      	adds	r4, r7, r3
 8001018:	4b27      	ldr	r3, [pc, #156]	; (80010b8 <HAL_FLASHEx_Erase+0xe4>)
 800101a:	0018      	movs	r0, r3
 800101c:	f7ff ff6a 	bl	8000ef4 <FLASH_WaitForLastOperation>
 8001020:	0003      	movs	r3, r0
 8001022:	7023      	strb	r3, [r4, #0]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8001024:	4b25      	ldr	r3, [pc, #148]	; (80010bc <HAL_FLASHEx_Erase+0xe8>)
 8001026:	691a      	ldr	r2, [r3, #16]
 8001028:	4b24      	ldr	r3, [pc, #144]	; (80010bc <HAL_FLASHEx_Erase+0xe8>)
 800102a:	2104      	movs	r1, #4
 800102c:	438a      	bics	r2, r1
 800102e:	611a      	str	r2, [r3, #16]
 8001030:	e036      	b.n	80010a0 <HAL_FLASHEx_Erase+0xcc>
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
    
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8001032:	4b21      	ldr	r3, [pc, #132]	; (80010b8 <HAL_FLASHEx_Erase+0xe4>)
 8001034:	0018      	movs	r0, r3
 8001036:	f7ff ff5d 	bl	8000ef4 <FLASH_WaitForLastOperation>
 800103a:	1e03      	subs	r3, r0, #0
 800103c:	d130      	bne.n	80010a0 <HAL_FLASHEx_Erase+0xcc>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	2201      	movs	r2, #1
 8001042:	4252      	negs	r2, r2
 8001044:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	60bb      	str	r3, [r7, #8]
 800104c:	e01f      	b.n	800108e <HAL_FLASHEx_Erase+0xba>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 800104e:	68bb      	ldr	r3, [r7, #8]
 8001050:	0018      	movs	r0, r3
 8001052:	f000 f84d 	bl	80010f0 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001056:	250f      	movs	r5, #15
 8001058:	197c      	adds	r4, r7, r5
 800105a:	4b17      	ldr	r3, [pc, #92]	; (80010b8 <HAL_FLASHEx_Erase+0xe4>)
 800105c:	0018      	movs	r0, r3
 800105e:	f7ff ff49 	bl	8000ef4 <FLASH_WaitForLastOperation>
 8001062:	0003      	movs	r3, r0
 8001064:	7023      	strb	r3, [r4, #0]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8001066:	4b15      	ldr	r3, [pc, #84]	; (80010bc <HAL_FLASHEx_Erase+0xe8>)
 8001068:	691a      	ldr	r2, [r3, #16]
 800106a:	4b14      	ldr	r3, [pc, #80]	; (80010bc <HAL_FLASHEx_Erase+0xe8>)
 800106c:	2102      	movs	r1, #2
 800106e:	438a      	bics	r2, r1
 8001070:	611a      	str	r2, [r3, #16]
          
          if (status != HAL_OK)
 8001072:	197b      	adds	r3, r7, r5
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d003      	beq.n	8001082 <HAL_FLASHEx_Erase+0xae>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	68ba      	ldr	r2, [r7, #8]
 800107e:	601a      	str	r2, [r3, #0]
            break;
 8001080:	e00e      	b.n	80010a0 <HAL_FLASHEx_Erase+0xcc>
            address += FLASH_PAGE_SIZE)
 8001082:	68bb      	ldr	r3, [r7, #8]
 8001084:	2280      	movs	r2, #128	; 0x80
 8001086:	00d2      	lsls	r2, r2, #3
 8001088:	4694      	mov	ip, r2
 800108a:	4463      	add	r3, ip
 800108c:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	689b      	ldr	r3, [r3, #8]
 8001092:	029a      	lsls	r2, r3, #10
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	18d3      	adds	r3, r2, r3
        for(address = pEraseInit->PageAddress;
 800109a:	68ba      	ldr	r2, [r7, #8]
 800109c:	429a      	cmp	r2, r3
 800109e:	d3d6      	bcc.n	800104e <HAL_FLASHEx_Erase+0x7a>
        }
      }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80010a0:	4b04      	ldr	r3, [pc, #16]	; (80010b4 <HAL_FLASHEx_Erase+0xe0>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	761a      	strb	r2, [r3, #24]

  return status;
 80010a6:	230f      	movs	r3, #15
 80010a8:	18fb      	adds	r3, r7, r3
 80010aa:	781b      	ldrb	r3, [r3, #0]
}
 80010ac:	0018      	movs	r0, r3
 80010ae:	46bd      	mov	sp, r7
 80010b0:	b004      	add	sp, #16
 80010b2:	bdb0      	pop	{r4, r5, r7, pc}
 80010b4:	20000118 	.word	0x20000118
 80010b8:	0000c350 	.word	0x0000c350
 80010bc:	40022000 	.word	0x40022000

080010c0 <FLASH_MassErase>:
  * @brief  Full erase of FLASH memory Bank 
  *
  * @retval None
  */
static void FLASH_MassErase(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80010c4:	4b08      	ldr	r3, [pc, #32]	; (80010e8 <FLASH_MassErase+0x28>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80010ca:	4b08      	ldr	r3, [pc, #32]	; (80010ec <FLASH_MassErase+0x2c>)
 80010cc:	691a      	ldr	r2, [r3, #16]
 80010ce:	4b07      	ldr	r3, [pc, #28]	; (80010ec <FLASH_MassErase+0x2c>)
 80010d0:	2104      	movs	r1, #4
 80010d2:	430a      	orrs	r2, r1
 80010d4:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80010d6:	4b05      	ldr	r3, [pc, #20]	; (80010ec <FLASH_MassErase+0x2c>)
 80010d8:	691a      	ldr	r2, [r3, #16]
 80010da:	4b04      	ldr	r3, [pc, #16]	; (80010ec <FLASH_MassErase+0x2c>)
 80010dc:	2140      	movs	r1, #64	; 0x40
 80010de:	430a      	orrs	r2, r1
 80010e0:	611a      	str	r2, [r3, #16]
}
 80010e2:	46c0      	nop			; (mov r8, r8)
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	20000118 	.word	0x20000118
 80010ec:	40022000 	.word	0x40022000

080010f0 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80010f8:	4b0a      	ldr	r3, [pc, #40]	; (8001124 <FLASH_PageErase+0x34>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 80010fe:	4b0a      	ldr	r3, [pc, #40]	; (8001128 <FLASH_PageErase+0x38>)
 8001100:	691a      	ldr	r2, [r3, #16]
 8001102:	4b09      	ldr	r3, [pc, #36]	; (8001128 <FLASH_PageErase+0x38>)
 8001104:	2102      	movs	r1, #2
 8001106:	430a      	orrs	r2, r1
 8001108:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 800110a:	4b07      	ldr	r3, [pc, #28]	; (8001128 <FLASH_PageErase+0x38>)
 800110c:	687a      	ldr	r2, [r7, #4]
 800110e:	615a      	str	r2, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001110:	4b05      	ldr	r3, [pc, #20]	; (8001128 <FLASH_PageErase+0x38>)
 8001112:	691a      	ldr	r2, [r3, #16]
 8001114:	4b04      	ldr	r3, [pc, #16]	; (8001128 <FLASH_PageErase+0x38>)
 8001116:	2140      	movs	r1, #64	; 0x40
 8001118:	430a      	orrs	r2, r1
 800111a:	611a      	str	r2, [r3, #16]
}
 800111c:	46c0      	nop			; (mov r8, r8)
 800111e:	46bd      	mov	sp, r7
 8001120:	b002      	add	sp, #8
 8001122:	bd80      	pop	{r7, pc}
 8001124:	20000118 	.word	0x20000118
 8001128:	40022000 	.word	0x40022000

0800112c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 800112c:	b580      	push	{r7, lr}
 800112e:	b086      	sub	sp, #24
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
 8001134:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001136:	2300      	movs	r3, #0
 8001138:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800113a:	e14f      	b.n	80013dc <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	2101      	movs	r1, #1
 8001142:	697a      	ldr	r2, [r7, #20]
 8001144:	4091      	lsls	r1, r2
 8001146:	000a      	movs	r2, r1
 8001148:	4013      	ands	r3, r2
 800114a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d100      	bne.n	8001154 <HAL_GPIO_Init+0x28>
 8001152:	e140      	b.n	80013d6 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	2b01      	cmp	r3, #1
 800115a:	d00b      	beq.n	8001174 <HAL_GPIO_Init+0x48>
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	2b02      	cmp	r3, #2
 8001162:	d007      	beq.n	8001174 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001168:	2b11      	cmp	r3, #17
 800116a:	d003      	beq.n	8001174 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	2b12      	cmp	r3, #18
 8001172:	d130      	bne.n	80011d6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	689b      	ldr	r3, [r3, #8]
 8001178:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	005b      	lsls	r3, r3, #1
 800117e:	2203      	movs	r2, #3
 8001180:	409a      	lsls	r2, r3
 8001182:	0013      	movs	r3, r2
 8001184:	43da      	mvns	r2, r3
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	4013      	ands	r3, r2
 800118a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	68da      	ldr	r2, [r3, #12]
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	005b      	lsls	r3, r3, #1
 8001194:	409a      	lsls	r2, r3
 8001196:	0013      	movs	r3, r2
 8001198:	693a      	ldr	r2, [r7, #16]
 800119a:	4313      	orrs	r3, r2
 800119c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	693a      	ldr	r2, [r7, #16]
 80011a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011aa:	2201      	movs	r2, #1
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	409a      	lsls	r2, r3
 80011b0:	0013      	movs	r3, r2
 80011b2:	43da      	mvns	r2, r3
 80011b4:	693b      	ldr	r3, [r7, #16]
 80011b6:	4013      	ands	r3, r2
 80011b8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	091b      	lsrs	r3, r3, #4
 80011c0:	2201      	movs	r2, #1
 80011c2:	401a      	ands	r2, r3
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	409a      	lsls	r2, r3
 80011c8:	0013      	movs	r3, r2
 80011ca:	693a      	ldr	r2, [r7, #16]
 80011cc:	4313      	orrs	r3, r2
 80011ce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	693a      	ldr	r2, [r7, #16]
 80011d4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	68db      	ldr	r3, [r3, #12]
 80011da:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	005b      	lsls	r3, r3, #1
 80011e0:	2203      	movs	r2, #3
 80011e2:	409a      	lsls	r2, r3
 80011e4:	0013      	movs	r3, r2
 80011e6:	43da      	mvns	r2, r3
 80011e8:	693b      	ldr	r3, [r7, #16]
 80011ea:	4013      	ands	r3, r2
 80011ec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	689a      	ldr	r2, [r3, #8]
 80011f2:	697b      	ldr	r3, [r7, #20]
 80011f4:	005b      	lsls	r3, r3, #1
 80011f6:	409a      	lsls	r2, r3
 80011f8:	0013      	movs	r3, r2
 80011fa:	693a      	ldr	r2, [r7, #16]
 80011fc:	4313      	orrs	r3, r2
 80011fe:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	693a      	ldr	r2, [r7, #16]
 8001204:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	2b02      	cmp	r3, #2
 800120c:	d003      	beq.n	8001216 <HAL_GPIO_Init+0xea>
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	2b12      	cmp	r3, #18
 8001214:	d123      	bne.n	800125e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001216:	697b      	ldr	r3, [r7, #20]
 8001218:	08da      	lsrs	r2, r3, #3
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	3208      	adds	r2, #8
 800121e:	0092      	lsls	r2, r2, #2
 8001220:	58d3      	ldr	r3, [r2, r3]
 8001222:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	2207      	movs	r2, #7
 8001228:	4013      	ands	r3, r2
 800122a:	009b      	lsls	r3, r3, #2
 800122c:	220f      	movs	r2, #15
 800122e:	409a      	lsls	r2, r3
 8001230:	0013      	movs	r3, r2
 8001232:	43da      	mvns	r2, r3
 8001234:	693b      	ldr	r3, [r7, #16]
 8001236:	4013      	ands	r3, r2
 8001238:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	691a      	ldr	r2, [r3, #16]
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	2107      	movs	r1, #7
 8001242:	400b      	ands	r3, r1
 8001244:	009b      	lsls	r3, r3, #2
 8001246:	409a      	lsls	r2, r3
 8001248:	0013      	movs	r3, r2
 800124a:	693a      	ldr	r2, [r7, #16]
 800124c:	4313      	orrs	r3, r2
 800124e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	08da      	lsrs	r2, r3, #3
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	3208      	adds	r2, #8
 8001258:	0092      	lsls	r2, r2, #2
 800125a:	6939      	ldr	r1, [r7, #16]
 800125c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	005b      	lsls	r3, r3, #1
 8001268:	2203      	movs	r2, #3
 800126a:	409a      	lsls	r2, r3
 800126c:	0013      	movs	r3, r2
 800126e:	43da      	mvns	r2, r3
 8001270:	693b      	ldr	r3, [r7, #16]
 8001272:	4013      	ands	r3, r2
 8001274:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	2203      	movs	r2, #3
 800127c:	401a      	ands	r2, r3
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	005b      	lsls	r3, r3, #1
 8001282:	409a      	lsls	r2, r3
 8001284:	0013      	movs	r3, r2
 8001286:	693a      	ldr	r2, [r7, #16]
 8001288:	4313      	orrs	r3, r2
 800128a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	693a      	ldr	r2, [r7, #16]
 8001290:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	685a      	ldr	r2, [r3, #4]
 8001296:	2380      	movs	r3, #128	; 0x80
 8001298:	055b      	lsls	r3, r3, #21
 800129a:	4013      	ands	r3, r2
 800129c:	d100      	bne.n	80012a0 <HAL_GPIO_Init+0x174>
 800129e:	e09a      	b.n	80013d6 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012a0:	4b54      	ldr	r3, [pc, #336]	; (80013f4 <HAL_GPIO_Init+0x2c8>)
 80012a2:	699a      	ldr	r2, [r3, #24]
 80012a4:	4b53      	ldr	r3, [pc, #332]	; (80013f4 <HAL_GPIO_Init+0x2c8>)
 80012a6:	2101      	movs	r1, #1
 80012a8:	430a      	orrs	r2, r1
 80012aa:	619a      	str	r2, [r3, #24]
 80012ac:	4b51      	ldr	r3, [pc, #324]	; (80013f4 <HAL_GPIO_Init+0x2c8>)
 80012ae:	699b      	ldr	r3, [r3, #24]
 80012b0:	2201      	movs	r2, #1
 80012b2:	4013      	ands	r3, r2
 80012b4:	60bb      	str	r3, [r7, #8]
 80012b6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80012b8:	4a4f      	ldr	r2, [pc, #316]	; (80013f8 <HAL_GPIO_Init+0x2cc>)
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	089b      	lsrs	r3, r3, #2
 80012be:	3302      	adds	r3, #2
 80012c0:	009b      	lsls	r3, r3, #2
 80012c2:	589b      	ldr	r3, [r3, r2]
 80012c4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80012c6:	697b      	ldr	r3, [r7, #20]
 80012c8:	2203      	movs	r2, #3
 80012ca:	4013      	ands	r3, r2
 80012cc:	009b      	lsls	r3, r3, #2
 80012ce:	220f      	movs	r2, #15
 80012d0:	409a      	lsls	r2, r3
 80012d2:	0013      	movs	r3, r2
 80012d4:	43da      	mvns	r2, r3
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	4013      	ands	r3, r2
 80012da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80012dc:	687a      	ldr	r2, [r7, #4]
 80012de:	2390      	movs	r3, #144	; 0x90
 80012e0:	05db      	lsls	r3, r3, #23
 80012e2:	429a      	cmp	r2, r3
 80012e4:	d013      	beq.n	800130e <HAL_GPIO_Init+0x1e2>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	4a44      	ldr	r2, [pc, #272]	; (80013fc <HAL_GPIO_Init+0x2d0>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d00d      	beq.n	800130a <HAL_GPIO_Init+0x1de>
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	4a43      	ldr	r2, [pc, #268]	; (8001400 <HAL_GPIO_Init+0x2d4>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d007      	beq.n	8001306 <HAL_GPIO_Init+0x1da>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4a42      	ldr	r2, [pc, #264]	; (8001404 <HAL_GPIO_Init+0x2d8>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d101      	bne.n	8001302 <HAL_GPIO_Init+0x1d6>
 80012fe:	2303      	movs	r3, #3
 8001300:	e006      	b.n	8001310 <HAL_GPIO_Init+0x1e4>
 8001302:	2305      	movs	r3, #5
 8001304:	e004      	b.n	8001310 <HAL_GPIO_Init+0x1e4>
 8001306:	2302      	movs	r3, #2
 8001308:	e002      	b.n	8001310 <HAL_GPIO_Init+0x1e4>
 800130a:	2301      	movs	r3, #1
 800130c:	e000      	b.n	8001310 <HAL_GPIO_Init+0x1e4>
 800130e:	2300      	movs	r3, #0
 8001310:	697a      	ldr	r2, [r7, #20]
 8001312:	2103      	movs	r1, #3
 8001314:	400a      	ands	r2, r1
 8001316:	0092      	lsls	r2, r2, #2
 8001318:	4093      	lsls	r3, r2
 800131a:	693a      	ldr	r2, [r7, #16]
 800131c:	4313      	orrs	r3, r2
 800131e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001320:	4935      	ldr	r1, [pc, #212]	; (80013f8 <HAL_GPIO_Init+0x2cc>)
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	089b      	lsrs	r3, r3, #2
 8001326:	3302      	adds	r3, #2
 8001328:	009b      	lsls	r3, r3, #2
 800132a:	693a      	ldr	r2, [r7, #16]
 800132c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800132e:	4b36      	ldr	r3, [pc, #216]	; (8001408 <HAL_GPIO_Init+0x2dc>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	43da      	mvns	r2, r3
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	4013      	ands	r3, r2
 800133c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	685a      	ldr	r2, [r3, #4]
 8001342:	2380      	movs	r3, #128	; 0x80
 8001344:	025b      	lsls	r3, r3, #9
 8001346:	4013      	ands	r3, r2
 8001348:	d003      	beq.n	8001352 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 800134a:	693a      	ldr	r2, [r7, #16]
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	4313      	orrs	r3, r2
 8001350:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001352:	4b2d      	ldr	r3, [pc, #180]	; (8001408 <HAL_GPIO_Init+0x2dc>)
 8001354:	693a      	ldr	r2, [r7, #16]
 8001356:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001358:	4b2b      	ldr	r3, [pc, #172]	; (8001408 <HAL_GPIO_Init+0x2dc>)
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	43da      	mvns	r2, r3
 8001362:	693b      	ldr	r3, [r7, #16]
 8001364:	4013      	ands	r3, r2
 8001366:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	685a      	ldr	r2, [r3, #4]
 800136c:	2380      	movs	r3, #128	; 0x80
 800136e:	029b      	lsls	r3, r3, #10
 8001370:	4013      	ands	r3, r2
 8001372:	d003      	beq.n	800137c <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001374:	693a      	ldr	r2, [r7, #16]
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	4313      	orrs	r3, r2
 800137a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800137c:	4b22      	ldr	r3, [pc, #136]	; (8001408 <HAL_GPIO_Init+0x2dc>)
 800137e:	693a      	ldr	r2, [r7, #16]
 8001380:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001382:	4b21      	ldr	r3, [pc, #132]	; (8001408 <HAL_GPIO_Init+0x2dc>)
 8001384:	689b      	ldr	r3, [r3, #8]
 8001386:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	43da      	mvns	r2, r3
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	4013      	ands	r3, r2
 8001390:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	685a      	ldr	r2, [r3, #4]
 8001396:	2380      	movs	r3, #128	; 0x80
 8001398:	035b      	lsls	r3, r3, #13
 800139a:	4013      	ands	r3, r2
 800139c:	d003      	beq.n	80013a6 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 800139e:	693a      	ldr	r2, [r7, #16]
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	4313      	orrs	r3, r2
 80013a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80013a6:	4b18      	ldr	r3, [pc, #96]	; (8001408 <HAL_GPIO_Init+0x2dc>)
 80013a8:	693a      	ldr	r2, [r7, #16]
 80013aa:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80013ac:	4b16      	ldr	r3, [pc, #88]	; (8001408 <HAL_GPIO_Init+0x2dc>)
 80013ae:	68db      	ldr	r3, [r3, #12]
 80013b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	43da      	mvns	r2, r3
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	4013      	ands	r3, r2
 80013ba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	685a      	ldr	r2, [r3, #4]
 80013c0:	2380      	movs	r3, #128	; 0x80
 80013c2:	039b      	lsls	r3, r3, #14
 80013c4:	4013      	ands	r3, r2
 80013c6:	d003      	beq.n	80013d0 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 80013c8:	693a      	ldr	r2, [r7, #16]
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	4313      	orrs	r3, r2
 80013ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80013d0:	4b0d      	ldr	r3, [pc, #52]	; (8001408 <HAL_GPIO_Init+0x2dc>)
 80013d2:	693a      	ldr	r2, [r7, #16]
 80013d4:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80013d6:	697b      	ldr	r3, [r7, #20]
 80013d8:	3301      	adds	r3, #1
 80013da:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	681a      	ldr	r2, [r3, #0]
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	40da      	lsrs	r2, r3
 80013e4:	1e13      	subs	r3, r2, #0
 80013e6:	d000      	beq.n	80013ea <HAL_GPIO_Init+0x2be>
 80013e8:	e6a8      	b.n	800113c <HAL_GPIO_Init+0x10>
  } 
}
 80013ea:	46c0      	nop			; (mov r8, r8)
 80013ec:	46bd      	mov	sp, r7
 80013ee:	b006      	add	sp, #24
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	46c0      	nop			; (mov r8, r8)
 80013f4:	40021000 	.word	0x40021000
 80013f8:	40010000 	.word	0x40010000
 80013fc:	48000400 	.word	0x48000400
 8001400:	48000800 	.word	0x48000800
 8001404:	48000c00 	.word	0x48000c00
 8001408:	40010400 	.word	0x40010400

0800140c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
 8001414:	0008      	movs	r0, r1
 8001416:	0011      	movs	r1, r2
 8001418:	1cbb      	adds	r3, r7, #2
 800141a:	1c02      	adds	r2, r0, #0
 800141c:	801a      	strh	r2, [r3, #0]
 800141e:	1c7b      	adds	r3, r7, #1
 8001420:	1c0a      	adds	r2, r1, #0
 8001422:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001424:	1c7b      	adds	r3, r7, #1
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d004      	beq.n	8001436 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800142c:	1cbb      	adds	r3, r7, #2
 800142e:	881a      	ldrh	r2, [r3, #0]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001434:	e003      	b.n	800143e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001436:	1cbb      	adds	r3, r7, #2
 8001438:	881a      	ldrh	r2, [r3, #0]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800143e:	46c0      	nop			; (mov r8, r8)
 8001440:	46bd      	mov	sp, r7
 8001442:	b002      	add	sp, #8
 8001444:	bd80      	pop	{r7, pc}

08001446 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001446:	b580      	push	{r7, lr}
 8001448:	b084      	sub	sp, #16
 800144a:	af00      	add	r7, sp, #0
 800144c:	6078      	str	r0, [r7, #4]
 800144e:	000a      	movs	r2, r1
 8001450:	1cbb      	adds	r3, r7, #2
 8001452:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	695b      	ldr	r3, [r3, #20]
 8001458:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800145a:	1cbb      	adds	r3, r7, #2
 800145c:	881b      	ldrh	r3, [r3, #0]
 800145e:	68fa      	ldr	r2, [r7, #12]
 8001460:	4013      	ands	r3, r2
 8001462:	041a      	lsls	r2, r3, #16
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	43db      	mvns	r3, r3
 8001468:	1cb9      	adds	r1, r7, #2
 800146a:	8809      	ldrh	r1, [r1, #0]
 800146c:	400b      	ands	r3, r1
 800146e:	431a      	orrs	r2, r3
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	619a      	str	r2, [r3, #24]
}
 8001474:	46c0      	nop			; (mov r8, r8)
 8001476:	46bd      	mov	sp, r7
 8001478:	b004      	add	sp, #16
 800147a:	bd80      	pop	{r7, pc}

0800147c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b088      	sub	sp, #32
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d101      	bne.n	800148e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800148a:	2301      	movs	r3, #1
 800148c:	e303      	b.n	8001a96 <HAL_RCC_OscConfig+0x61a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	2201      	movs	r2, #1
 8001494:	4013      	ands	r3, r2
 8001496:	d100      	bne.n	800149a <HAL_RCC_OscConfig+0x1e>
 8001498:	e08d      	b.n	80015b6 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800149a:	4bc4      	ldr	r3, [pc, #784]	; (80017ac <HAL_RCC_OscConfig+0x330>)
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	220c      	movs	r2, #12
 80014a0:	4013      	ands	r3, r2
 80014a2:	2b04      	cmp	r3, #4
 80014a4:	d00e      	beq.n	80014c4 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80014a6:	4bc1      	ldr	r3, [pc, #772]	; (80017ac <HAL_RCC_OscConfig+0x330>)
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	220c      	movs	r2, #12
 80014ac:	4013      	ands	r3, r2
 80014ae:	2b08      	cmp	r3, #8
 80014b0:	d116      	bne.n	80014e0 <HAL_RCC_OscConfig+0x64>
 80014b2:	4bbe      	ldr	r3, [pc, #760]	; (80017ac <HAL_RCC_OscConfig+0x330>)
 80014b4:	685a      	ldr	r2, [r3, #4]
 80014b6:	2380      	movs	r3, #128	; 0x80
 80014b8:	025b      	lsls	r3, r3, #9
 80014ba:	401a      	ands	r2, r3
 80014bc:	2380      	movs	r3, #128	; 0x80
 80014be:	025b      	lsls	r3, r3, #9
 80014c0:	429a      	cmp	r2, r3
 80014c2:	d10d      	bne.n	80014e0 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014c4:	4bb9      	ldr	r3, [pc, #740]	; (80017ac <HAL_RCC_OscConfig+0x330>)
 80014c6:	681a      	ldr	r2, [r3, #0]
 80014c8:	2380      	movs	r3, #128	; 0x80
 80014ca:	029b      	lsls	r3, r3, #10
 80014cc:	4013      	ands	r3, r2
 80014ce:	d100      	bne.n	80014d2 <HAL_RCC_OscConfig+0x56>
 80014d0:	e070      	b.n	80015b4 <HAL_RCC_OscConfig+0x138>
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d000      	beq.n	80014dc <HAL_RCC_OscConfig+0x60>
 80014da:	e06b      	b.n	80015b4 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80014dc:	2301      	movs	r3, #1
 80014de:	e2da      	b.n	8001a96 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	2b01      	cmp	r3, #1
 80014e6:	d107      	bne.n	80014f8 <HAL_RCC_OscConfig+0x7c>
 80014e8:	4bb0      	ldr	r3, [pc, #704]	; (80017ac <HAL_RCC_OscConfig+0x330>)
 80014ea:	681a      	ldr	r2, [r3, #0]
 80014ec:	4baf      	ldr	r3, [pc, #700]	; (80017ac <HAL_RCC_OscConfig+0x330>)
 80014ee:	2180      	movs	r1, #128	; 0x80
 80014f0:	0249      	lsls	r1, r1, #9
 80014f2:	430a      	orrs	r2, r1
 80014f4:	601a      	str	r2, [r3, #0]
 80014f6:	e02f      	b.n	8001558 <HAL_RCC_OscConfig+0xdc>
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d10c      	bne.n	800151a <HAL_RCC_OscConfig+0x9e>
 8001500:	4baa      	ldr	r3, [pc, #680]	; (80017ac <HAL_RCC_OscConfig+0x330>)
 8001502:	681a      	ldr	r2, [r3, #0]
 8001504:	4ba9      	ldr	r3, [pc, #676]	; (80017ac <HAL_RCC_OscConfig+0x330>)
 8001506:	49aa      	ldr	r1, [pc, #680]	; (80017b0 <HAL_RCC_OscConfig+0x334>)
 8001508:	400a      	ands	r2, r1
 800150a:	601a      	str	r2, [r3, #0]
 800150c:	4ba7      	ldr	r3, [pc, #668]	; (80017ac <HAL_RCC_OscConfig+0x330>)
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	4ba6      	ldr	r3, [pc, #664]	; (80017ac <HAL_RCC_OscConfig+0x330>)
 8001512:	49a8      	ldr	r1, [pc, #672]	; (80017b4 <HAL_RCC_OscConfig+0x338>)
 8001514:	400a      	ands	r2, r1
 8001516:	601a      	str	r2, [r3, #0]
 8001518:	e01e      	b.n	8001558 <HAL_RCC_OscConfig+0xdc>
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	2b05      	cmp	r3, #5
 8001520:	d10e      	bne.n	8001540 <HAL_RCC_OscConfig+0xc4>
 8001522:	4ba2      	ldr	r3, [pc, #648]	; (80017ac <HAL_RCC_OscConfig+0x330>)
 8001524:	681a      	ldr	r2, [r3, #0]
 8001526:	4ba1      	ldr	r3, [pc, #644]	; (80017ac <HAL_RCC_OscConfig+0x330>)
 8001528:	2180      	movs	r1, #128	; 0x80
 800152a:	02c9      	lsls	r1, r1, #11
 800152c:	430a      	orrs	r2, r1
 800152e:	601a      	str	r2, [r3, #0]
 8001530:	4b9e      	ldr	r3, [pc, #632]	; (80017ac <HAL_RCC_OscConfig+0x330>)
 8001532:	681a      	ldr	r2, [r3, #0]
 8001534:	4b9d      	ldr	r3, [pc, #628]	; (80017ac <HAL_RCC_OscConfig+0x330>)
 8001536:	2180      	movs	r1, #128	; 0x80
 8001538:	0249      	lsls	r1, r1, #9
 800153a:	430a      	orrs	r2, r1
 800153c:	601a      	str	r2, [r3, #0]
 800153e:	e00b      	b.n	8001558 <HAL_RCC_OscConfig+0xdc>
 8001540:	4b9a      	ldr	r3, [pc, #616]	; (80017ac <HAL_RCC_OscConfig+0x330>)
 8001542:	681a      	ldr	r2, [r3, #0]
 8001544:	4b99      	ldr	r3, [pc, #612]	; (80017ac <HAL_RCC_OscConfig+0x330>)
 8001546:	499a      	ldr	r1, [pc, #616]	; (80017b0 <HAL_RCC_OscConfig+0x334>)
 8001548:	400a      	ands	r2, r1
 800154a:	601a      	str	r2, [r3, #0]
 800154c:	4b97      	ldr	r3, [pc, #604]	; (80017ac <HAL_RCC_OscConfig+0x330>)
 800154e:	681a      	ldr	r2, [r3, #0]
 8001550:	4b96      	ldr	r3, [pc, #600]	; (80017ac <HAL_RCC_OscConfig+0x330>)
 8001552:	4998      	ldr	r1, [pc, #608]	; (80017b4 <HAL_RCC_OscConfig+0x338>)
 8001554:	400a      	ands	r2, r1
 8001556:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d014      	beq.n	800158a <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001560:	f7ff fb02 	bl	8000b68 <HAL_GetTick>
 8001564:	0003      	movs	r3, r0
 8001566:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001568:	e008      	b.n	800157c <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800156a:	f7ff fafd 	bl	8000b68 <HAL_GetTick>
 800156e:	0002      	movs	r2, r0
 8001570:	69bb      	ldr	r3, [r7, #24]
 8001572:	1ad3      	subs	r3, r2, r3
 8001574:	2b64      	cmp	r3, #100	; 0x64
 8001576:	d901      	bls.n	800157c <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001578:	2303      	movs	r3, #3
 800157a:	e28c      	b.n	8001a96 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800157c:	4b8b      	ldr	r3, [pc, #556]	; (80017ac <HAL_RCC_OscConfig+0x330>)
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	2380      	movs	r3, #128	; 0x80
 8001582:	029b      	lsls	r3, r3, #10
 8001584:	4013      	ands	r3, r2
 8001586:	d0f0      	beq.n	800156a <HAL_RCC_OscConfig+0xee>
 8001588:	e015      	b.n	80015b6 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800158a:	f7ff faed 	bl	8000b68 <HAL_GetTick>
 800158e:	0003      	movs	r3, r0
 8001590:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001592:	e008      	b.n	80015a6 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001594:	f7ff fae8 	bl	8000b68 <HAL_GetTick>
 8001598:	0002      	movs	r2, r0
 800159a:	69bb      	ldr	r3, [r7, #24]
 800159c:	1ad3      	subs	r3, r2, r3
 800159e:	2b64      	cmp	r3, #100	; 0x64
 80015a0:	d901      	bls.n	80015a6 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80015a2:	2303      	movs	r3, #3
 80015a4:	e277      	b.n	8001a96 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015a6:	4b81      	ldr	r3, [pc, #516]	; (80017ac <HAL_RCC_OscConfig+0x330>)
 80015a8:	681a      	ldr	r2, [r3, #0]
 80015aa:	2380      	movs	r3, #128	; 0x80
 80015ac:	029b      	lsls	r3, r3, #10
 80015ae:	4013      	ands	r3, r2
 80015b0:	d1f0      	bne.n	8001594 <HAL_RCC_OscConfig+0x118>
 80015b2:	e000      	b.n	80015b6 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015b4:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	2202      	movs	r2, #2
 80015bc:	4013      	ands	r3, r2
 80015be:	d100      	bne.n	80015c2 <HAL_RCC_OscConfig+0x146>
 80015c0:	e069      	b.n	8001696 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80015c2:	4b7a      	ldr	r3, [pc, #488]	; (80017ac <HAL_RCC_OscConfig+0x330>)
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	220c      	movs	r2, #12
 80015c8:	4013      	ands	r3, r2
 80015ca:	d00b      	beq.n	80015e4 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80015cc:	4b77      	ldr	r3, [pc, #476]	; (80017ac <HAL_RCC_OscConfig+0x330>)
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	220c      	movs	r2, #12
 80015d2:	4013      	ands	r3, r2
 80015d4:	2b08      	cmp	r3, #8
 80015d6:	d11c      	bne.n	8001612 <HAL_RCC_OscConfig+0x196>
 80015d8:	4b74      	ldr	r3, [pc, #464]	; (80017ac <HAL_RCC_OscConfig+0x330>)
 80015da:	685a      	ldr	r2, [r3, #4]
 80015dc:	2380      	movs	r3, #128	; 0x80
 80015de:	025b      	lsls	r3, r3, #9
 80015e0:	4013      	ands	r3, r2
 80015e2:	d116      	bne.n	8001612 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015e4:	4b71      	ldr	r3, [pc, #452]	; (80017ac <HAL_RCC_OscConfig+0x330>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	2202      	movs	r2, #2
 80015ea:	4013      	ands	r3, r2
 80015ec:	d005      	beq.n	80015fa <HAL_RCC_OscConfig+0x17e>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	68db      	ldr	r3, [r3, #12]
 80015f2:	2b01      	cmp	r3, #1
 80015f4:	d001      	beq.n	80015fa <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
 80015f8:	e24d      	b.n	8001a96 <HAL_RCC_OscConfig+0x61a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015fa:	4b6c      	ldr	r3, [pc, #432]	; (80017ac <HAL_RCC_OscConfig+0x330>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	22f8      	movs	r2, #248	; 0xf8
 8001600:	4393      	bics	r3, r2
 8001602:	0019      	movs	r1, r3
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	691b      	ldr	r3, [r3, #16]
 8001608:	00da      	lsls	r2, r3, #3
 800160a:	4b68      	ldr	r3, [pc, #416]	; (80017ac <HAL_RCC_OscConfig+0x330>)
 800160c:	430a      	orrs	r2, r1
 800160e:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001610:	e041      	b.n	8001696 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	68db      	ldr	r3, [r3, #12]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d024      	beq.n	8001664 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800161a:	4b64      	ldr	r3, [pc, #400]	; (80017ac <HAL_RCC_OscConfig+0x330>)
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	4b63      	ldr	r3, [pc, #396]	; (80017ac <HAL_RCC_OscConfig+0x330>)
 8001620:	2101      	movs	r1, #1
 8001622:	430a      	orrs	r2, r1
 8001624:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001626:	f7ff fa9f 	bl	8000b68 <HAL_GetTick>
 800162a:	0003      	movs	r3, r0
 800162c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800162e:	e008      	b.n	8001642 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001630:	f7ff fa9a 	bl	8000b68 <HAL_GetTick>
 8001634:	0002      	movs	r2, r0
 8001636:	69bb      	ldr	r3, [r7, #24]
 8001638:	1ad3      	subs	r3, r2, r3
 800163a:	2b02      	cmp	r3, #2
 800163c:	d901      	bls.n	8001642 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 800163e:	2303      	movs	r3, #3
 8001640:	e229      	b.n	8001a96 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001642:	4b5a      	ldr	r3, [pc, #360]	; (80017ac <HAL_RCC_OscConfig+0x330>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	2202      	movs	r2, #2
 8001648:	4013      	ands	r3, r2
 800164a:	d0f1      	beq.n	8001630 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800164c:	4b57      	ldr	r3, [pc, #348]	; (80017ac <HAL_RCC_OscConfig+0x330>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	22f8      	movs	r2, #248	; 0xf8
 8001652:	4393      	bics	r3, r2
 8001654:	0019      	movs	r1, r3
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	691b      	ldr	r3, [r3, #16]
 800165a:	00da      	lsls	r2, r3, #3
 800165c:	4b53      	ldr	r3, [pc, #332]	; (80017ac <HAL_RCC_OscConfig+0x330>)
 800165e:	430a      	orrs	r2, r1
 8001660:	601a      	str	r2, [r3, #0]
 8001662:	e018      	b.n	8001696 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001664:	4b51      	ldr	r3, [pc, #324]	; (80017ac <HAL_RCC_OscConfig+0x330>)
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	4b50      	ldr	r3, [pc, #320]	; (80017ac <HAL_RCC_OscConfig+0x330>)
 800166a:	2101      	movs	r1, #1
 800166c:	438a      	bics	r2, r1
 800166e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001670:	f7ff fa7a 	bl	8000b68 <HAL_GetTick>
 8001674:	0003      	movs	r3, r0
 8001676:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001678:	e008      	b.n	800168c <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800167a:	f7ff fa75 	bl	8000b68 <HAL_GetTick>
 800167e:	0002      	movs	r2, r0
 8001680:	69bb      	ldr	r3, [r7, #24]
 8001682:	1ad3      	subs	r3, r2, r3
 8001684:	2b02      	cmp	r3, #2
 8001686:	d901      	bls.n	800168c <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001688:	2303      	movs	r3, #3
 800168a:	e204      	b.n	8001a96 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800168c:	4b47      	ldr	r3, [pc, #284]	; (80017ac <HAL_RCC_OscConfig+0x330>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	2202      	movs	r2, #2
 8001692:	4013      	ands	r3, r2
 8001694:	d1f1      	bne.n	800167a <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	2208      	movs	r2, #8
 800169c:	4013      	ands	r3, r2
 800169e:	d036      	beq.n	800170e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	69db      	ldr	r3, [r3, #28]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d019      	beq.n	80016dc <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016a8:	4b40      	ldr	r3, [pc, #256]	; (80017ac <HAL_RCC_OscConfig+0x330>)
 80016aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016ac:	4b3f      	ldr	r3, [pc, #252]	; (80017ac <HAL_RCC_OscConfig+0x330>)
 80016ae:	2101      	movs	r1, #1
 80016b0:	430a      	orrs	r2, r1
 80016b2:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016b4:	f7ff fa58 	bl	8000b68 <HAL_GetTick>
 80016b8:	0003      	movs	r3, r0
 80016ba:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016bc:	e008      	b.n	80016d0 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016be:	f7ff fa53 	bl	8000b68 <HAL_GetTick>
 80016c2:	0002      	movs	r2, r0
 80016c4:	69bb      	ldr	r3, [r7, #24]
 80016c6:	1ad3      	subs	r3, r2, r3
 80016c8:	2b02      	cmp	r3, #2
 80016ca:	d901      	bls.n	80016d0 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80016cc:	2303      	movs	r3, #3
 80016ce:	e1e2      	b.n	8001a96 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016d0:	4b36      	ldr	r3, [pc, #216]	; (80017ac <HAL_RCC_OscConfig+0x330>)
 80016d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016d4:	2202      	movs	r2, #2
 80016d6:	4013      	ands	r3, r2
 80016d8:	d0f1      	beq.n	80016be <HAL_RCC_OscConfig+0x242>
 80016da:	e018      	b.n	800170e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016dc:	4b33      	ldr	r3, [pc, #204]	; (80017ac <HAL_RCC_OscConfig+0x330>)
 80016de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016e0:	4b32      	ldr	r3, [pc, #200]	; (80017ac <HAL_RCC_OscConfig+0x330>)
 80016e2:	2101      	movs	r1, #1
 80016e4:	438a      	bics	r2, r1
 80016e6:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016e8:	f7ff fa3e 	bl	8000b68 <HAL_GetTick>
 80016ec:	0003      	movs	r3, r0
 80016ee:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016f0:	e008      	b.n	8001704 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016f2:	f7ff fa39 	bl	8000b68 <HAL_GetTick>
 80016f6:	0002      	movs	r2, r0
 80016f8:	69bb      	ldr	r3, [r7, #24]
 80016fa:	1ad3      	subs	r3, r2, r3
 80016fc:	2b02      	cmp	r3, #2
 80016fe:	d901      	bls.n	8001704 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001700:	2303      	movs	r3, #3
 8001702:	e1c8      	b.n	8001a96 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001704:	4b29      	ldr	r3, [pc, #164]	; (80017ac <HAL_RCC_OscConfig+0x330>)
 8001706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001708:	2202      	movs	r2, #2
 800170a:	4013      	ands	r3, r2
 800170c:	d1f1      	bne.n	80016f2 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	2204      	movs	r2, #4
 8001714:	4013      	ands	r3, r2
 8001716:	d100      	bne.n	800171a <HAL_RCC_OscConfig+0x29e>
 8001718:	e0b6      	b.n	8001888 <HAL_RCC_OscConfig+0x40c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800171a:	231f      	movs	r3, #31
 800171c:	18fb      	adds	r3, r7, r3
 800171e:	2200      	movs	r2, #0
 8001720:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001722:	4b22      	ldr	r3, [pc, #136]	; (80017ac <HAL_RCC_OscConfig+0x330>)
 8001724:	69da      	ldr	r2, [r3, #28]
 8001726:	2380      	movs	r3, #128	; 0x80
 8001728:	055b      	lsls	r3, r3, #21
 800172a:	4013      	ands	r3, r2
 800172c:	d111      	bne.n	8001752 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800172e:	4b1f      	ldr	r3, [pc, #124]	; (80017ac <HAL_RCC_OscConfig+0x330>)
 8001730:	69da      	ldr	r2, [r3, #28]
 8001732:	4b1e      	ldr	r3, [pc, #120]	; (80017ac <HAL_RCC_OscConfig+0x330>)
 8001734:	2180      	movs	r1, #128	; 0x80
 8001736:	0549      	lsls	r1, r1, #21
 8001738:	430a      	orrs	r2, r1
 800173a:	61da      	str	r2, [r3, #28]
 800173c:	4b1b      	ldr	r3, [pc, #108]	; (80017ac <HAL_RCC_OscConfig+0x330>)
 800173e:	69da      	ldr	r2, [r3, #28]
 8001740:	2380      	movs	r3, #128	; 0x80
 8001742:	055b      	lsls	r3, r3, #21
 8001744:	4013      	ands	r3, r2
 8001746:	60fb      	str	r3, [r7, #12]
 8001748:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800174a:	231f      	movs	r3, #31
 800174c:	18fb      	adds	r3, r7, r3
 800174e:	2201      	movs	r2, #1
 8001750:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001752:	4b19      	ldr	r3, [pc, #100]	; (80017b8 <HAL_RCC_OscConfig+0x33c>)
 8001754:	681a      	ldr	r2, [r3, #0]
 8001756:	2380      	movs	r3, #128	; 0x80
 8001758:	005b      	lsls	r3, r3, #1
 800175a:	4013      	ands	r3, r2
 800175c:	d11a      	bne.n	8001794 <HAL_RCC_OscConfig+0x318>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800175e:	4b16      	ldr	r3, [pc, #88]	; (80017b8 <HAL_RCC_OscConfig+0x33c>)
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	4b15      	ldr	r3, [pc, #84]	; (80017b8 <HAL_RCC_OscConfig+0x33c>)
 8001764:	2180      	movs	r1, #128	; 0x80
 8001766:	0049      	lsls	r1, r1, #1
 8001768:	430a      	orrs	r2, r1
 800176a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800176c:	f7ff f9fc 	bl	8000b68 <HAL_GetTick>
 8001770:	0003      	movs	r3, r0
 8001772:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001774:	e008      	b.n	8001788 <HAL_RCC_OscConfig+0x30c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001776:	f7ff f9f7 	bl	8000b68 <HAL_GetTick>
 800177a:	0002      	movs	r2, r0
 800177c:	69bb      	ldr	r3, [r7, #24]
 800177e:	1ad3      	subs	r3, r2, r3
 8001780:	2b64      	cmp	r3, #100	; 0x64
 8001782:	d901      	bls.n	8001788 <HAL_RCC_OscConfig+0x30c>
        {
          return HAL_TIMEOUT;
 8001784:	2303      	movs	r3, #3
 8001786:	e186      	b.n	8001a96 <HAL_RCC_OscConfig+0x61a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001788:	4b0b      	ldr	r3, [pc, #44]	; (80017b8 <HAL_RCC_OscConfig+0x33c>)
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	2380      	movs	r3, #128	; 0x80
 800178e:	005b      	lsls	r3, r3, #1
 8001790:	4013      	ands	r3, r2
 8001792:	d0f0      	beq.n	8001776 <HAL_RCC_OscConfig+0x2fa>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	689b      	ldr	r3, [r3, #8]
 8001798:	2b01      	cmp	r3, #1
 800179a:	d10f      	bne.n	80017bc <HAL_RCC_OscConfig+0x340>
 800179c:	4b03      	ldr	r3, [pc, #12]	; (80017ac <HAL_RCC_OscConfig+0x330>)
 800179e:	6a1a      	ldr	r2, [r3, #32]
 80017a0:	4b02      	ldr	r3, [pc, #8]	; (80017ac <HAL_RCC_OscConfig+0x330>)
 80017a2:	2101      	movs	r1, #1
 80017a4:	430a      	orrs	r2, r1
 80017a6:	621a      	str	r2, [r3, #32]
 80017a8:	e036      	b.n	8001818 <HAL_RCC_OscConfig+0x39c>
 80017aa:	46c0      	nop			; (mov r8, r8)
 80017ac:	40021000 	.word	0x40021000
 80017b0:	fffeffff 	.word	0xfffeffff
 80017b4:	fffbffff 	.word	0xfffbffff
 80017b8:	40007000 	.word	0x40007000
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	689b      	ldr	r3, [r3, #8]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d10c      	bne.n	80017de <HAL_RCC_OscConfig+0x362>
 80017c4:	4bb6      	ldr	r3, [pc, #728]	; (8001aa0 <HAL_RCC_OscConfig+0x624>)
 80017c6:	6a1a      	ldr	r2, [r3, #32]
 80017c8:	4bb5      	ldr	r3, [pc, #724]	; (8001aa0 <HAL_RCC_OscConfig+0x624>)
 80017ca:	2101      	movs	r1, #1
 80017cc:	438a      	bics	r2, r1
 80017ce:	621a      	str	r2, [r3, #32]
 80017d0:	4bb3      	ldr	r3, [pc, #716]	; (8001aa0 <HAL_RCC_OscConfig+0x624>)
 80017d2:	6a1a      	ldr	r2, [r3, #32]
 80017d4:	4bb2      	ldr	r3, [pc, #712]	; (8001aa0 <HAL_RCC_OscConfig+0x624>)
 80017d6:	2104      	movs	r1, #4
 80017d8:	438a      	bics	r2, r1
 80017da:	621a      	str	r2, [r3, #32]
 80017dc:	e01c      	b.n	8001818 <HAL_RCC_OscConfig+0x39c>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	689b      	ldr	r3, [r3, #8]
 80017e2:	2b05      	cmp	r3, #5
 80017e4:	d10c      	bne.n	8001800 <HAL_RCC_OscConfig+0x384>
 80017e6:	4bae      	ldr	r3, [pc, #696]	; (8001aa0 <HAL_RCC_OscConfig+0x624>)
 80017e8:	6a1a      	ldr	r2, [r3, #32]
 80017ea:	4bad      	ldr	r3, [pc, #692]	; (8001aa0 <HAL_RCC_OscConfig+0x624>)
 80017ec:	2104      	movs	r1, #4
 80017ee:	430a      	orrs	r2, r1
 80017f0:	621a      	str	r2, [r3, #32]
 80017f2:	4bab      	ldr	r3, [pc, #684]	; (8001aa0 <HAL_RCC_OscConfig+0x624>)
 80017f4:	6a1a      	ldr	r2, [r3, #32]
 80017f6:	4baa      	ldr	r3, [pc, #680]	; (8001aa0 <HAL_RCC_OscConfig+0x624>)
 80017f8:	2101      	movs	r1, #1
 80017fa:	430a      	orrs	r2, r1
 80017fc:	621a      	str	r2, [r3, #32]
 80017fe:	e00b      	b.n	8001818 <HAL_RCC_OscConfig+0x39c>
 8001800:	4ba7      	ldr	r3, [pc, #668]	; (8001aa0 <HAL_RCC_OscConfig+0x624>)
 8001802:	6a1a      	ldr	r2, [r3, #32]
 8001804:	4ba6      	ldr	r3, [pc, #664]	; (8001aa0 <HAL_RCC_OscConfig+0x624>)
 8001806:	2101      	movs	r1, #1
 8001808:	438a      	bics	r2, r1
 800180a:	621a      	str	r2, [r3, #32]
 800180c:	4ba4      	ldr	r3, [pc, #656]	; (8001aa0 <HAL_RCC_OscConfig+0x624>)
 800180e:	6a1a      	ldr	r2, [r3, #32]
 8001810:	4ba3      	ldr	r3, [pc, #652]	; (8001aa0 <HAL_RCC_OscConfig+0x624>)
 8001812:	2104      	movs	r1, #4
 8001814:	438a      	bics	r2, r1
 8001816:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	689b      	ldr	r3, [r3, #8]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d014      	beq.n	800184a <HAL_RCC_OscConfig+0x3ce>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001820:	f7ff f9a2 	bl	8000b68 <HAL_GetTick>
 8001824:	0003      	movs	r3, r0
 8001826:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001828:	e009      	b.n	800183e <HAL_RCC_OscConfig+0x3c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800182a:	f7ff f99d 	bl	8000b68 <HAL_GetTick>
 800182e:	0002      	movs	r2, r0
 8001830:	69bb      	ldr	r3, [r7, #24]
 8001832:	1ad3      	subs	r3, r2, r3
 8001834:	4a9b      	ldr	r2, [pc, #620]	; (8001aa4 <HAL_RCC_OscConfig+0x628>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d901      	bls.n	800183e <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 800183a:	2303      	movs	r3, #3
 800183c:	e12b      	b.n	8001a96 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800183e:	4b98      	ldr	r3, [pc, #608]	; (8001aa0 <HAL_RCC_OscConfig+0x624>)
 8001840:	6a1b      	ldr	r3, [r3, #32]
 8001842:	2202      	movs	r2, #2
 8001844:	4013      	ands	r3, r2
 8001846:	d0f0      	beq.n	800182a <HAL_RCC_OscConfig+0x3ae>
 8001848:	e013      	b.n	8001872 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800184a:	f7ff f98d 	bl	8000b68 <HAL_GetTick>
 800184e:	0003      	movs	r3, r0
 8001850:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001852:	e009      	b.n	8001868 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001854:	f7ff f988 	bl	8000b68 <HAL_GetTick>
 8001858:	0002      	movs	r2, r0
 800185a:	69bb      	ldr	r3, [r7, #24]
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	4a91      	ldr	r2, [pc, #580]	; (8001aa4 <HAL_RCC_OscConfig+0x628>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d901      	bls.n	8001868 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8001864:	2303      	movs	r3, #3
 8001866:	e116      	b.n	8001a96 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001868:	4b8d      	ldr	r3, [pc, #564]	; (8001aa0 <HAL_RCC_OscConfig+0x624>)
 800186a:	6a1b      	ldr	r3, [r3, #32]
 800186c:	2202      	movs	r2, #2
 800186e:	4013      	ands	r3, r2
 8001870:	d1f0      	bne.n	8001854 <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001872:	231f      	movs	r3, #31
 8001874:	18fb      	adds	r3, r7, r3
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	2b01      	cmp	r3, #1
 800187a:	d105      	bne.n	8001888 <HAL_RCC_OscConfig+0x40c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800187c:	4b88      	ldr	r3, [pc, #544]	; (8001aa0 <HAL_RCC_OscConfig+0x624>)
 800187e:	69da      	ldr	r2, [r3, #28]
 8001880:	4b87      	ldr	r3, [pc, #540]	; (8001aa0 <HAL_RCC_OscConfig+0x624>)
 8001882:	4989      	ldr	r1, [pc, #548]	; (8001aa8 <HAL_RCC_OscConfig+0x62c>)
 8001884:	400a      	ands	r2, r1
 8001886:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	2210      	movs	r2, #16
 800188e:	4013      	ands	r3, r2
 8001890:	d063      	beq.n	800195a <HAL_RCC_OscConfig+0x4de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	695b      	ldr	r3, [r3, #20]
 8001896:	2b01      	cmp	r3, #1
 8001898:	d12a      	bne.n	80018f0 <HAL_RCC_OscConfig+0x474>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800189a:	4b81      	ldr	r3, [pc, #516]	; (8001aa0 <HAL_RCC_OscConfig+0x624>)
 800189c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800189e:	4b80      	ldr	r3, [pc, #512]	; (8001aa0 <HAL_RCC_OscConfig+0x624>)
 80018a0:	2104      	movs	r1, #4
 80018a2:	430a      	orrs	r2, r1
 80018a4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80018a6:	4b7e      	ldr	r3, [pc, #504]	; (8001aa0 <HAL_RCC_OscConfig+0x624>)
 80018a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018aa:	4b7d      	ldr	r3, [pc, #500]	; (8001aa0 <HAL_RCC_OscConfig+0x624>)
 80018ac:	2101      	movs	r1, #1
 80018ae:	430a      	orrs	r2, r1
 80018b0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018b2:	f7ff f959 	bl	8000b68 <HAL_GetTick>
 80018b6:	0003      	movs	r3, r0
 80018b8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80018ba:	e008      	b.n	80018ce <HAL_RCC_OscConfig+0x452>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80018bc:	f7ff f954 	bl	8000b68 <HAL_GetTick>
 80018c0:	0002      	movs	r2, r0
 80018c2:	69bb      	ldr	r3, [r7, #24]
 80018c4:	1ad3      	subs	r3, r2, r3
 80018c6:	2b02      	cmp	r3, #2
 80018c8:	d901      	bls.n	80018ce <HAL_RCC_OscConfig+0x452>
        {
          return HAL_TIMEOUT;
 80018ca:	2303      	movs	r3, #3
 80018cc:	e0e3      	b.n	8001a96 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80018ce:	4b74      	ldr	r3, [pc, #464]	; (8001aa0 <HAL_RCC_OscConfig+0x624>)
 80018d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018d2:	2202      	movs	r2, #2
 80018d4:	4013      	ands	r3, r2
 80018d6:	d0f1      	beq.n	80018bc <HAL_RCC_OscConfig+0x440>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80018d8:	4b71      	ldr	r3, [pc, #452]	; (8001aa0 <HAL_RCC_OscConfig+0x624>)
 80018da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018dc:	22f8      	movs	r2, #248	; 0xf8
 80018de:	4393      	bics	r3, r2
 80018e0:	0019      	movs	r1, r3
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	699b      	ldr	r3, [r3, #24]
 80018e6:	00da      	lsls	r2, r3, #3
 80018e8:	4b6d      	ldr	r3, [pc, #436]	; (8001aa0 <HAL_RCC_OscConfig+0x624>)
 80018ea:	430a      	orrs	r2, r1
 80018ec:	635a      	str	r2, [r3, #52]	; 0x34
 80018ee:	e034      	b.n	800195a <HAL_RCC_OscConfig+0x4de>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	695b      	ldr	r3, [r3, #20]
 80018f4:	3305      	adds	r3, #5
 80018f6:	d111      	bne.n	800191c <HAL_RCC_OscConfig+0x4a0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80018f8:	4b69      	ldr	r3, [pc, #420]	; (8001aa0 <HAL_RCC_OscConfig+0x624>)
 80018fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018fc:	4b68      	ldr	r3, [pc, #416]	; (8001aa0 <HAL_RCC_OscConfig+0x624>)
 80018fe:	2104      	movs	r1, #4
 8001900:	438a      	bics	r2, r1
 8001902:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001904:	4b66      	ldr	r3, [pc, #408]	; (8001aa0 <HAL_RCC_OscConfig+0x624>)
 8001906:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001908:	22f8      	movs	r2, #248	; 0xf8
 800190a:	4393      	bics	r3, r2
 800190c:	0019      	movs	r1, r3
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	699b      	ldr	r3, [r3, #24]
 8001912:	00da      	lsls	r2, r3, #3
 8001914:	4b62      	ldr	r3, [pc, #392]	; (8001aa0 <HAL_RCC_OscConfig+0x624>)
 8001916:	430a      	orrs	r2, r1
 8001918:	635a      	str	r2, [r3, #52]	; 0x34
 800191a:	e01e      	b.n	800195a <HAL_RCC_OscConfig+0x4de>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800191c:	4b60      	ldr	r3, [pc, #384]	; (8001aa0 <HAL_RCC_OscConfig+0x624>)
 800191e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001920:	4b5f      	ldr	r3, [pc, #380]	; (8001aa0 <HAL_RCC_OscConfig+0x624>)
 8001922:	2104      	movs	r1, #4
 8001924:	430a      	orrs	r2, r1
 8001926:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001928:	4b5d      	ldr	r3, [pc, #372]	; (8001aa0 <HAL_RCC_OscConfig+0x624>)
 800192a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800192c:	4b5c      	ldr	r3, [pc, #368]	; (8001aa0 <HAL_RCC_OscConfig+0x624>)
 800192e:	2101      	movs	r1, #1
 8001930:	438a      	bics	r2, r1
 8001932:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001934:	f7ff f918 	bl	8000b68 <HAL_GetTick>
 8001938:	0003      	movs	r3, r0
 800193a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800193c:	e008      	b.n	8001950 <HAL_RCC_OscConfig+0x4d4>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800193e:	f7ff f913 	bl	8000b68 <HAL_GetTick>
 8001942:	0002      	movs	r2, r0
 8001944:	69bb      	ldr	r3, [r7, #24]
 8001946:	1ad3      	subs	r3, r2, r3
 8001948:	2b02      	cmp	r3, #2
 800194a:	d901      	bls.n	8001950 <HAL_RCC_OscConfig+0x4d4>
        {
          return HAL_TIMEOUT;
 800194c:	2303      	movs	r3, #3
 800194e:	e0a2      	b.n	8001a96 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001950:	4b53      	ldr	r3, [pc, #332]	; (8001aa0 <HAL_RCC_OscConfig+0x624>)
 8001952:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001954:	2202      	movs	r2, #2
 8001956:	4013      	ands	r3, r2
 8001958:	d1f1      	bne.n	800193e <HAL_RCC_OscConfig+0x4c2>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6a1b      	ldr	r3, [r3, #32]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d100      	bne.n	8001964 <HAL_RCC_OscConfig+0x4e8>
 8001962:	e097      	b.n	8001a94 <HAL_RCC_OscConfig+0x618>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001964:	4b4e      	ldr	r3, [pc, #312]	; (8001aa0 <HAL_RCC_OscConfig+0x624>)
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	220c      	movs	r2, #12
 800196a:	4013      	ands	r3, r2
 800196c:	2b08      	cmp	r3, #8
 800196e:	d100      	bne.n	8001972 <HAL_RCC_OscConfig+0x4f6>
 8001970:	e06b      	b.n	8001a4a <HAL_RCC_OscConfig+0x5ce>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6a1b      	ldr	r3, [r3, #32]
 8001976:	2b02      	cmp	r3, #2
 8001978:	d14c      	bne.n	8001a14 <HAL_RCC_OscConfig+0x598>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800197a:	4b49      	ldr	r3, [pc, #292]	; (8001aa0 <HAL_RCC_OscConfig+0x624>)
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	4b48      	ldr	r3, [pc, #288]	; (8001aa0 <HAL_RCC_OscConfig+0x624>)
 8001980:	494a      	ldr	r1, [pc, #296]	; (8001aac <HAL_RCC_OscConfig+0x630>)
 8001982:	400a      	ands	r2, r1
 8001984:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001986:	f7ff f8ef 	bl	8000b68 <HAL_GetTick>
 800198a:	0003      	movs	r3, r0
 800198c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800198e:	e008      	b.n	80019a2 <HAL_RCC_OscConfig+0x526>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001990:	f7ff f8ea 	bl	8000b68 <HAL_GetTick>
 8001994:	0002      	movs	r2, r0
 8001996:	69bb      	ldr	r3, [r7, #24]
 8001998:	1ad3      	subs	r3, r2, r3
 800199a:	2b02      	cmp	r3, #2
 800199c:	d901      	bls.n	80019a2 <HAL_RCC_OscConfig+0x526>
          {
            return HAL_TIMEOUT;
 800199e:	2303      	movs	r3, #3
 80019a0:	e079      	b.n	8001a96 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019a2:	4b3f      	ldr	r3, [pc, #252]	; (8001aa0 <HAL_RCC_OscConfig+0x624>)
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	2380      	movs	r3, #128	; 0x80
 80019a8:	049b      	lsls	r3, r3, #18
 80019aa:	4013      	ands	r3, r2
 80019ac:	d1f0      	bne.n	8001990 <HAL_RCC_OscConfig+0x514>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019ae:	4b3c      	ldr	r3, [pc, #240]	; (8001aa0 <HAL_RCC_OscConfig+0x624>)
 80019b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019b2:	220f      	movs	r2, #15
 80019b4:	4393      	bics	r3, r2
 80019b6:	0019      	movs	r1, r3
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019bc:	4b38      	ldr	r3, [pc, #224]	; (8001aa0 <HAL_RCC_OscConfig+0x624>)
 80019be:	430a      	orrs	r2, r1
 80019c0:	62da      	str	r2, [r3, #44]	; 0x2c
 80019c2:	4b37      	ldr	r3, [pc, #220]	; (8001aa0 <HAL_RCC_OscConfig+0x624>)
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	4a3a      	ldr	r2, [pc, #232]	; (8001ab0 <HAL_RCC_OscConfig+0x634>)
 80019c8:	4013      	ands	r3, r2
 80019ca:	0019      	movs	r1, r3
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019d4:	431a      	orrs	r2, r3
 80019d6:	4b32      	ldr	r3, [pc, #200]	; (8001aa0 <HAL_RCC_OscConfig+0x624>)
 80019d8:	430a      	orrs	r2, r1
 80019da:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019dc:	4b30      	ldr	r3, [pc, #192]	; (8001aa0 <HAL_RCC_OscConfig+0x624>)
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	4b2f      	ldr	r3, [pc, #188]	; (8001aa0 <HAL_RCC_OscConfig+0x624>)
 80019e2:	2180      	movs	r1, #128	; 0x80
 80019e4:	0449      	lsls	r1, r1, #17
 80019e6:	430a      	orrs	r2, r1
 80019e8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ea:	f7ff f8bd 	bl	8000b68 <HAL_GetTick>
 80019ee:	0003      	movs	r3, r0
 80019f0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019f2:	e008      	b.n	8001a06 <HAL_RCC_OscConfig+0x58a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019f4:	f7ff f8b8 	bl	8000b68 <HAL_GetTick>
 80019f8:	0002      	movs	r2, r0
 80019fa:	69bb      	ldr	r3, [r7, #24]
 80019fc:	1ad3      	subs	r3, r2, r3
 80019fe:	2b02      	cmp	r3, #2
 8001a00:	d901      	bls.n	8001a06 <HAL_RCC_OscConfig+0x58a>
          {
            return HAL_TIMEOUT;
 8001a02:	2303      	movs	r3, #3
 8001a04:	e047      	b.n	8001a96 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a06:	4b26      	ldr	r3, [pc, #152]	; (8001aa0 <HAL_RCC_OscConfig+0x624>)
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	2380      	movs	r3, #128	; 0x80
 8001a0c:	049b      	lsls	r3, r3, #18
 8001a0e:	4013      	ands	r3, r2
 8001a10:	d0f0      	beq.n	80019f4 <HAL_RCC_OscConfig+0x578>
 8001a12:	e03f      	b.n	8001a94 <HAL_RCC_OscConfig+0x618>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a14:	4b22      	ldr	r3, [pc, #136]	; (8001aa0 <HAL_RCC_OscConfig+0x624>)
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	4b21      	ldr	r3, [pc, #132]	; (8001aa0 <HAL_RCC_OscConfig+0x624>)
 8001a1a:	4924      	ldr	r1, [pc, #144]	; (8001aac <HAL_RCC_OscConfig+0x630>)
 8001a1c:	400a      	ands	r2, r1
 8001a1e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a20:	f7ff f8a2 	bl	8000b68 <HAL_GetTick>
 8001a24:	0003      	movs	r3, r0
 8001a26:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a28:	e008      	b.n	8001a3c <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a2a:	f7ff f89d 	bl	8000b68 <HAL_GetTick>
 8001a2e:	0002      	movs	r2, r0
 8001a30:	69bb      	ldr	r3, [r7, #24]
 8001a32:	1ad3      	subs	r3, r2, r3
 8001a34:	2b02      	cmp	r3, #2
 8001a36:	d901      	bls.n	8001a3c <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 8001a38:	2303      	movs	r3, #3
 8001a3a:	e02c      	b.n	8001a96 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a3c:	4b18      	ldr	r3, [pc, #96]	; (8001aa0 <HAL_RCC_OscConfig+0x624>)
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	2380      	movs	r3, #128	; 0x80
 8001a42:	049b      	lsls	r3, r3, #18
 8001a44:	4013      	ands	r3, r2
 8001a46:	d1f0      	bne.n	8001a2a <HAL_RCC_OscConfig+0x5ae>
 8001a48:	e024      	b.n	8001a94 <HAL_RCC_OscConfig+0x618>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6a1b      	ldr	r3, [r3, #32]
 8001a4e:	2b01      	cmp	r3, #1
 8001a50:	d101      	bne.n	8001a56 <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	e01f      	b.n	8001a96 <HAL_RCC_OscConfig+0x61a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001a56:	4b12      	ldr	r3, [pc, #72]	; (8001aa0 <HAL_RCC_OscConfig+0x624>)
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001a5c:	4b10      	ldr	r3, [pc, #64]	; (8001aa0 <HAL_RCC_OscConfig+0x624>)
 8001a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a60:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a62:	697a      	ldr	r2, [r7, #20]
 8001a64:	2380      	movs	r3, #128	; 0x80
 8001a66:	025b      	lsls	r3, r3, #9
 8001a68:	401a      	ands	r2, r3
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a6e:	429a      	cmp	r2, r3
 8001a70:	d10e      	bne.n	8001a90 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	220f      	movs	r2, #15
 8001a76:	401a      	ands	r2, r3
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	d107      	bne.n	8001a90 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001a80:	697a      	ldr	r2, [r7, #20]
 8001a82:	23f0      	movs	r3, #240	; 0xf0
 8001a84:	039b      	lsls	r3, r3, #14
 8001a86:	401a      	ands	r2, r3
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	d001      	beq.n	8001a94 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_ERROR;
 8001a90:	2301      	movs	r3, #1
 8001a92:	e000      	b.n	8001a96 <HAL_RCC_OscConfig+0x61a>
        }
      }
    }
  }

  return HAL_OK;
 8001a94:	2300      	movs	r3, #0
}
 8001a96:	0018      	movs	r0, r3
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	b008      	add	sp, #32
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	46c0      	nop			; (mov r8, r8)
 8001aa0:	40021000 	.word	0x40021000
 8001aa4:	00001388 	.word	0x00001388
 8001aa8:	efffffff 	.word	0xefffffff
 8001aac:	feffffff 	.word	0xfeffffff
 8001ab0:	ffc2ffff 	.word	0xffc2ffff

08001ab4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b084      	sub	sp, #16
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
 8001abc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d101      	bne.n	8001ac8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	e0b3      	b.n	8001c30 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ac8:	4b5b      	ldr	r3, [pc, #364]	; (8001c38 <HAL_RCC_ClockConfig+0x184>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	2201      	movs	r2, #1
 8001ace:	4013      	ands	r3, r2
 8001ad0:	683a      	ldr	r2, [r7, #0]
 8001ad2:	429a      	cmp	r2, r3
 8001ad4:	d911      	bls.n	8001afa <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ad6:	4b58      	ldr	r3, [pc, #352]	; (8001c38 <HAL_RCC_ClockConfig+0x184>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	2201      	movs	r2, #1
 8001adc:	4393      	bics	r3, r2
 8001ade:	0019      	movs	r1, r3
 8001ae0:	4b55      	ldr	r3, [pc, #340]	; (8001c38 <HAL_RCC_ClockConfig+0x184>)
 8001ae2:	683a      	ldr	r2, [r7, #0]
 8001ae4:	430a      	orrs	r2, r1
 8001ae6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ae8:	4b53      	ldr	r3, [pc, #332]	; (8001c38 <HAL_RCC_ClockConfig+0x184>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	2201      	movs	r2, #1
 8001aee:	4013      	ands	r3, r2
 8001af0:	683a      	ldr	r2, [r7, #0]
 8001af2:	429a      	cmp	r2, r3
 8001af4:	d001      	beq.n	8001afa <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001af6:	2301      	movs	r3, #1
 8001af8:	e09a      	b.n	8001c30 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	2202      	movs	r2, #2
 8001b00:	4013      	ands	r3, r2
 8001b02:	d015      	beq.n	8001b30 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	2204      	movs	r2, #4
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	d006      	beq.n	8001b1c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001b0e:	4b4b      	ldr	r3, [pc, #300]	; (8001c3c <HAL_RCC_ClockConfig+0x188>)
 8001b10:	685a      	ldr	r2, [r3, #4]
 8001b12:	4b4a      	ldr	r3, [pc, #296]	; (8001c3c <HAL_RCC_ClockConfig+0x188>)
 8001b14:	21e0      	movs	r1, #224	; 0xe0
 8001b16:	00c9      	lsls	r1, r1, #3
 8001b18:	430a      	orrs	r2, r1
 8001b1a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b1c:	4b47      	ldr	r3, [pc, #284]	; (8001c3c <HAL_RCC_ClockConfig+0x188>)
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	22f0      	movs	r2, #240	; 0xf0
 8001b22:	4393      	bics	r3, r2
 8001b24:	0019      	movs	r1, r3
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	689a      	ldr	r2, [r3, #8]
 8001b2a:	4b44      	ldr	r3, [pc, #272]	; (8001c3c <HAL_RCC_ClockConfig+0x188>)
 8001b2c:	430a      	orrs	r2, r1
 8001b2e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	2201      	movs	r2, #1
 8001b36:	4013      	ands	r3, r2
 8001b38:	d040      	beq.n	8001bbc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	2b01      	cmp	r3, #1
 8001b40:	d107      	bne.n	8001b52 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b42:	4b3e      	ldr	r3, [pc, #248]	; (8001c3c <HAL_RCC_ClockConfig+0x188>)
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	2380      	movs	r3, #128	; 0x80
 8001b48:	029b      	lsls	r3, r3, #10
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	d114      	bne.n	8001b78 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e06e      	b.n	8001c30 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	2b02      	cmp	r3, #2
 8001b58:	d107      	bne.n	8001b6a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b5a:	4b38      	ldr	r3, [pc, #224]	; (8001c3c <HAL_RCC_ClockConfig+0x188>)
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	2380      	movs	r3, #128	; 0x80
 8001b60:	049b      	lsls	r3, r3, #18
 8001b62:	4013      	ands	r3, r2
 8001b64:	d108      	bne.n	8001b78 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e062      	b.n	8001c30 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b6a:	4b34      	ldr	r3, [pc, #208]	; (8001c3c <HAL_RCC_ClockConfig+0x188>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	2202      	movs	r2, #2
 8001b70:	4013      	ands	r3, r2
 8001b72:	d101      	bne.n	8001b78 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001b74:	2301      	movs	r3, #1
 8001b76:	e05b      	b.n	8001c30 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b78:	4b30      	ldr	r3, [pc, #192]	; (8001c3c <HAL_RCC_ClockConfig+0x188>)
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	2203      	movs	r2, #3
 8001b7e:	4393      	bics	r3, r2
 8001b80:	0019      	movs	r1, r3
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	685a      	ldr	r2, [r3, #4]
 8001b86:	4b2d      	ldr	r3, [pc, #180]	; (8001c3c <HAL_RCC_ClockConfig+0x188>)
 8001b88:	430a      	orrs	r2, r1
 8001b8a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b8c:	f7fe ffec 	bl	8000b68 <HAL_GetTick>
 8001b90:	0003      	movs	r3, r0
 8001b92:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b94:	e009      	b.n	8001baa <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b96:	f7fe ffe7 	bl	8000b68 <HAL_GetTick>
 8001b9a:	0002      	movs	r2, r0
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	1ad3      	subs	r3, r2, r3
 8001ba0:	4a27      	ldr	r2, [pc, #156]	; (8001c40 <HAL_RCC_ClockConfig+0x18c>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d901      	bls.n	8001baa <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	e042      	b.n	8001c30 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001baa:	4b24      	ldr	r3, [pc, #144]	; (8001c3c <HAL_RCC_ClockConfig+0x188>)
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	220c      	movs	r2, #12
 8001bb0:	401a      	ands	r2, r3
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	009b      	lsls	r3, r3, #2
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	d1ec      	bne.n	8001b96 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001bbc:	4b1e      	ldr	r3, [pc, #120]	; (8001c38 <HAL_RCC_ClockConfig+0x184>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	683a      	ldr	r2, [r7, #0]
 8001bc6:	429a      	cmp	r2, r3
 8001bc8:	d211      	bcs.n	8001bee <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bca:	4b1b      	ldr	r3, [pc, #108]	; (8001c38 <HAL_RCC_ClockConfig+0x184>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	2201      	movs	r2, #1
 8001bd0:	4393      	bics	r3, r2
 8001bd2:	0019      	movs	r1, r3
 8001bd4:	4b18      	ldr	r3, [pc, #96]	; (8001c38 <HAL_RCC_ClockConfig+0x184>)
 8001bd6:	683a      	ldr	r2, [r7, #0]
 8001bd8:	430a      	orrs	r2, r1
 8001bda:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bdc:	4b16      	ldr	r3, [pc, #88]	; (8001c38 <HAL_RCC_ClockConfig+0x184>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	2201      	movs	r2, #1
 8001be2:	4013      	ands	r3, r2
 8001be4:	683a      	ldr	r2, [r7, #0]
 8001be6:	429a      	cmp	r2, r3
 8001be8:	d001      	beq.n	8001bee <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	e020      	b.n	8001c30 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	2204      	movs	r2, #4
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	d009      	beq.n	8001c0c <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001bf8:	4b10      	ldr	r3, [pc, #64]	; (8001c3c <HAL_RCC_ClockConfig+0x188>)
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	4a11      	ldr	r2, [pc, #68]	; (8001c44 <HAL_RCC_ClockConfig+0x190>)
 8001bfe:	4013      	ands	r3, r2
 8001c00:	0019      	movs	r1, r3
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	68da      	ldr	r2, [r3, #12]
 8001c06:	4b0d      	ldr	r3, [pc, #52]	; (8001c3c <HAL_RCC_ClockConfig+0x188>)
 8001c08:	430a      	orrs	r2, r1
 8001c0a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001c0c:	f000 f820 	bl	8001c50 <HAL_RCC_GetSysClockFreq>
 8001c10:	0001      	movs	r1, r0
 8001c12:	4b0a      	ldr	r3, [pc, #40]	; (8001c3c <HAL_RCC_ClockConfig+0x188>)
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	091b      	lsrs	r3, r3, #4
 8001c18:	220f      	movs	r2, #15
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	4a0a      	ldr	r2, [pc, #40]	; (8001c48 <HAL_RCC_ClockConfig+0x194>)
 8001c1e:	5cd3      	ldrb	r3, [r2, r3]
 8001c20:	000a      	movs	r2, r1
 8001c22:	40da      	lsrs	r2, r3
 8001c24:	4b09      	ldr	r3, [pc, #36]	; (8001c4c <HAL_RCC_ClockConfig+0x198>)
 8001c26:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001c28:	2000      	movs	r0, #0
 8001c2a:	f7fe ff57 	bl	8000adc <HAL_InitTick>
  
  return HAL_OK;
 8001c2e:	2300      	movs	r3, #0
}
 8001c30:	0018      	movs	r0, r3
 8001c32:	46bd      	mov	sp, r7
 8001c34:	b004      	add	sp, #16
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	40022000 	.word	0x40022000
 8001c3c:	40021000 	.word	0x40021000
 8001c40:	00001388 	.word	0x00001388
 8001c44:	fffff8ff 	.word	0xfffff8ff
 8001c48:	080030d4 	.word	0x080030d4
 8001c4c:	20000004 	.word	0x20000004

08001c50 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c50:	b590      	push	{r4, r7, lr}
 8001c52:	b08f      	sub	sp, #60	; 0x3c
 8001c54:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001c56:	2314      	movs	r3, #20
 8001c58:	18fb      	adds	r3, r7, r3
 8001c5a:	4a2b      	ldr	r2, [pc, #172]	; (8001d08 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c5c:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001c5e:	c313      	stmia	r3!, {r0, r1, r4}
 8001c60:	6812      	ldr	r2, [r2, #0]
 8001c62:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001c64:	1d3b      	adds	r3, r7, #4
 8001c66:	4a29      	ldr	r2, [pc, #164]	; (8001d0c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001c68:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001c6a:	c313      	stmia	r3!, {r0, r1, r4}
 8001c6c:	6812      	ldr	r2, [r2, #0]
 8001c6e:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001c70:	2300      	movs	r3, #0
 8001c72:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c74:	2300      	movs	r3, #0
 8001c76:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c78:	2300      	movs	r3, #0
 8001c7a:	637b      	str	r3, [r7, #52]	; 0x34
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001c80:	2300      	movs	r3, #0
 8001c82:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001c84:	4b22      	ldr	r3, [pc, #136]	; (8001d10 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c8c:	220c      	movs	r2, #12
 8001c8e:	4013      	ands	r3, r2
 8001c90:	2b04      	cmp	r3, #4
 8001c92:	d002      	beq.n	8001c9a <HAL_RCC_GetSysClockFreq+0x4a>
 8001c94:	2b08      	cmp	r3, #8
 8001c96:	d003      	beq.n	8001ca0 <HAL_RCC_GetSysClockFreq+0x50>
 8001c98:	e02d      	b.n	8001cf6 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001c9a:	4b1e      	ldr	r3, [pc, #120]	; (8001d14 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001c9c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001c9e:	e02d      	b.n	8001cfc <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ca2:	0c9b      	lsrs	r3, r3, #18
 8001ca4:	220f      	movs	r2, #15
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	2214      	movs	r2, #20
 8001caa:	18ba      	adds	r2, r7, r2
 8001cac:	5cd3      	ldrb	r3, [r2, r3]
 8001cae:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001cb0:	4b17      	ldr	r3, [pc, #92]	; (8001d10 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cb4:	220f      	movs	r2, #15
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	1d3a      	adds	r2, r7, #4
 8001cba:	5cd3      	ldrb	r3, [r2, r3]
 8001cbc:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001cbe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001cc0:	2380      	movs	r3, #128	; 0x80
 8001cc2:	025b      	lsls	r3, r3, #9
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	d009      	beq.n	8001cdc <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001cc8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001cca:	4812      	ldr	r0, [pc, #72]	; (8001d14 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001ccc:	f7fe fa1c 	bl	8000108 <__udivsi3>
 8001cd0:	0003      	movs	r3, r0
 8001cd2:	001a      	movs	r2, r3
 8001cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd6:	4353      	muls	r3, r2
 8001cd8:	637b      	str	r3, [r7, #52]	; 0x34
 8001cda:	e009      	b.n	8001cf0 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001cdc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001cde:	000a      	movs	r2, r1
 8001ce0:	0152      	lsls	r2, r2, #5
 8001ce2:	1a52      	subs	r2, r2, r1
 8001ce4:	0193      	lsls	r3, r2, #6
 8001ce6:	1a9b      	subs	r3, r3, r2
 8001ce8:	00db      	lsls	r3, r3, #3
 8001cea:	185b      	adds	r3, r3, r1
 8001cec:	021b      	lsls	r3, r3, #8
 8001cee:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8001cf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cf2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001cf4:	e002      	b.n	8001cfc <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001cf6:	4b07      	ldr	r3, [pc, #28]	; (8001d14 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001cf8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001cfa:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001cfe:	0018      	movs	r0, r3
 8001d00:	46bd      	mov	sp, r7
 8001d02:	b00f      	add	sp, #60	; 0x3c
 8001d04:	bd90      	pop	{r4, r7, pc}
 8001d06:	46c0      	nop			; (mov r8, r8)
 8001d08:	080030b4 	.word	0x080030b4
 8001d0c:	080030c4 	.word	0x080030c4
 8001d10:	40021000 	.word	0x40021000
 8001d14:	007a1200 	.word	0x007a1200

08001d18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d1c:	4b02      	ldr	r3, [pc, #8]	; (8001d28 <HAL_RCC_GetHCLKFreq+0x10>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
}
 8001d20:	0018      	movs	r0, r3
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	46c0      	nop			; (mov r8, r8)
 8001d28:	20000004 	.word	0x20000004

08001d2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001d30:	f7ff fff2 	bl	8001d18 <HAL_RCC_GetHCLKFreq>
 8001d34:	0001      	movs	r1, r0
 8001d36:	4b06      	ldr	r3, [pc, #24]	; (8001d50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	0a1b      	lsrs	r3, r3, #8
 8001d3c:	2207      	movs	r2, #7
 8001d3e:	4013      	ands	r3, r2
 8001d40:	4a04      	ldr	r2, [pc, #16]	; (8001d54 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001d42:	5cd3      	ldrb	r3, [r2, r3]
 8001d44:	40d9      	lsrs	r1, r3
 8001d46:	000b      	movs	r3, r1
}    
 8001d48:	0018      	movs	r0, r3
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	46c0      	nop			; (mov r8, r8)
 8001d50:	40021000 	.word	0x40021000
 8001d54:	080030e4 	.word	0x080030e4

08001d58 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b086      	sub	sp, #24
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001d60:	2300      	movs	r3, #0
 8001d62:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001d64:	2300      	movs	r3, #0
 8001d66:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	2380      	movs	r3, #128	; 0x80
 8001d6e:	025b      	lsls	r3, r3, #9
 8001d70:	4013      	ands	r3, r2
 8001d72:	d100      	bne.n	8001d76 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001d74:	e08f      	b.n	8001e96 <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001d76:	2317      	movs	r3, #23
 8001d78:	18fb      	adds	r3, r7, r3
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d7e:	4b57      	ldr	r3, [pc, #348]	; (8001edc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001d80:	69da      	ldr	r2, [r3, #28]
 8001d82:	2380      	movs	r3, #128	; 0x80
 8001d84:	055b      	lsls	r3, r3, #21
 8001d86:	4013      	ands	r3, r2
 8001d88:	d111      	bne.n	8001dae <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001d8a:	4b54      	ldr	r3, [pc, #336]	; (8001edc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001d8c:	69da      	ldr	r2, [r3, #28]
 8001d8e:	4b53      	ldr	r3, [pc, #332]	; (8001edc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001d90:	2180      	movs	r1, #128	; 0x80
 8001d92:	0549      	lsls	r1, r1, #21
 8001d94:	430a      	orrs	r2, r1
 8001d96:	61da      	str	r2, [r3, #28]
 8001d98:	4b50      	ldr	r3, [pc, #320]	; (8001edc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001d9a:	69da      	ldr	r2, [r3, #28]
 8001d9c:	2380      	movs	r3, #128	; 0x80
 8001d9e:	055b      	lsls	r3, r3, #21
 8001da0:	4013      	ands	r3, r2
 8001da2:	60bb      	str	r3, [r7, #8]
 8001da4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001da6:	2317      	movs	r3, #23
 8001da8:	18fb      	adds	r3, r7, r3
 8001daa:	2201      	movs	r2, #1
 8001dac:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dae:	4b4c      	ldr	r3, [pc, #304]	; (8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001db0:	681a      	ldr	r2, [r3, #0]
 8001db2:	2380      	movs	r3, #128	; 0x80
 8001db4:	005b      	lsls	r3, r3, #1
 8001db6:	4013      	ands	r3, r2
 8001db8:	d11a      	bne.n	8001df0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001dba:	4b49      	ldr	r3, [pc, #292]	; (8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	4b48      	ldr	r3, [pc, #288]	; (8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001dc0:	2180      	movs	r1, #128	; 0x80
 8001dc2:	0049      	lsls	r1, r1, #1
 8001dc4:	430a      	orrs	r2, r1
 8001dc6:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dc8:	f7fe fece 	bl	8000b68 <HAL_GetTick>
 8001dcc:	0003      	movs	r3, r0
 8001dce:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dd0:	e008      	b.n	8001de4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dd2:	f7fe fec9 	bl	8000b68 <HAL_GetTick>
 8001dd6:	0002      	movs	r2, r0
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	1ad3      	subs	r3, r2, r3
 8001ddc:	2b64      	cmp	r3, #100	; 0x64
 8001dde:	d901      	bls.n	8001de4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 8001de0:	2303      	movs	r3, #3
 8001de2:	e077      	b.n	8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001de4:	4b3e      	ldr	r3, [pc, #248]	; (8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001de6:	681a      	ldr	r2, [r3, #0]
 8001de8:	2380      	movs	r3, #128	; 0x80
 8001dea:	005b      	lsls	r3, r3, #1
 8001dec:	4013      	ands	r3, r2
 8001dee:	d0f0      	beq.n	8001dd2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001df0:	4b3a      	ldr	r3, [pc, #232]	; (8001edc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001df2:	6a1a      	ldr	r2, [r3, #32]
 8001df4:	23c0      	movs	r3, #192	; 0xc0
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	4013      	ands	r3, r2
 8001dfa:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d034      	beq.n	8001e6c <HAL_RCCEx_PeriphCLKConfig+0x114>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	685a      	ldr	r2, [r3, #4]
 8001e06:	23c0      	movs	r3, #192	; 0xc0
 8001e08:	009b      	lsls	r3, r3, #2
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	68fa      	ldr	r2, [r7, #12]
 8001e0e:	429a      	cmp	r2, r3
 8001e10:	d02c      	beq.n	8001e6c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001e12:	4b32      	ldr	r3, [pc, #200]	; (8001edc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e14:	6a1b      	ldr	r3, [r3, #32]
 8001e16:	4a33      	ldr	r2, [pc, #204]	; (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8001e18:	4013      	ands	r3, r2
 8001e1a:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001e1c:	4b2f      	ldr	r3, [pc, #188]	; (8001edc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e1e:	6a1a      	ldr	r2, [r3, #32]
 8001e20:	4b2e      	ldr	r3, [pc, #184]	; (8001edc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e22:	2180      	movs	r1, #128	; 0x80
 8001e24:	0249      	lsls	r1, r1, #9
 8001e26:	430a      	orrs	r2, r1
 8001e28:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001e2a:	4b2c      	ldr	r3, [pc, #176]	; (8001edc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e2c:	6a1a      	ldr	r2, [r3, #32]
 8001e2e:	4b2b      	ldr	r3, [pc, #172]	; (8001edc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e30:	492d      	ldr	r1, [pc, #180]	; (8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8001e32:	400a      	ands	r2, r1
 8001e34:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001e36:	4b29      	ldr	r3, [pc, #164]	; (8001edc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e38:	68fa      	ldr	r2, [r7, #12]
 8001e3a:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	2201      	movs	r2, #1
 8001e40:	4013      	ands	r3, r2
 8001e42:	d013      	beq.n	8001e6c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e44:	f7fe fe90 	bl	8000b68 <HAL_GetTick>
 8001e48:	0003      	movs	r3, r0
 8001e4a:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e4c:	e009      	b.n	8001e62 <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e4e:	f7fe fe8b 	bl	8000b68 <HAL_GetTick>
 8001e52:	0002      	movs	r2, r0
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	1ad3      	subs	r3, r2, r3
 8001e58:	4a24      	ldr	r2, [pc, #144]	; (8001eec <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d901      	bls.n	8001e62 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8001e5e:	2303      	movs	r3, #3
 8001e60:	e038      	b.n	8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e62:	4b1e      	ldr	r3, [pc, #120]	; (8001edc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e64:	6a1b      	ldr	r3, [r3, #32]
 8001e66:	2202      	movs	r2, #2
 8001e68:	4013      	ands	r3, r2
 8001e6a:	d0f0      	beq.n	8001e4e <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e6c:	4b1b      	ldr	r3, [pc, #108]	; (8001edc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e6e:	6a1b      	ldr	r3, [r3, #32]
 8001e70:	4a1c      	ldr	r2, [pc, #112]	; (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8001e72:	4013      	ands	r3, r2
 8001e74:	0019      	movs	r1, r3
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	685a      	ldr	r2, [r3, #4]
 8001e7a:	4b18      	ldr	r3, [pc, #96]	; (8001edc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e7c:	430a      	orrs	r2, r1
 8001e7e:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001e80:	2317      	movs	r3, #23
 8001e82:	18fb      	adds	r3, r7, r3
 8001e84:	781b      	ldrb	r3, [r3, #0]
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d105      	bne.n	8001e96 <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e8a:	4b14      	ldr	r3, [pc, #80]	; (8001edc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e8c:	69da      	ldr	r2, [r3, #28]
 8001e8e:	4b13      	ldr	r3, [pc, #76]	; (8001edc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e90:	4917      	ldr	r1, [pc, #92]	; (8001ef0 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8001e92:	400a      	ands	r2, r1
 8001e94:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	d009      	beq.n	8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001ea0:	4b0e      	ldr	r3, [pc, #56]	; (8001edc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea4:	2203      	movs	r2, #3
 8001ea6:	4393      	bics	r3, r2
 8001ea8:	0019      	movs	r1, r3
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	689a      	ldr	r2, [r3, #8]
 8001eae:	4b0b      	ldr	r3, [pc, #44]	; (8001edc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001eb0:	430a      	orrs	r2, r1
 8001eb2:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	2220      	movs	r2, #32
 8001eba:	4013      	ands	r3, r2
 8001ebc:	d009      	beq.n	8001ed2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001ebe:	4b07      	ldr	r3, [pc, #28]	; (8001edc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec2:	2210      	movs	r2, #16
 8001ec4:	4393      	bics	r3, r2
 8001ec6:	0019      	movs	r1, r3
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	68da      	ldr	r2, [r3, #12]
 8001ecc:	4b03      	ldr	r3, [pc, #12]	; (8001edc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001ece:	430a      	orrs	r2, r1
 8001ed0:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001ed2:	2300      	movs	r3, #0
}
 8001ed4:	0018      	movs	r0, r3
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	b006      	add	sp, #24
 8001eda:	bd80      	pop	{r7, pc}
 8001edc:	40021000 	.word	0x40021000
 8001ee0:	40007000 	.word	0x40007000
 8001ee4:	fffffcff 	.word	0xfffffcff
 8001ee8:	fffeffff 	.word	0xfffeffff
 8001eec:	00001388 	.word	0x00001388
 8001ef0:	efffffff 	.word	0xefffffff

08001ef4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b082      	sub	sp, #8
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d101      	bne.n	8001f06 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e042      	b.n	8001f8c <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	223d      	movs	r2, #61	; 0x3d
 8001f0a:	5c9b      	ldrb	r3, [r3, r2]
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d107      	bne.n	8001f22 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	223c      	movs	r2, #60	; 0x3c
 8001f16:	2100      	movs	r1, #0
 8001f18:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	0018      	movs	r0, r3
 8001f1e:	f7fe fcd5 	bl	80008cc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	223d      	movs	r2, #61	; 0x3d
 8001f26:	2102      	movs	r1, #2
 8001f28:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	3304      	adds	r3, #4
 8001f32:	0019      	movs	r1, r3
 8001f34:	0010      	movs	r0, r2
 8001f36:	f000 f983 	bl	8002240 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2246      	movs	r2, #70	; 0x46
 8001f3e:	2101      	movs	r1, #1
 8001f40:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	223e      	movs	r2, #62	; 0x3e
 8001f46:	2101      	movs	r1, #1
 8001f48:	5499      	strb	r1, [r3, r2]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	223f      	movs	r2, #63	; 0x3f
 8001f4e:	2101      	movs	r1, #1
 8001f50:	5499      	strb	r1, [r3, r2]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2240      	movs	r2, #64	; 0x40
 8001f56:	2101      	movs	r1, #1
 8001f58:	5499      	strb	r1, [r3, r2]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2241      	movs	r2, #65	; 0x41
 8001f5e:	2101      	movs	r1, #1
 8001f60:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2242      	movs	r2, #66	; 0x42
 8001f66:	2101      	movs	r1, #1
 8001f68:	5499      	strb	r1, [r3, r2]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2243      	movs	r2, #67	; 0x43
 8001f6e:	2101      	movs	r1, #1
 8001f70:	5499      	strb	r1, [r3, r2]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2244      	movs	r2, #68	; 0x44
 8001f76:	2101      	movs	r1, #1
 8001f78:	5499      	strb	r1, [r3, r2]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2245      	movs	r2, #69	; 0x45
 8001f7e:	2101      	movs	r1, #1
 8001f80:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	223d      	movs	r2, #61	; 0x3d
 8001f86:	2101      	movs	r1, #1
 8001f88:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001f8a:	2300      	movs	r3, #0
}
 8001f8c:	0018      	movs	r0, r3
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	b002      	add	sp, #8
 8001f92:	bd80      	pop	{r7, pc}

08001f94 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b084      	sub	sp, #16
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
 8001f9c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d108      	bne.n	8001fb6 <HAL_TIM_PWM_Start+0x22>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	223e      	movs	r2, #62	; 0x3e
 8001fa8:	5c9b      	ldrb	r3, [r3, r2]
 8001faa:	b2db      	uxtb	r3, r3
 8001fac:	3b01      	subs	r3, #1
 8001fae:	1e5a      	subs	r2, r3, #1
 8001fb0:	4193      	sbcs	r3, r2
 8001fb2:	b2db      	uxtb	r3, r3
 8001fb4:	e01f      	b.n	8001ff6 <HAL_TIM_PWM_Start+0x62>
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	2b04      	cmp	r3, #4
 8001fba:	d108      	bne.n	8001fce <HAL_TIM_PWM_Start+0x3a>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	223f      	movs	r2, #63	; 0x3f
 8001fc0:	5c9b      	ldrb	r3, [r3, r2]
 8001fc2:	b2db      	uxtb	r3, r3
 8001fc4:	3b01      	subs	r3, #1
 8001fc6:	1e5a      	subs	r2, r3, #1
 8001fc8:	4193      	sbcs	r3, r2
 8001fca:	b2db      	uxtb	r3, r3
 8001fcc:	e013      	b.n	8001ff6 <HAL_TIM_PWM_Start+0x62>
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	2b08      	cmp	r3, #8
 8001fd2:	d108      	bne.n	8001fe6 <HAL_TIM_PWM_Start+0x52>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2240      	movs	r2, #64	; 0x40
 8001fd8:	5c9b      	ldrb	r3, [r3, r2]
 8001fda:	b2db      	uxtb	r3, r3
 8001fdc:	3b01      	subs	r3, #1
 8001fde:	1e5a      	subs	r2, r3, #1
 8001fe0:	4193      	sbcs	r3, r2
 8001fe2:	b2db      	uxtb	r3, r3
 8001fe4:	e007      	b.n	8001ff6 <HAL_TIM_PWM_Start+0x62>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2241      	movs	r2, #65	; 0x41
 8001fea:	5c9b      	ldrb	r3, [r3, r2]
 8001fec:	b2db      	uxtb	r3, r3
 8001fee:	3b01      	subs	r3, #1
 8001ff0:	1e5a      	subs	r2, r3, #1
 8001ff2:	4193      	sbcs	r3, r2
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d001      	beq.n	8001ffe <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e064      	b.n	80020c8 <HAL_TIM_PWM_Start+0x134>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d104      	bne.n	800200e <HAL_TIM_PWM_Start+0x7a>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	223e      	movs	r2, #62	; 0x3e
 8002008:	2102      	movs	r1, #2
 800200a:	5499      	strb	r1, [r3, r2]
 800200c:	e013      	b.n	8002036 <HAL_TIM_PWM_Start+0xa2>
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	2b04      	cmp	r3, #4
 8002012:	d104      	bne.n	800201e <HAL_TIM_PWM_Start+0x8a>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	223f      	movs	r2, #63	; 0x3f
 8002018:	2102      	movs	r1, #2
 800201a:	5499      	strb	r1, [r3, r2]
 800201c:	e00b      	b.n	8002036 <HAL_TIM_PWM_Start+0xa2>
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	2b08      	cmp	r3, #8
 8002022:	d104      	bne.n	800202e <HAL_TIM_PWM_Start+0x9a>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2240      	movs	r2, #64	; 0x40
 8002028:	2102      	movs	r1, #2
 800202a:	5499      	strb	r1, [r3, r2]
 800202c:	e003      	b.n	8002036 <HAL_TIM_PWM_Start+0xa2>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2241      	movs	r2, #65	; 0x41
 8002032:	2102      	movs	r1, #2
 8002034:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	6839      	ldr	r1, [r7, #0]
 800203c:	2201      	movs	r2, #1
 800203e:	0018      	movs	r0, r3
 8002040:	f000 fb4a 	bl	80026d8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a21      	ldr	r2, [pc, #132]	; (80020d0 <HAL_TIM_PWM_Start+0x13c>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d009      	beq.n	8002062 <HAL_TIM_PWM_Start+0xce>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a20      	ldr	r2, [pc, #128]	; (80020d4 <HAL_TIM_PWM_Start+0x140>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d004      	beq.n	8002062 <HAL_TIM_PWM_Start+0xce>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a1e      	ldr	r2, [pc, #120]	; (80020d8 <HAL_TIM_PWM_Start+0x144>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d101      	bne.n	8002066 <HAL_TIM_PWM_Start+0xd2>
 8002062:	2301      	movs	r3, #1
 8002064:	e000      	b.n	8002068 <HAL_TIM_PWM_Start+0xd4>
 8002066:	2300      	movs	r3, #0
 8002068:	2b00      	cmp	r3, #0
 800206a:	d008      	beq.n	800207e <HAL_TIM_PWM_Start+0xea>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	2180      	movs	r1, #128	; 0x80
 8002078:	0209      	lsls	r1, r1, #8
 800207a:	430a      	orrs	r2, r1
 800207c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a13      	ldr	r2, [pc, #76]	; (80020d0 <HAL_TIM_PWM_Start+0x13c>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d004      	beq.n	8002092 <HAL_TIM_PWM_Start+0xfe>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a13      	ldr	r2, [pc, #76]	; (80020dc <HAL_TIM_PWM_Start+0x148>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d111      	bne.n	80020b6 <HAL_TIM_PWM_Start+0x122>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	2207      	movs	r2, #7
 800209a:	4013      	ands	r3, r2
 800209c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	2b06      	cmp	r3, #6
 80020a2:	d010      	beq.n	80020c6 <HAL_TIM_PWM_Start+0x132>
    {
      __HAL_TIM_ENABLE(htim);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	681a      	ldr	r2, [r3, #0]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	2101      	movs	r1, #1
 80020b0:	430a      	orrs	r2, r1
 80020b2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020b4:	e007      	b.n	80020c6 <HAL_TIM_PWM_Start+0x132>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	2101      	movs	r1, #1
 80020c2:	430a      	orrs	r2, r1
 80020c4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80020c6:	2300      	movs	r3, #0
}
 80020c8:	0018      	movs	r0, r3
 80020ca:	46bd      	mov	sp, r7
 80020cc:	b004      	add	sp, #16
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	40012c00 	.word	0x40012c00
 80020d4:	40014400 	.word	0x40014400
 80020d8:	40014800 	.word	0x40014800
 80020dc:	40000400 	.word	0x40000400

080020e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b084      	sub	sp, #16
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	60f8      	str	r0, [r7, #12]
 80020e8:	60b9      	str	r1, [r7, #8]
 80020ea:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	223c      	movs	r2, #60	; 0x3c
 80020f0:	5c9b      	ldrb	r3, [r3, r2]
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	d101      	bne.n	80020fa <HAL_TIM_PWM_ConfigChannel+0x1a>
 80020f6:	2302      	movs	r3, #2
 80020f8:	e09c      	b.n	8002234 <HAL_TIM_PWM_ConfigChannel+0x154>
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	223c      	movs	r2, #60	; 0x3c
 80020fe:	2101      	movs	r1, #1
 8002100:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2b04      	cmp	r3, #4
 8002106:	d029      	beq.n	800215c <HAL_TIM_PWM_ConfigChannel+0x7c>
 8002108:	d802      	bhi.n	8002110 <HAL_TIM_PWM_ConfigChannel+0x30>
 800210a:	2b00      	cmp	r3, #0
 800210c:	d005      	beq.n	800211a <HAL_TIM_PWM_ConfigChannel+0x3a>
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
      break;
    }

    default:
      break;
 800210e:	e08c      	b.n	800222a <HAL_TIM_PWM_ConfigChannel+0x14a>
  switch (Channel)
 8002110:	2b08      	cmp	r3, #8
 8002112:	d046      	beq.n	80021a2 <HAL_TIM_PWM_ConfigChannel+0xc2>
 8002114:	2b0c      	cmp	r3, #12
 8002116:	d065      	beq.n	80021e4 <HAL_TIM_PWM_ConfigChannel+0x104>
      break;
 8002118:	e087      	b.n	800222a <HAL_TIM_PWM_ConfigChannel+0x14a>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	68ba      	ldr	r2, [r7, #8]
 8002120:	0011      	movs	r1, r2
 8002122:	0018      	movs	r0, r3
 8002124:	f000 f8f8 	bl	8002318 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	699a      	ldr	r2, [r3, #24]
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	2108      	movs	r1, #8
 8002134:	430a      	orrs	r2, r1
 8002136:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	699a      	ldr	r2, [r3, #24]
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	2104      	movs	r1, #4
 8002144:	438a      	bics	r2, r1
 8002146:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	6999      	ldr	r1, [r3, #24]
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	691a      	ldr	r2, [r3, #16]
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	430a      	orrs	r2, r1
 8002158:	619a      	str	r2, [r3, #24]
      break;
 800215a:	e066      	b.n	800222a <HAL_TIM_PWM_ConfigChannel+0x14a>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	68ba      	ldr	r2, [r7, #8]
 8002162:	0011      	movs	r1, r2
 8002164:	0018      	movs	r0, r3
 8002166:	f000 f955 	bl	8002414 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	699a      	ldr	r2, [r3, #24]
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	2180      	movs	r1, #128	; 0x80
 8002176:	0109      	lsls	r1, r1, #4
 8002178:	430a      	orrs	r2, r1
 800217a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	699a      	ldr	r2, [r3, #24]
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	492d      	ldr	r1, [pc, #180]	; (800223c <HAL_TIM_PWM_ConfigChannel+0x15c>)
 8002188:	400a      	ands	r2, r1
 800218a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	6999      	ldr	r1, [r3, #24]
 8002192:	68bb      	ldr	r3, [r7, #8]
 8002194:	691b      	ldr	r3, [r3, #16]
 8002196:	021a      	lsls	r2, r3, #8
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	430a      	orrs	r2, r1
 800219e:	619a      	str	r2, [r3, #24]
      break;
 80021a0:	e043      	b.n	800222a <HAL_TIM_PWM_ConfigChannel+0x14a>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	68ba      	ldr	r2, [r7, #8]
 80021a8:	0011      	movs	r1, r2
 80021aa:	0018      	movs	r0, r3
 80021ac:	f000 f9b0 	bl	8002510 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	69da      	ldr	r2, [r3, #28]
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	2108      	movs	r1, #8
 80021bc:	430a      	orrs	r2, r1
 80021be:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	69da      	ldr	r2, [r3, #28]
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	2104      	movs	r1, #4
 80021cc:	438a      	bics	r2, r1
 80021ce:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	69d9      	ldr	r1, [r3, #28]
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	691a      	ldr	r2, [r3, #16]
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	430a      	orrs	r2, r1
 80021e0:	61da      	str	r2, [r3, #28]
      break;
 80021e2:	e022      	b.n	800222a <HAL_TIM_PWM_ConfigChannel+0x14a>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	68ba      	ldr	r2, [r7, #8]
 80021ea:	0011      	movs	r1, r2
 80021ec:	0018      	movs	r0, r3
 80021ee:	f000 fa0f 	bl	8002610 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	69da      	ldr	r2, [r3, #28]
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	2180      	movs	r1, #128	; 0x80
 80021fe:	0109      	lsls	r1, r1, #4
 8002200:	430a      	orrs	r2, r1
 8002202:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	69da      	ldr	r2, [r3, #28]
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	490b      	ldr	r1, [pc, #44]	; (800223c <HAL_TIM_PWM_ConfigChannel+0x15c>)
 8002210:	400a      	ands	r2, r1
 8002212:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	69d9      	ldr	r1, [r3, #28]
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	691b      	ldr	r3, [r3, #16]
 800221e:	021a      	lsls	r2, r3, #8
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	430a      	orrs	r2, r1
 8002226:	61da      	str	r2, [r3, #28]
      break;
 8002228:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	223c      	movs	r2, #60	; 0x3c
 800222e:	2100      	movs	r1, #0
 8002230:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002232:	2300      	movs	r3, #0
}
 8002234:	0018      	movs	r0, r3
 8002236:	46bd      	mov	sp, r7
 8002238:	b004      	add	sp, #16
 800223a:	bd80      	pop	{r7, pc}
 800223c:	fffffbff 	.word	0xfffffbff

08002240 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b084      	sub	sp, #16
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
 8002248:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	4a2b      	ldr	r2, [pc, #172]	; (8002300 <TIM_Base_SetConfig+0xc0>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d003      	beq.n	8002260 <TIM_Base_SetConfig+0x20>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	4a2a      	ldr	r2, [pc, #168]	; (8002304 <TIM_Base_SetConfig+0xc4>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d108      	bne.n	8002272 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	2270      	movs	r2, #112	; 0x70
 8002264:	4393      	bics	r3, r2
 8002266:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	68fa      	ldr	r2, [r7, #12]
 800226e:	4313      	orrs	r3, r2
 8002270:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	4a22      	ldr	r2, [pc, #136]	; (8002300 <TIM_Base_SetConfig+0xc0>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d00f      	beq.n	800229a <TIM_Base_SetConfig+0x5a>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	4a21      	ldr	r2, [pc, #132]	; (8002304 <TIM_Base_SetConfig+0xc4>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d00b      	beq.n	800229a <TIM_Base_SetConfig+0x5a>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	4a20      	ldr	r2, [pc, #128]	; (8002308 <TIM_Base_SetConfig+0xc8>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d007      	beq.n	800229a <TIM_Base_SetConfig+0x5a>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	4a1f      	ldr	r2, [pc, #124]	; (800230c <TIM_Base_SetConfig+0xcc>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d003      	beq.n	800229a <TIM_Base_SetConfig+0x5a>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	4a1e      	ldr	r2, [pc, #120]	; (8002310 <TIM_Base_SetConfig+0xd0>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d108      	bne.n	80022ac <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	4a1d      	ldr	r2, [pc, #116]	; (8002314 <TIM_Base_SetConfig+0xd4>)
 800229e:	4013      	ands	r3, r2
 80022a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	68db      	ldr	r3, [r3, #12]
 80022a6:	68fa      	ldr	r2, [r7, #12]
 80022a8:	4313      	orrs	r3, r2
 80022aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	2280      	movs	r2, #128	; 0x80
 80022b0:	4393      	bics	r3, r2
 80022b2:	001a      	movs	r2, r3
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	695b      	ldr	r3, [r3, #20]
 80022b8:	4313      	orrs	r3, r2
 80022ba:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	68fa      	ldr	r2, [r7, #12]
 80022c0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	689a      	ldr	r2, [r3, #8]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	681a      	ldr	r2, [r3, #0]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	4a0a      	ldr	r2, [pc, #40]	; (8002300 <TIM_Base_SetConfig+0xc0>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d007      	beq.n	80022ea <TIM_Base_SetConfig+0xaa>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	4a0b      	ldr	r2, [pc, #44]	; (800230c <TIM_Base_SetConfig+0xcc>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d003      	beq.n	80022ea <TIM_Base_SetConfig+0xaa>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	4a0a      	ldr	r2, [pc, #40]	; (8002310 <TIM_Base_SetConfig+0xd0>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d103      	bne.n	80022f2 <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	691a      	ldr	r2, [r3, #16]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2201      	movs	r2, #1
 80022f6:	615a      	str	r2, [r3, #20]
}
 80022f8:	46c0      	nop			; (mov r8, r8)
 80022fa:	46bd      	mov	sp, r7
 80022fc:	b004      	add	sp, #16
 80022fe:	bd80      	pop	{r7, pc}
 8002300:	40012c00 	.word	0x40012c00
 8002304:	40000400 	.word	0x40000400
 8002308:	40002000 	.word	0x40002000
 800230c:	40014400 	.word	0x40014400
 8002310:	40014800 	.word	0x40014800
 8002314:	fffffcff 	.word	0xfffffcff

08002318 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b086      	sub	sp, #24
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
 8002320:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6a1b      	ldr	r3, [r3, #32]
 8002326:	2201      	movs	r2, #1
 8002328:	4393      	bics	r3, r2
 800232a:	001a      	movs	r2, r3
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6a1b      	ldr	r3, [r3, #32]
 8002334:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	699b      	ldr	r3, [r3, #24]
 8002340:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	2270      	movs	r2, #112	; 0x70
 8002346:	4393      	bics	r3, r2
 8002348:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	2203      	movs	r2, #3
 800234e:	4393      	bics	r3, r2
 8002350:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	68fa      	ldr	r2, [r7, #12]
 8002358:	4313      	orrs	r3, r2
 800235a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	2202      	movs	r2, #2
 8002360:	4393      	bics	r3, r2
 8002362:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	697a      	ldr	r2, [r7, #20]
 800236a:	4313      	orrs	r3, r2
 800236c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	4a23      	ldr	r2, [pc, #140]	; (8002400 <TIM_OC1_SetConfig+0xe8>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d007      	beq.n	8002386 <TIM_OC1_SetConfig+0x6e>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	4a22      	ldr	r2, [pc, #136]	; (8002404 <TIM_OC1_SetConfig+0xec>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d003      	beq.n	8002386 <TIM_OC1_SetConfig+0x6e>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	4a21      	ldr	r2, [pc, #132]	; (8002408 <TIM_OC1_SetConfig+0xf0>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d10c      	bne.n	80023a0 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	2208      	movs	r2, #8
 800238a:	4393      	bics	r3, r2
 800238c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	68db      	ldr	r3, [r3, #12]
 8002392:	697a      	ldr	r2, [r7, #20]
 8002394:	4313      	orrs	r3, r2
 8002396:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	2204      	movs	r2, #4
 800239c:	4393      	bics	r3, r2
 800239e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	4a17      	ldr	r2, [pc, #92]	; (8002400 <TIM_OC1_SetConfig+0xe8>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d007      	beq.n	80023b8 <TIM_OC1_SetConfig+0xa0>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	4a16      	ldr	r2, [pc, #88]	; (8002404 <TIM_OC1_SetConfig+0xec>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d003      	beq.n	80023b8 <TIM_OC1_SetConfig+0xa0>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	4a15      	ldr	r2, [pc, #84]	; (8002408 <TIM_OC1_SetConfig+0xf0>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d111      	bne.n	80023dc <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	4a14      	ldr	r2, [pc, #80]	; (800240c <TIM_OC1_SetConfig+0xf4>)
 80023bc:	4013      	ands	r3, r2
 80023be:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	4a13      	ldr	r2, [pc, #76]	; (8002410 <TIM_OC1_SetConfig+0xf8>)
 80023c4:	4013      	ands	r3, r2
 80023c6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	695b      	ldr	r3, [r3, #20]
 80023cc:	693a      	ldr	r2, [r7, #16]
 80023ce:	4313      	orrs	r3, r2
 80023d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	699b      	ldr	r3, [r3, #24]
 80023d6:	693a      	ldr	r2, [r7, #16]
 80023d8:	4313      	orrs	r3, r2
 80023da:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	693a      	ldr	r2, [r7, #16]
 80023e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	68fa      	ldr	r2, [r7, #12]
 80023e6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	685a      	ldr	r2, [r3, #4]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	697a      	ldr	r2, [r7, #20]
 80023f4:	621a      	str	r2, [r3, #32]
}
 80023f6:	46c0      	nop			; (mov r8, r8)
 80023f8:	46bd      	mov	sp, r7
 80023fa:	b006      	add	sp, #24
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	46c0      	nop			; (mov r8, r8)
 8002400:	40012c00 	.word	0x40012c00
 8002404:	40014400 	.word	0x40014400
 8002408:	40014800 	.word	0x40014800
 800240c:	fffffeff 	.word	0xfffffeff
 8002410:	fffffdff 	.word	0xfffffdff

08002414 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b086      	sub	sp, #24
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
 800241c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6a1b      	ldr	r3, [r3, #32]
 8002422:	2210      	movs	r2, #16
 8002424:	4393      	bics	r3, r2
 8002426:	001a      	movs	r2, r3
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6a1b      	ldr	r3, [r3, #32]
 8002430:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	699b      	ldr	r3, [r3, #24]
 800243c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	4a2c      	ldr	r2, [pc, #176]	; (80024f4 <TIM_OC2_SetConfig+0xe0>)
 8002442:	4013      	ands	r3, r2
 8002444:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	4a2b      	ldr	r2, [pc, #172]	; (80024f8 <TIM_OC2_SetConfig+0xe4>)
 800244a:	4013      	ands	r3, r2
 800244c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	021b      	lsls	r3, r3, #8
 8002454:	68fa      	ldr	r2, [r7, #12]
 8002456:	4313      	orrs	r3, r2
 8002458:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	2220      	movs	r2, #32
 800245e:	4393      	bics	r3, r2
 8002460:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	011b      	lsls	r3, r3, #4
 8002468:	697a      	ldr	r2, [r7, #20]
 800246a:	4313      	orrs	r3, r2
 800246c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	4a22      	ldr	r2, [pc, #136]	; (80024fc <TIM_OC2_SetConfig+0xe8>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d10d      	bne.n	8002492 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	2280      	movs	r2, #128	; 0x80
 800247a:	4393      	bics	r3, r2
 800247c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	68db      	ldr	r3, [r3, #12]
 8002482:	011b      	lsls	r3, r3, #4
 8002484:	697a      	ldr	r2, [r7, #20]
 8002486:	4313      	orrs	r3, r2
 8002488:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	2240      	movs	r2, #64	; 0x40
 800248e:	4393      	bics	r3, r2
 8002490:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	4a19      	ldr	r2, [pc, #100]	; (80024fc <TIM_OC2_SetConfig+0xe8>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d007      	beq.n	80024aa <TIM_OC2_SetConfig+0x96>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	4a18      	ldr	r2, [pc, #96]	; (8002500 <TIM_OC2_SetConfig+0xec>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d003      	beq.n	80024aa <TIM_OC2_SetConfig+0x96>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	4a17      	ldr	r2, [pc, #92]	; (8002504 <TIM_OC2_SetConfig+0xf0>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d113      	bne.n	80024d2 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	4a16      	ldr	r2, [pc, #88]	; (8002508 <TIM_OC2_SetConfig+0xf4>)
 80024ae:	4013      	ands	r3, r2
 80024b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	4a15      	ldr	r2, [pc, #84]	; (800250c <TIM_OC2_SetConfig+0xf8>)
 80024b6:	4013      	ands	r3, r2
 80024b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	695b      	ldr	r3, [r3, #20]
 80024be:	009b      	lsls	r3, r3, #2
 80024c0:	693a      	ldr	r2, [r7, #16]
 80024c2:	4313      	orrs	r3, r2
 80024c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	699b      	ldr	r3, [r3, #24]
 80024ca:	009b      	lsls	r3, r3, #2
 80024cc:	693a      	ldr	r2, [r7, #16]
 80024ce:	4313      	orrs	r3, r2
 80024d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	693a      	ldr	r2, [r7, #16]
 80024d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	68fa      	ldr	r2, [r7, #12]
 80024dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	685a      	ldr	r2, [r3, #4]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	697a      	ldr	r2, [r7, #20]
 80024ea:	621a      	str	r2, [r3, #32]
}
 80024ec:	46c0      	nop			; (mov r8, r8)
 80024ee:	46bd      	mov	sp, r7
 80024f0:	b006      	add	sp, #24
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	ffff8fff 	.word	0xffff8fff
 80024f8:	fffffcff 	.word	0xfffffcff
 80024fc:	40012c00 	.word	0x40012c00
 8002500:	40014400 	.word	0x40014400
 8002504:	40014800 	.word	0x40014800
 8002508:	fffffbff 	.word	0xfffffbff
 800250c:	fffff7ff 	.word	0xfffff7ff

08002510 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b086      	sub	sp, #24
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
 8002518:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6a1b      	ldr	r3, [r3, #32]
 800251e:	4a33      	ldr	r2, [pc, #204]	; (80025ec <TIM_OC3_SetConfig+0xdc>)
 8002520:	401a      	ands	r2, r3
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6a1b      	ldr	r3, [r3, #32]
 800252a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	69db      	ldr	r3, [r3, #28]
 8002536:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	2270      	movs	r2, #112	; 0x70
 800253c:	4393      	bics	r3, r2
 800253e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	2203      	movs	r2, #3
 8002544:	4393      	bics	r3, r2
 8002546:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	68fa      	ldr	r2, [r7, #12]
 800254e:	4313      	orrs	r3, r2
 8002550:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	4a26      	ldr	r2, [pc, #152]	; (80025f0 <TIM_OC3_SetConfig+0xe0>)
 8002556:	4013      	ands	r3, r2
 8002558:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	021b      	lsls	r3, r3, #8
 8002560:	697a      	ldr	r2, [r7, #20]
 8002562:	4313      	orrs	r3, r2
 8002564:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	4a22      	ldr	r2, [pc, #136]	; (80025f4 <TIM_OC3_SetConfig+0xe4>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d10d      	bne.n	800258a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	4a21      	ldr	r2, [pc, #132]	; (80025f8 <TIM_OC3_SetConfig+0xe8>)
 8002572:	4013      	ands	r3, r2
 8002574:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	68db      	ldr	r3, [r3, #12]
 800257a:	021b      	lsls	r3, r3, #8
 800257c:	697a      	ldr	r2, [r7, #20]
 800257e:	4313      	orrs	r3, r2
 8002580:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	4a1d      	ldr	r2, [pc, #116]	; (80025fc <TIM_OC3_SetConfig+0xec>)
 8002586:	4013      	ands	r3, r2
 8002588:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	4a19      	ldr	r2, [pc, #100]	; (80025f4 <TIM_OC3_SetConfig+0xe4>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d007      	beq.n	80025a2 <TIM_OC3_SetConfig+0x92>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	4a1a      	ldr	r2, [pc, #104]	; (8002600 <TIM_OC3_SetConfig+0xf0>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d003      	beq.n	80025a2 <TIM_OC3_SetConfig+0x92>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	4a19      	ldr	r2, [pc, #100]	; (8002604 <TIM_OC3_SetConfig+0xf4>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d113      	bne.n	80025ca <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	4a18      	ldr	r2, [pc, #96]	; (8002608 <TIM_OC3_SetConfig+0xf8>)
 80025a6:	4013      	ands	r3, r2
 80025a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	4a17      	ldr	r2, [pc, #92]	; (800260c <TIM_OC3_SetConfig+0xfc>)
 80025ae:	4013      	ands	r3, r2
 80025b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	695b      	ldr	r3, [r3, #20]
 80025b6:	011b      	lsls	r3, r3, #4
 80025b8:	693a      	ldr	r2, [r7, #16]
 80025ba:	4313      	orrs	r3, r2
 80025bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	699b      	ldr	r3, [r3, #24]
 80025c2:	011b      	lsls	r3, r3, #4
 80025c4:	693a      	ldr	r2, [r7, #16]
 80025c6:	4313      	orrs	r3, r2
 80025c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	693a      	ldr	r2, [r7, #16]
 80025ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	68fa      	ldr	r2, [r7, #12]
 80025d4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	685a      	ldr	r2, [r3, #4]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	697a      	ldr	r2, [r7, #20]
 80025e2:	621a      	str	r2, [r3, #32]
}
 80025e4:	46c0      	nop			; (mov r8, r8)
 80025e6:	46bd      	mov	sp, r7
 80025e8:	b006      	add	sp, #24
 80025ea:	bd80      	pop	{r7, pc}
 80025ec:	fffffeff 	.word	0xfffffeff
 80025f0:	fffffdff 	.word	0xfffffdff
 80025f4:	40012c00 	.word	0x40012c00
 80025f8:	fffff7ff 	.word	0xfffff7ff
 80025fc:	fffffbff 	.word	0xfffffbff
 8002600:	40014400 	.word	0x40014400
 8002604:	40014800 	.word	0x40014800
 8002608:	ffffefff 	.word	0xffffefff
 800260c:	ffffdfff 	.word	0xffffdfff

08002610 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b086      	sub	sp, #24
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
 8002618:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6a1b      	ldr	r3, [r3, #32]
 800261e:	4a26      	ldr	r2, [pc, #152]	; (80026b8 <TIM_OC4_SetConfig+0xa8>)
 8002620:	401a      	ands	r2, r3
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6a1b      	ldr	r3, [r3, #32]
 800262a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	69db      	ldr	r3, [r3, #28]
 8002636:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	4a20      	ldr	r2, [pc, #128]	; (80026bc <TIM_OC4_SetConfig+0xac>)
 800263c:	4013      	ands	r3, r2
 800263e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	4a1f      	ldr	r2, [pc, #124]	; (80026c0 <TIM_OC4_SetConfig+0xb0>)
 8002644:	4013      	ands	r3, r2
 8002646:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	021b      	lsls	r3, r3, #8
 800264e:	68fa      	ldr	r2, [r7, #12]
 8002650:	4313      	orrs	r3, r2
 8002652:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	4a1b      	ldr	r2, [pc, #108]	; (80026c4 <TIM_OC4_SetConfig+0xb4>)
 8002658:	4013      	ands	r3, r2
 800265a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	031b      	lsls	r3, r3, #12
 8002662:	693a      	ldr	r2, [r7, #16]
 8002664:	4313      	orrs	r3, r2
 8002666:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	4a17      	ldr	r2, [pc, #92]	; (80026c8 <TIM_OC4_SetConfig+0xb8>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d007      	beq.n	8002680 <TIM_OC4_SetConfig+0x70>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	4a16      	ldr	r2, [pc, #88]	; (80026cc <TIM_OC4_SetConfig+0xbc>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d003      	beq.n	8002680 <TIM_OC4_SetConfig+0x70>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	4a15      	ldr	r2, [pc, #84]	; (80026d0 <TIM_OC4_SetConfig+0xc0>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d109      	bne.n	8002694 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	4a14      	ldr	r2, [pc, #80]	; (80026d4 <TIM_OC4_SetConfig+0xc4>)
 8002684:	4013      	ands	r3, r2
 8002686:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	695b      	ldr	r3, [r3, #20]
 800268c:	019b      	lsls	r3, r3, #6
 800268e:	697a      	ldr	r2, [r7, #20]
 8002690:	4313      	orrs	r3, r2
 8002692:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	697a      	ldr	r2, [r7, #20]
 8002698:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	68fa      	ldr	r2, [r7, #12]
 800269e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	685a      	ldr	r2, [r3, #4]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	693a      	ldr	r2, [r7, #16]
 80026ac:	621a      	str	r2, [r3, #32]
}
 80026ae:	46c0      	nop			; (mov r8, r8)
 80026b0:	46bd      	mov	sp, r7
 80026b2:	b006      	add	sp, #24
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	46c0      	nop			; (mov r8, r8)
 80026b8:	ffffefff 	.word	0xffffefff
 80026bc:	ffff8fff 	.word	0xffff8fff
 80026c0:	fffffcff 	.word	0xfffffcff
 80026c4:	ffffdfff 	.word	0xffffdfff
 80026c8:	40012c00 	.word	0x40012c00
 80026cc:	40014400 	.word	0x40014400
 80026d0:	40014800 	.word	0x40014800
 80026d4:	ffffbfff 	.word	0xffffbfff

080026d8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b086      	sub	sp, #24
 80026dc:	af00      	add	r7, sp, #0
 80026de:	60f8      	str	r0, [r7, #12]
 80026e0:	60b9      	str	r1, [r7, #8]
 80026e2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	221f      	movs	r2, #31
 80026e8:	4013      	ands	r3, r2
 80026ea:	2201      	movs	r2, #1
 80026ec:	409a      	lsls	r2, r3
 80026ee:	0013      	movs	r3, r2
 80026f0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	6a1b      	ldr	r3, [r3, #32]
 80026f6:	697a      	ldr	r2, [r7, #20]
 80026f8:	43d2      	mvns	r2, r2
 80026fa:	401a      	ands	r2, r3
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	6a1a      	ldr	r2, [r3, #32]
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	211f      	movs	r1, #31
 8002708:	400b      	ands	r3, r1
 800270a:	6879      	ldr	r1, [r7, #4]
 800270c:	4099      	lsls	r1, r3
 800270e:	000b      	movs	r3, r1
 8002710:	431a      	orrs	r2, r3
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	621a      	str	r2, [r3, #32]
}
 8002716:	46c0      	nop			; (mov r8, r8)
 8002718:	46bd      	mov	sp, r7
 800271a:	b006      	add	sp, #24
 800271c:	bd80      	pop	{r7, pc}
	...

08002720 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b084      	sub	sp, #16
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
 8002728:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	223c      	movs	r2, #60	; 0x3c
 800272e:	5c9b      	ldrb	r3, [r3, r2]
 8002730:	2b01      	cmp	r3, #1
 8002732:	d101      	bne.n	8002738 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002734:	2302      	movs	r3, #2
 8002736:	e03c      	b.n	80027b2 <HAL_TIMEx_MasterConfigSynchronization+0x92>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	223c      	movs	r2, #60	; 0x3c
 800273c:	2101      	movs	r1, #1
 800273e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	223d      	movs	r2, #61	; 0x3d
 8002744:	2102      	movs	r1, #2
 8002746:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	2270      	movs	r2, #112	; 0x70
 800275c:	4393      	bics	r3, r2
 800275e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	68fa      	ldr	r2, [r7, #12]
 8002766:	4313      	orrs	r3, r2
 8002768:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	68fa      	ldr	r2, [r7, #12]
 8002770:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a11      	ldr	r2, [pc, #68]	; (80027bc <HAL_TIMEx_MasterConfigSynchronization+0x9c>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d004      	beq.n	8002786 <HAL_TIMEx_MasterConfigSynchronization+0x66>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a0f      	ldr	r2, [pc, #60]	; (80027c0 <HAL_TIMEx_MasterConfigSynchronization+0xa0>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d10c      	bne.n	80027a0 <HAL_TIMEx_MasterConfigSynchronization+0x80>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	2280      	movs	r2, #128	; 0x80
 800278a:	4393      	bics	r3, r2
 800278c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	68ba      	ldr	r2, [r7, #8]
 8002794:	4313      	orrs	r3, r2
 8002796:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	68ba      	ldr	r2, [r7, #8]
 800279e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	223d      	movs	r2, #61	; 0x3d
 80027a4:	2101      	movs	r1, #1
 80027a6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	223c      	movs	r2, #60	; 0x3c
 80027ac:	2100      	movs	r1, #0
 80027ae:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80027b0:	2300      	movs	r3, #0
}
 80027b2:	0018      	movs	r0, r3
 80027b4:	46bd      	mov	sp, r7
 80027b6:	b004      	add	sp, #16
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	46c0      	nop			; (mov r8, r8)
 80027bc:	40012c00 	.word	0x40012c00
 80027c0:	40000400 	.word	0x40000400

080027c4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b084      	sub	sp, #16
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
 80027cc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80027ce:	2300      	movs	r3, #0
 80027d0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	223c      	movs	r2, #60	; 0x3c
 80027d6:	5c9b      	ldrb	r3, [r3, r2]
 80027d8:	2b01      	cmp	r3, #1
 80027da:	d101      	bne.n	80027e0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80027dc:	2302      	movs	r3, #2
 80027de:	e03e      	b.n	800285e <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	223c      	movs	r2, #60	; 0x3c
 80027e4:	2101      	movs	r1, #1
 80027e6:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	22ff      	movs	r2, #255	; 0xff
 80027ec:	4393      	bics	r3, r2
 80027ee:	001a      	movs	r2, r3
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	68db      	ldr	r3, [r3, #12]
 80027f4:	4313      	orrs	r3, r2
 80027f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	4a1b      	ldr	r2, [pc, #108]	; (8002868 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 80027fc:	401a      	ands	r2, r3
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	4313      	orrs	r3, r2
 8002804:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	4a18      	ldr	r2, [pc, #96]	; (800286c <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 800280a:	401a      	ands	r2, r3
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	4313      	orrs	r3, r2
 8002812:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	4a16      	ldr	r2, [pc, #88]	; (8002870 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8002818:	401a      	ands	r2, r3
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4313      	orrs	r3, r2
 8002820:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	4a13      	ldr	r2, [pc, #76]	; (8002874 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 8002826:	401a      	ands	r2, r3
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	691b      	ldr	r3, [r3, #16]
 800282c:	4313      	orrs	r3, r2
 800282e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	4a11      	ldr	r2, [pc, #68]	; (8002878 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8002834:	401a      	ands	r2, r3
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	695b      	ldr	r3, [r3, #20]
 800283a:	4313      	orrs	r3, r2
 800283c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	4a0e      	ldr	r2, [pc, #56]	; (800287c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 8002842:	401a      	ands	r2, r3
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	69db      	ldr	r3, [r3, #28]
 8002848:	4313      	orrs	r3, r2
 800284a:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	68fa      	ldr	r2, [r7, #12]
 8002852:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	223c      	movs	r2, #60	; 0x3c
 8002858:	2100      	movs	r1, #0
 800285a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800285c:	2300      	movs	r3, #0
}
 800285e:	0018      	movs	r0, r3
 8002860:	46bd      	mov	sp, r7
 8002862:	b004      	add	sp, #16
 8002864:	bd80      	pop	{r7, pc}
 8002866:	46c0      	nop			; (mov r8, r8)
 8002868:	fffffcff 	.word	0xfffffcff
 800286c:	fffffbff 	.word	0xfffffbff
 8002870:	fffff7ff 	.word	0xfffff7ff
 8002874:	ffffefff 	.word	0xffffefff
 8002878:	ffffdfff 	.word	0xffffdfff
 800287c:	ffffbfff 	.word	0xffffbfff

08002880 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b082      	sub	sp, #8
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d101      	bne.n	8002892 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e044      	b.n	800291c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002896:	2b00      	cmp	r3, #0
 8002898:	d107      	bne.n	80028aa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2274      	movs	r2, #116	; 0x74
 800289e:	2100      	movs	r1, #0
 80028a0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	0018      	movs	r0, r3
 80028a6:	f7fe f871 	bl	800098c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2224      	movs	r2, #36	; 0x24
 80028ae:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	2101      	movs	r1, #1
 80028bc:	438a      	bics	r2, r1
 80028be:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	0018      	movs	r0, r3
 80028c4:	f000 f90c 	bl	8002ae0 <UART_SetConfig>
 80028c8:	0003      	movs	r3, r0
 80028ca:	2b01      	cmp	r3, #1
 80028cc:	d101      	bne.n	80028d2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e024      	b.n	800291c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d003      	beq.n	80028e2 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	0018      	movs	r0, r3
 80028de:	f000 fa25 	bl	8002d2c <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	685a      	ldr	r2, [r3, #4]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	490d      	ldr	r1, [pc, #52]	; (8002924 <HAL_UART_Init+0xa4>)
 80028ee:	400a      	ands	r2, r1
 80028f0:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	689a      	ldr	r2, [r3, #8]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	2108      	movs	r1, #8
 80028fe:	438a      	bics	r2, r1
 8002900:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	2101      	movs	r1, #1
 800290e:	430a      	orrs	r2, r1
 8002910:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	0018      	movs	r0, r3
 8002916:	f000 fabd 	bl	8002e94 <UART_CheckIdleState>
 800291a:	0003      	movs	r3, r0
}
 800291c:	0018      	movs	r0, r3
 800291e:	46bd      	mov	sp, r7
 8002920:	b002      	add	sp, #8
 8002922:	bd80      	pop	{r7, pc}
 8002924:	fffff7ff 	.word	0xfffff7ff

08002928 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b08a      	sub	sp, #40	; 0x28
 800292c:	af02      	add	r7, sp, #8
 800292e:	60f8      	str	r0, [r7, #12]
 8002930:	60b9      	str	r1, [r7, #8]
 8002932:	603b      	str	r3, [r7, #0]
 8002934:	1dbb      	adds	r3, r7, #6
 8002936:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800293c:	2b20      	cmp	r3, #32
 800293e:	d000      	beq.n	8002942 <HAL_UART_Receive+0x1a>
 8002940:	e0c6      	b.n	8002ad0 <HAL_UART_Receive+0x1a8>
  {
    if ((pData == NULL) || (Size == 0U))
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d003      	beq.n	8002950 <HAL_UART_Receive+0x28>
 8002948:	1dbb      	adds	r3, r7, #6
 800294a:	881b      	ldrh	r3, [r3, #0]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d101      	bne.n	8002954 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8002950:	2301      	movs	r3, #1
 8002952:	e0be      	b.n	8002ad2 <HAL_UART_Receive+0x1aa>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	689a      	ldr	r2, [r3, #8]
 8002958:	2380      	movs	r3, #128	; 0x80
 800295a:	015b      	lsls	r3, r3, #5
 800295c:	429a      	cmp	r2, r3
 800295e:	d109      	bne.n	8002974 <HAL_UART_Receive+0x4c>
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	691b      	ldr	r3, [r3, #16]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d105      	bne.n	8002974 <HAL_UART_Receive+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	2201      	movs	r2, #1
 800296c:	4013      	ands	r3, r2
 800296e:	d001      	beq.n	8002974 <HAL_UART_Receive+0x4c>
      {
        return  HAL_ERROR;
 8002970:	2301      	movs	r3, #1
 8002972:	e0ae      	b.n	8002ad2 <HAL_UART_Receive+0x1aa>
      }
    }

    __HAL_LOCK(huart);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	2274      	movs	r2, #116	; 0x74
 8002978:	5c9b      	ldrb	r3, [r3, r2]
 800297a:	2b01      	cmp	r3, #1
 800297c:	d101      	bne.n	8002982 <HAL_UART_Receive+0x5a>
 800297e:	2302      	movs	r3, #2
 8002980:	e0a7      	b.n	8002ad2 <HAL_UART_Receive+0x1aa>
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2274      	movs	r2, #116	; 0x74
 8002986:	2101      	movs	r1, #1
 8002988:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	2280      	movs	r2, #128	; 0x80
 800298e:	2100      	movs	r1, #0
 8002990:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	2222      	movs	r2, #34	; 0x22
 8002996:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	2200      	movs	r2, #0
 800299c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800299e:	f7fe f8e3 	bl	8000b68 <HAL_GetTick>
 80029a2:	0003      	movs	r3, r0
 80029a4:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	1dba      	adds	r2, r7, #6
 80029aa:	2158      	movs	r1, #88	; 0x58
 80029ac:	8812      	ldrh	r2, [r2, #0]
 80029ae:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	1dba      	adds	r2, r7, #6
 80029b4:	215a      	movs	r1, #90	; 0x5a
 80029b6:	8812      	ldrh	r2, [r2, #0]
 80029b8:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	689a      	ldr	r2, [r3, #8]
 80029be:	2380      	movs	r3, #128	; 0x80
 80029c0:	015b      	lsls	r3, r3, #5
 80029c2:	429a      	cmp	r2, r3
 80029c4:	d10d      	bne.n	80029e2 <HAL_UART_Receive+0xba>
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	691b      	ldr	r3, [r3, #16]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d104      	bne.n	80029d8 <HAL_UART_Receive+0xb0>
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	225c      	movs	r2, #92	; 0x5c
 80029d2:	4942      	ldr	r1, [pc, #264]	; (8002adc <HAL_UART_Receive+0x1b4>)
 80029d4:	5299      	strh	r1, [r3, r2]
 80029d6:	e01a      	b.n	8002a0e <HAL_UART_Receive+0xe6>
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	225c      	movs	r2, #92	; 0x5c
 80029dc:	21ff      	movs	r1, #255	; 0xff
 80029de:	5299      	strh	r1, [r3, r2]
 80029e0:	e015      	b.n	8002a0e <HAL_UART_Receive+0xe6>
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d10d      	bne.n	8002a06 <HAL_UART_Receive+0xde>
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	691b      	ldr	r3, [r3, #16]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d104      	bne.n	80029fc <HAL_UART_Receive+0xd4>
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	225c      	movs	r2, #92	; 0x5c
 80029f6:	21ff      	movs	r1, #255	; 0xff
 80029f8:	5299      	strh	r1, [r3, r2]
 80029fa:	e008      	b.n	8002a0e <HAL_UART_Receive+0xe6>
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	225c      	movs	r2, #92	; 0x5c
 8002a00:	217f      	movs	r1, #127	; 0x7f
 8002a02:	5299      	strh	r1, [r3, r2]
 8002a04:	e003      	b.n	8002a0e <HAL_UART_Receive+0xe6>
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	225c      	movs	r2, #92	; 0x5c
 8002a0a:	2100      	movs	r1, #0
 8002a0c:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8002a0e:	2312      	movs	r3, #18
 8002a10:	18fb      	adds	r3, r7, r3
 8002a12:	68fa      	ldr	r2, [r7, #12]
 8002a14:	215c      	movs	r1, #92	; 0x5c
 8002a16:	5a52      	ldrh	r2, [r2, r1]
 8002a18:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	689a      	ldr	r2, [r3, #8]
 8002a1e:	2380      	movs	r3, #128	; 0x80
 8002a20:	015b      	lsls	r3, r3, #5
 8002a22:	429a      	cmp	r2, r3
 8002a24:	d108      	bne.n	8002a38 <HAL_UART_Receive+0x110>
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	691b      	ldr	r3, [r3, #16]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d104      	bne.n	8002a38 <HAL_UART_Receive+0x110>
    {
      pdata8bits  = NULL;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	61bb      	str	r3, [r7, #24]
 8002a36:	e003      	b.n	8002a40 <HAL_UART_Receive+0x118>
    }
    else
    {
      pdata8bits  = pData;
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	2274      	movs	r2, #116	; 0x74
 8002a44:	2100      	movs	r1, #0
 8002a46:	5499      	strb	r1, [r3, r2]

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002a48:	e037      	b.n	8002aba <HAL_UART_Receive+0x192>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002a4a:	697a      	ldr	r2, [r7, #20]
 8002a4c:	68f8      	ldr	r0, [r7, #12]
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	9300      	str	r3, [sp, #0]
 8002a52:	0013      	movs	r3, r2
 8002a54:	2200      	movs	r2, #0
 8002a56:	2120      	movs	r1, #32
 8002a58:	f000 fa66 	bl	8002f28 <UART_WaitOnFlagUntilTimeout>
 8002a5c:	1e03      	subs	r3, r0, #0
 8002a5e:	d001      	beq.n	8002a64 <HAL_UART_Receive+0x13c>
      {
        return HAL_TIMEOUT;
 8002a60:	2303      	movs	r3, #3
 8002a62:	e036      	b.n	8002ad2 <HAL_UART_Receive+0x1aa>
      }
      if (pdata8bits == NULL)
 8002a64:	69fb      	ldr	r3, [r7, #28]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d10e      	bne.n	8002a88 <HAL_UART_Receive+0x160>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002a70:	b29b      	uxth	r3, r3
 8002a72:	2212      	movs	r2, #18
 8002a74:	18ba      	adds	r2, r7, r2
 8002a76:	8812      	ldrh	r2, [r2, #0]
 8002a78:	4013      	ands	r3, r2
 8002a7a:	b29a      	uxth	r2, r3
 8002a7c:	69bb      	ldr	r3, [r7, #24]
 8002a7e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002a80:	69bb      	ldr	r3, [r7, #24]
 8002a82:	3302      	adds	r3, #2
 8002a84:	61bb      	str	r3, [r7, #24]
 8002a86:	e00f      	b.n	8002aa8 <HAL_UART_Receive+0x180>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002a8e:	b29b      	uxth	r3, r3
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	2212      	movs	r2, #18
 8002a94:	18ba      	adds	r2, r7, r2
 8002a96:	8812      	ldrh	r2, [r2, #0]
 8002a98:	b2d2      	uxtb	r2, r2
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	b2da      	uxtb	r2, r3
 8002a9e:	69fb      	ldr	r3, [r7, #28]
 8002aa0:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002aa2:	69fb      	ldr	r3, [r7, #28]
 8002aa4:	3301      	adds	r3, #1
 8002aa6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	225a      	movs	r2, #90	; 0x5a
 8002aac:	5a9b      	ldrh	r3, [r3, r2]
 8002aae:	b29b      	uxth	r3, r3
 8002ab0:	3b01      	subs	r3, #1
 8002ab2:	b299      	uxth	r1, r3
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	225a      	movs	r2, #90	; 0x5a
 8002ab8:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	225a      	movs	r2, #90	; 0x5a
 8002abe:	5a9b      	ldrh	r3, [r3, r2]
 8002ac0:	b29b      	uxth	r3, r3
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d1c1      	bne.n	8002a4a <HAL_UART_Receive+0x122>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	2220      	movs	r2, #32
 8002aca:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002acc:	2300      	movs	r3, #0
 8002ace:	e000      	b.n	8002ad2 <HAL_UART_Receive+0x1aa>
  }
  else
  {
    return HAL_BUSY;
 8002ad0:	2302      	movs	r3, #2
  }
}
 8002ad2:	0018      	movs	r0, r3
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	b008      	add	sp, #32
 8002ad8:	bd80      	pop	{r7, pc}
 8002ada:	46c0      	nop			; (mov r8, r8)
 8002adc:	000001ff 	.word	0x000001ff

08002ae0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b088      	sub	sp, #32
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002ae8:	231e      	movs	r3, #30
 8002aea:	18fb      	adds	r3, r7, r3
 8002aec:	2200      	movs	r2, #0
 8002aee:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	689a      	ldr	r2, [r3, #8]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	691b      	ldr	r3, [r3, #16]
 8002af8:	431a      	orrs	r2, r3
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	695b      	ldr	r3, [r3, #20]
 8002afe:	431a      	orrs	r2, r3
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	69db      	ldr	r3, [r3, #28]
 8002b04:	4313      	orrs	r3, r2
 8002b06:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a81      	ldr	r2, [pc, #516]	; (8002d14 <UART_SetConfig+0x234>)
 8002b10:	4013      	ands	r3, r2
 8002b12:	0019      	movs	r1, r3
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	697a      	ldr	r2, [r7, #20]
 8002b1a:	430a      	orrs	r2, r1
 8002b1c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	4a7c      	ldr	r2, [pc, #496]	; (8002d18 <UART_SetConfig+0x238>)
 8002b26:	4013      	ands	r3, r2
 8002b28:	0019      	movs	r1, r3
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	68da      	ldr	r2, [r3, #12]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	430a      	orrs	r2, r1
 8002b34:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	699b      	ldr	r3, [r3, #24]
 8002b3a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6a1b      	ldr	r3, [r3, #32]
 8002b40:	697a      	ldr	r2, [r7, #20]
 8002b42:	4313      	orrs	r3, r2
 8002b44:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	4a73      	ldr	r2, [pc, #460]	; (8002d1c <UART_SetConfig+0x23c>)
 8002b4e:	4013      	ands	r3, r2
 8002b50:	0019      	movs	r1, r3
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	697a      	ldr	r2, [r7, #20]
 8002b58:	430a      	orrs	r2, r1
 8002b5a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002b5c:	4b70      	ldr	r3, [pc, #448]	; (8002d20 <UART_SetConfig+0x240>)
 8002b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b60:	2203      	movs	r2, #3
 8002b62:	4013      	ands	r3, r2
 8002b64:	2b01      	cmp	r3, #1
 8002b66:	d00f      	beq.n	8002b88 <UART_SetConfig+0xa8>
 8002b68:	d304      	bcc.n	8002b74 <UART_SetConfig+0x94>
 8002b6a:	2b02      	cmp	r3, #2
 8002b6c:	d011      	beq.n	8002b92 <UART_SetConfig+0xb2>
 8002b6e:	2b03      	cmp	r3, #3
 8002b70:	d005      	beq.n	8002b7e <UART_SetConfig+0x9e>
 8002b72:	e013      	b.n	8002b9c <UART_SetConfig+0xbc>
 8002b74:	231f      	movs	r3, #31
 8002b76:	18fb      	adds	r3, r7, r3
 8002b78:	2200      	movs	r2, #0
 8002b7a:	701a      	strb	r2, [r3, #0]
 8002b7c:	e012      	b.n	8002ba4 <UART_SetConfig+0xc4>
 8002b7e:	231f      	movs	r3, #31
 8002b80:	18fb      	adds	r3, r7, r3
 8002b82:	2202      	movs	r2, #2
 8002b84:	701a      	strb	r2, [r3, #0]
 8002b86:	e00d      	b.n	8002ba4 <UART_SetConfig+0xc4>
 8002b88:	231f      	movs	r3, #31
 8002b8a:	18fb      	adds	r3, r7, r3
 8002b8c:	2204      	movs	r2, #4
 8002b8e:	701a      	strb	r2, [r3, #0]
 8002b90:	e008      	b.n	8002ba4 <UART_SetConfig+0xc4>
 8002b92:	231f      	movs	r3, #31
 8002b94:	18fb      	adds	r3, r7, r3
 8002b96:	2208      	movs	r2, #8
 8002b98:	701a      	strb	r2, [r3, #0]
 8002b9a:	e003      	b.n	8002ba4 <UART_SetConfig+0xc4>
 8002b9c:	231f      	movs	r3, #31
 8002b9e:	18fb      	adds	r3, r7, r3
 8002ba0:	2210      	movs	r2, #16
 8002ba2:	701a      	strb	r2, [r3, #0]
 8002ba4:	46c0      	nop			; (mov r8, r8)

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	69da      	ldr	r2, [r3, #28]
 8002baa:	2380      	movs	r3, #128	; 0x80
 8002bac:	021b      	lsls	r3, r3, #8
 8002bae:	429a      	cmp	r2, r3
 8002bb0:	d15c      	bne.n	8002c6c <UART_SetConfig+0x18c>
  {
    switch (clocksource)
 8002bb2:	231f      	movs	r3, #31
 8002bb4:	18fb      	adds	r3, r7, r3
 8002bb6:	781b      	ldrb	r3, [r3, #0]
 8002bb8:	2b02      	cmp	r3, #2
 8002bba:	d00d      	beq.n	8002bd8 <UART_SetConfig+0xf8>
 8002bbc:	dc02      	bgt.n	8002bc4 <UART_SetConfig+0xe4>
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d005      	beq.n	8002bce <UART_SetConfig+0xee>
 8002bc2:	e015      	b.n	8002bf0 <UART_SetConfig+0x110>
 8002bc4:	2b04      	cmp	r3, #4
 8002bc6:	d00a      	beq.n	8002bde <UART_SetConfig+0xfe>
 8002bc8:	2b08      	cmp	r3, #8
 8002bca:	d00d      	beq.n	8002be8 <UART_SetConfig+0x108>
 8002bcc:	e010      	b.n	8002bf0 <UART_SetConfig+0x110>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002bce:	f7ff f8ad 	bl	8001d2c <HAL_RCC_GetPCLK1Freq>
 8002bd2:	0003      	movs	r3, r0
 8002bd4:	61bb      	str	r3, [r7, #24]
        break;
 8002bd6:	e012      	b.n	8002bfe <UART_SetConfig+0x11e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002bd8:	4b52      	ldr	r3, [pc, #328]	; (8002d24 <UART_SetConfig+0x244>)
 8002bda:	61bb      	str	r3, [r7, #24]
        break;
 8002bdc:	e00f      	b.n	8002bfe <UART_SetConfig+0x11e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002bde:	f7ff f837 	bl	8001c50 <HAL_RCC_GetSysClockFreq>
 8002be2:	0003      	movs	r3, r0
 8002be4:	61bb      	str	r3, [r7, #24]
        break;
 8002be6:	e00a      	b.n	8002bfe <UART_SetConfig+0x11e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002be8:	2380      	movs	r3, #128	; 0x80
 8002bea:	021b      	lsls	r3, r3, #8
 8002bec:	61bb      	str	r3, [r7, #24]
        break;
 8002bee:	e006      	b.n	8002bfe <UART_SetConfig+0x11e>
      default:
        pclk = 0U;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002bf4:	231e      	movs	r3, #30
 8002bf6:	18fb      	adds	r3, r7, r3
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	701a      	strb	r2, [r3, #0]
        break;
 8002bfc:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002bfe:	69bb      	ldr	r3, [r7, #24]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d100      	bne.n	8002c06 <UART_SetConfig+0x126>
 8002c04:	e079      	b.n	8002cfa <UART_SetConfig+0x21a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002c06:	69bb      	ldr	r3, [r7, #24]
 8002c08:	005a      	lsls	r2, r3, #1
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	085b      	lsrs	r3, r3, #1
 8002c10:	18d2      	adds	r2, r2, r3
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	0019      	movs	r1, r3
 8002c18:	0010      	movs	r0, r2
 8002c1a:	f7fd fa75 	bl	8000108 <__udivsi3>
 8002c1e:	0003      	movs	r3, r0
 8002c20:	b29b      	uxth	r3, r3
 8002c22:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	2b0f      	cmp	r3, #15
 8002c28:	d91b      	bls.n	8002c62 <UART_SetConfig+0x182>
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	4a3e      	ldr	r2, [pc, #248]	; (8002d28 <UART_SetConfig+0x248>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d817      	bhi.n	8002c62 <UART_SetConfig+0x182>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	b29a      	uxth	r2, r3
 8002c36:	200e      	movs	r0, #14
 8002c38:	183b      	adds	r3, r7, r0
 8002c3a:	210f      	movs	r1, #15
 8002c3c:	438a      	bics	r2, r1
 8002c3e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	085b      	lsrs	r3, r3, #1
 8002c44:	b29b      	uxth	r3, r3
 8002c46:	2207      	movs	r2, #7
 8002c48:	4013      	ands	r3, r2
 8002c4a:	b299      	uxth	r1, r3
 8002c4c:	183b      	adds	r3, r7, r0
 8002c4e:	183a      	adds	r2, r7, r0
 8002c50:	8812      	ldrh	r2, [r2, #0]
 8002c52:	430a      	orrs	r2, r1
 8002c54:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	183a      	adds	r2, r7, r0
 8002c5c:	8812      	ldrh	r2, [r2, #0]
 8002c5e:	60da      	str	r2, [r3, #12]
 8002c60:	e04b      	b.n	8002cfa <UART_SetConfig+0x21a>
      }
      else
      {
        ret = HAL_ERROR;
 8002c62:	231e      	movs	r3, #30
 8002c64:	18fb      	adds	r3, r7, r3
 8002c66:	2201      	movs	r2, #1
 8002c68:	701a      	strb	r2, [r3, #0]
 8002c6a:	e046      	b.n	8002cfa <UART_SetConfig+0x21a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002c6c:	231f      	movs	r3, #31
 8002c6e:	18fb      	adds	r3, r7, r3
 8002c70:	781b      	ldrb	r3, [r3, #0]
 8002c72:	2b02      	cmp	r3, #2
 8002c74:	d00d      	beq.n	8002c92 <UART_SetConfig+0x1b2>
 8002c76:	dc02      	bgt.n	8002c7e <UART_SetConfig+0x19e>
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d005      	beq.n	8002c88 <UART_SetConfig+0x1a8>
 8002c7c:	e015      	b.n	8002caa <UART_SetConfig+0x1ca>
 8002c7e:	2b04      	cmp	r3, #4
 8002c80:	d00a      	beq.n	8002c98 <UART_SetConfig+0x1b8>
 8002c82:	2b08      	cmp	r3, #8
 8002c84:	d00d      	beq.n	8002ca2 <UART_SetConfig+0x1c2>
 8002c86:	e010      	b.n	8002caa <UART_SetConfig+0x1ca>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c88:	f7ff f850 	bl	8001d2c <HAL_RCC_GetPCLK1Freq>
 8002c8c:	0003      	movs	r3, r0
 8002c8e:	61bb      	str	r3, [r7, #24]
        break;
 8002c90:	e012      	b.n	8002cb8 <UART_SetConfig+0x1d8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002c92:	4b24      	ldr	r3, [pc, #144]	; (8002d24 <UART_SetConfig+0x244>)
 8002c94:	61bb      	str	r3, [r7, #24]
        break;
 8002c96:	e00f      	b.n	8002cb8 <UART_SetConfig+0x1d8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002c98:	f7fe ffda 	bl	8001c50 <HAL_RCC_GetSysClockFreq>
 8002c9c:	0003      	movs	r3, r0
 8002c9e:	61bb      	str	r3, [r7, #24]
        break;
 8002ca0:	e00a      	b.n	8002cb8 <UART_SetConfig+0x1d8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002ca2:	2380      	movs	r3, #128	; 0x80
 8002ca4:	021b      	lsls	r3, r3, #8
 8002ca6:	61bb      	str	r3, [r7, #24]
        break;
 8002ca8:	e006      	b.n	8002cb8 <UART_SetConfig+0x1d8>
      default:
        pclk = 0U;
 8002caa:	2300      	movs	r3, #0
 8002cac:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002cae:	231e      	movs	r3, #30
 8002cb0:	18fb      	adds	r3, r7, r3
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	701a      	strb	r2, [r3, #0]
        break;
 8002cb6:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002cb8:	69bb      	ldr	r3, [r7, #24]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d01d      	beq.n	8002cfa <UART_SetConfig+0x21a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	085a      	lsrs	r2, r3, #1
 8002cc4:	69bb      	ldr	r3, [r7, #24]
 8002cc6:	18d2      	adds	r2, r2, r3
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	0019      	movs	r1, r3
 8002cce:	0010      	movs	r0, r2
 8002cd0:	f7fd fa1a 	bl	8000108 <__udivsi3>
 8002cd4:	0003      	movs	r3, r0
 8002cd6:	b29b      	uxth	r3, r3
 8002cd8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	2b0f      	cmp	r3, #15
 8002cde:	d908      	bls.n	8002cf2 <UART_SetConfig+0x212>
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	4a11      	ldr	r2, [pc, #68]	; (8002d28 <UART_SetConfig+0x248>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d804      	bhi.n	8002cf2 <UART_SetConfig+0x212>
      {
        huart->Instance->BRR = usartdiv;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	693a      	ldr	r2, [r7, #16]
 8002cee:	60da      	str	r2, [r3, #12]
 8002cf0:	e003      	b.n	8002cfa <UART_SetConfig+0x21a>
      }
      else
      {
        ret = HAL_ERROR;
 8002cf2:	231e      	movs	r3, #30
 8002cf4:	18fb      	adds	r3, r7, r3
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2200      	movs	r2, #0
 8002d04:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002d06:	231e      	movs	r3, #30
 8002d08:	18fb      	adds	r3, r7, r3
 8002d0a:	781b      	ldrb	r3, [r3, #0]
}
 8002d0c:	0018      	movs	r0, r3
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	b008      	add	sp, #32
 8002d12:	bd80      	pop	{r7, pc}
 8002d14:	ffff69f3 	.word	0xffff69f3
 8002d18:	ffffcfff 	.word	0xffffcfff
 8002d1c:	fffff4ff 	.word	0xfffff4ff
 8002d20:	40021000 	.word	0x40021000
 8002d24:	007a1200 	.word	0x007a1200
 8002d28:	0000ffff 	.word	0x0000ffff

08002d2c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b082      	sub	sp, #8
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d38:	2201      	movs	r2, #1
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	d00b      	beq.n	8002d56 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	4a4a      	ldr	r2, [pc, #296]	; (8002e70 <UART_AdvFeatureConfig+0x144>)
 8002d46:	4013      	ands	r3, r2
 8002d48:	0019      	movs	r1, r3
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	430a      	orrs	r2, r1
 8002d54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d5a:	2202      	movs	r2, #2
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	d00b      	beq.n	8002d78 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	4a43      	ldr	r2, [pc, #268]	; (8002e74 <UART_AdvFeatureConfig+0x148>)
 8002d68:	4013      	ands	r3, r2
 8002d6a:	0019      	movs	r1, r3
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	430a      	orrs	r2, r1
 8002d76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d7c:	2204      	movs	r2, #4
 8002d7e:	4013      	ands	r3, r2
 8002d80:	d00b      	beq.n	8002d9a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	4a3b      	ldr	r2, [pc, #236]	; (8002e78 <UART_AdvFeatureConfig+0x14c>)
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	0019      	movs	r1, r3
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	430a      	orrs	r2, r1
 8002d98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d9e:	2208      	movs	r2, #8
 8002da0:	4013      	ands	r3, r2
 8002da2:	d00b      	beq.n	8002dbc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	4a34      	ldr	r2, [pc, #208]	; (8002e7c <UART_AdvFeatureConfig+0x150>)
 8002dac:	4013      	ands	r3, r2
 8002dae:	0019      	movs	r1, r3
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	430a      	orrs	r2, r1
 8002dba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc0:	2210      	movs	r2, #16
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	d00b      	beq.n	8002dde <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	689b      	ldr	r3, [r3, #8]
 8002dcc:	4a2c      	ldr	r2, [pc, #176]	; (8002e80 <UART_AdvFeatureConfig+0x154>)
 8002dce:	4013      	ands	r3, r2
 8002dd0:	0019      	movs	r1, r3
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	430a      	orrs	r2, r1
 8002ddc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de2:	2220      	movs	r2, #32
 8002de4:	4013      	ands	r3, r2
 8002de6:	d00b      	beq.n	8002e00 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	4a25      	ldr	r2, [pc, #148]	; (8002e84 <UART_AdvFeatureConfig+0x158>)
 8002df0:	4013      	ands	r3, r2
 8002df2:	0019      	movs	r1, r3
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	430a      	orrs	r2, r1
 8002dfe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e04:	2240      	movs	r2, #64	; 0x40
 8002e06:	4013      	ands	r3, r2
 8002e08:	d01d      	beq.n	8002e46 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	4a1d      	ldr	r2, [pc, #116]	; (8002e88 <UART_AdvFeatureConfig+0x15c>)
 8002e12:	4013      	ands	r3, r2
 8002e14:	0019      	movs	r1, r3
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	430a      	orrs	r2, r1
 8002e20:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e26:	2380      	movs	r3, #128	; 0x80
 8002e28:	035b      	lsls	r3, r3, #13
 8002e2a:	429a      	cmp	r2, r3
 8002e2c:	d10b      	bne.n	8002e46 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	4a15      	ldr	r2, [pc, #84]	; (8002e8c <UART_AdvFeatureConfig+0x160>)
 8002e36:	4013      	ands	r3, r2
 8002e38:	0019      	movs	r1, r3
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	430a      	orrs	r2, r1
 8002e44:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e4a:	2280      	movs	r2, #128	; 0x80
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	d00b      	beq.n	8002e68 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	4a0e      	ldr	r2, [pc, #56]	; (8002e90 <UART_AdvFeatureConfig+0x164>)
 8002e58:	4013      	ands	r3, r2
 8002e5a:	0019      	movs	r1, r3
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	430a      	orrs	r2, r1
 8002e66:	605a      	str	r2, [r3, #4]
  }
}
 8002e68:	46c0      	nop			; (mov r8, r8)
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	b002      	add	sp, #8
 8002e6e:	bd80      	pop	{r7, pc}
 8002e70:	fffdffff 	.word	0xfffdffff
 8002e74:	fffeffff 	.word	0xfffeffff
 8002e78:	fffbffff 	.word	0xfffbffff
 8002e7c:	ffff7fff 	.word	0xffff7fff
 8002e80:	ffffefff 	.word	0xffffefff
 8002e84:	ffffdfff 	.word	0xffffdfff
 8002e88:	ffefffff 	.word	0xffefffff
 8002e8c:	ff9fffff 	.word	0xff9fffff
 8002e90:	fff7ffff 	.word	0xfff7ffff

08002e94 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b086      	sub	sp, #24
 8002e98:	af02      	add	r7, sp, #8
 8002e9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2280      	movs	r2, #128	; 0x80
 8002ea0:	2100      	movs	r1, #0
 8002ea2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002ea4:	f7fd fe60 	bl	8000b68 <HAL_GetTick>
 8002ea8:	0003      	movs	r3, r0
 8002eaa:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	2208      	movs	r2, #8
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	2b08      	cmp	r3, #8
 8002eb8:	d10d      	bne.n	8002ed6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002eba:	68fa      	ldr	r2, [r7, #12]
 8002ebc:	2380      	movs	r3, #128	; 0x80
 8002ebe:	0399      	lsls	r1, r3, #14
 8002ec0:	6878      	ldr	r0, [r7, #4]
 8002ec2:	4b18      	ldr	r3, [pc, #96]	; (8002f24 <UART_CheckIdleState+0x90>)
 8002ec4:	9300      	str	r3, [sp, #0]
 8002ec6:	0013      	movs	r3, r2
 8002ec8:	2200      	movs	r2, #0
 8002eca:	f000 f82d 	bl	8002f28 <UART_WaitOnFlagUntilTimeout>
 8002ece:	1e03      	subs	r3, r0, #0
 8002ed0:	d001      	beq.n	8002ed6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002ed2:	2303      	movs	r3, #3
 8002ed4:	e022      	b.n	8002f1c <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	2204      	movs	r2, #4
 8002ede:	4013      	ands	r3, r2
 8002ee0:	2b04      	cmp	r3, #4
 8002ee2:	d10d      	bne.n	8002f00 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002ee4:	68fa      	ldr	r2, [r7, #12]
 8002ee6:	2380      	movs	r3, #128	; 0x80
 8002ee8:	03d9      	lsls	r1, r3, #15
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	4b0d      	ldr	r3, [pc, #52]	; (8002f24 <UART_CheckIdleState+0x90>)
 8002eee:	9300      	str	r3, [sp, #0]
 8002ef0:	0013      	movs	r3, r2
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	f000 f818 	bl	8002f28 <UART_WaitOnFlagUntilTimeout>
 8002ef8:	1e03      	subs	r3, r0, #0
 8002efa:	d001      	beq.n	8002f00 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002efc:	2303      	movs	r3, #3
 8002efe:	e00d      	b.n	8002f1c <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2220      	movs	r2, #32
 8002f04:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2220      	movs	r2, #32
 8002f0a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2274      	movs	r2, #116	; 0x74
 8002f16:	2100      	movs	r1, #0
 8002f18:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002f1a:	2300      	movs	r3, #0
}
 8002f1c:	0018      	movs	r0, r3
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	b004      	add	sp, #16
 8002f22:	bd80      	pop	{r7, pc}
 8002f24:	01ffffff 	.word	0x01ffffff

08002f28 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b084      	sub	sp, #16
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	60f8      	str	r0, [r7, #12]
 8002f30:	60b9      	str	r1, [r7, #8]
 8002f32:	603b      	str	r3, [r7, #0]
 8002f34:	1dfb      	adds	r3, r7, #7
 8002f36:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f38:	e05e      	b.n	8002ff8 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f3a:	69bb      	ldr	r3, [r7, #24]
 8002f3c:	3301      	adds	r3, #1
 8002f3e:	d05b      	beq.n	8002ff8 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f40:	f7fd fe12 	bl	8000b68 <HAL_GetTick>
 8002f44:	0002      	movs	r2, r0
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	1ad3      	subs	r3, r2, r3
 8002f4a:	69ba      	ldr	r2, [r7, #24]
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	d302      	bcc.n	8002f56 <UART_WaitOnFlagUntilTimeout+0x2e>
 8002f50:	69bb      	ldr	r3, [r7, #24]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d11b      	bne.n	8002f8e <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	492f      	ldr	r1, [pc, #188]	; (8003020 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8002f62:	400a      	ands	r2, r1
 8002f64:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	689a      	ldr	r2, [r3, #8]
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	2101      	movs	r1, #1
 8002f72:	438a      	bics	r2, r1
 8002f74:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2220      	movs	r2, #32
 8002f7a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	2220      	movs	r2, #32
 8002f80:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	2274      	movs	r2, #116	; 0x74
 8002f86:	2100      	movs	r1, #0
 8002f88:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002f8a:	2303      	movs	r3, #3
 8002f8c:	e044      	b.n	8003018 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	2204      	movs	r2, #4
 8002f96:	4013      	ands	r3, r2
 8002f98:	d02e      	beq.n	8002ff8 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	69da      	ldr	r2, [r3, #28]
 8002fa0:	2380      	movs	r3, #128	; 0x80
 8002fa2:	011b      	lsls	r3, r3, #4
 8002fa4:	401a      	ands	r2, r3
 8002fa6:	2380      	movs	r3, #128	; 0x80
 8002fa8:	011b      	lsls	r3, r3, #4
 8002faa:	429a      	cmp	r2, r3
 8002fac:	d124      	bne.n	8002ff8 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	2280      	movs	r2, #128	; 0x80
 8002fb4:	0112      	lsls	r2, r2, #4
 8002fb6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4917      	ldr	r1, [pc, #92]	; (8003020 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8002fc4:	400a      	ands	r2, r1
 8002fc6:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	689a      	ldr	r2, [r3, #8]
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	2101      	movs	r1, #1
 8002fd4:	438a      	bics	r2, r1
 8002fd6:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2220      	movs	r2, #32
 8002fdc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	2220      	movs	r2, #32
 8002fe2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2280      	movs	r2, #128	; 0x80
 8002fe8:	2120      	movs	r1, #32
 8002fea:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2274      	movs	r2, #116	; 0x74
 8002ff0:	2100      	movs	r1, #0
 8002ff2:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002ff4:	2303      	movs	r3, #3
 8002ff6:	e00f      	b.n	8003018 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	69db      	ldr	r3, [r3, #28]
 8002ffe:	68ba      	ldr	r2, [r7, #8]
 8003000:	4013      	ands	r3, r2
 8003002:	68ba      	ldr	r2, [r7, #8]
 8003004:	1ad3      	subs	r3, r2, r3
 8003006:	425a      	negs	r2, r3
 8003008:	4153      	adcs	r3, r2
 800300a:	b2db      	uxtb	r3, r3
 800300c:	001a      	movs	r2, r3
 800300e:	1dfb      	adds	r3, r7, #7
 8003010:	781b      	ldrb	r3, [r3, #0]
 8003012:	429a      	cmp	r2, r3
 8003014:	d091      	beq.n	8002f3a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003016:	2300      	movs	r3, #0
}
 8003018:	0018      	movs	r0, r3
 800301a:	46bd      	mov	sp, r7
 800301c:	b004      	add	sp, #16
 800301e:	bd80      	pop	{r7, pc}
 8003020:	fffffe5f 	.word	0xfffffe5f

08003024 <__libc_init_array>:
 8003024:	b570      	push	{r4, r5, r6, lr}
 8003026:	2600      	movs	r6, #0
 8003028:	4d0c      	ldr	r5, [pc, #48]	; (800305c <__libc_init_array+0x38>)
 800302a:	4c0d      	ldr	r4, [pc, #52]	; (8003060 <__libc_init_array+0x3c>)
 800302c:	1b64      	subs	r4, r4, r5
 800302e:	10a4      	asrs	r4, r4, #2
 8003030:	42a6      	cmp	r6, r4
 8003032:	d109      	bne.n	8003048 <__libc_init_array+0x24>
 8003034:	2600      	movs	r6, #0
 8003036:	f000 f831 	bl	800309c <_init>
 800303a:	4d0a      	ldr	r5, [pc, #40]	; (8003064 <__libc_init_array+0x40>)
 800303c:	4c0a      	ldr	r4, [pc, #40]	; (8003068 <__libc_init_array+0x44>)
 800303e:	1b64      	subs	r4, r4, r5
 8003040:	10a4      	asrs	r4, r4, #2
 8003042:	42a6      	cmp	r6, r4
 8003044:	d105      	bne.n	8003052 <__libc_init_array+0x2e>
 8003046:	bd70      	pop	{r4, r5, r6, pc}
 8003048:	00b3      	lsls	r3, r6, #2
 800304a:	58eb      	ldr	r3, [r5, r3]
 800304c:	4798      	blx	r3
 800304e:	3601      	adds	r6, #1
 8003050:	e7ee      	b.n	8003030 <__libc_init_array+0xc>
 8003052:	00b3      	lsls	r3, r6, #2
 8003054:	58eb      	ldr	r3, [r5, r3]
 8003056:	4798      	blx	r3
 8003058:	3601      	adds	r6, #1
 800305a:	e7f2      	b.n	8003042 <__libc_init_array+0x1e>
 800305c:	080030ec 	.word	0x080030ec
 8003060:	080030ec 	.word	0x080030ec
 8003064:	080030ec 	.word	0x080030ec
 8003068:	080030f0 	.word	0x080030f0

0800306c <memcmp>:
 800306c:	b530      	push	{r4, r5, lr}
 800306e:	2400      	movs	r4, #0
 8003070:	42a2      	cmp	r2, r4
 8003072:	d101      	bne.n	8003078 <memcmp+0xc>
 8003074:	2000      	movs	r0, #0
 8003076:	e005      	b.n	8003084 <memcmp+0x18>
 8003078:	5d03      	ldrb	r3, [r0, r4]
 800307a:	1c65      	adds	r5, r4, #1
 800307c:	5d0c      	ldrb	r4, [r1, r4]
 800307e:	42a3      	cmp	r3, r4
 8003080:	d001      	beq.n	8003086 <memcmp+0x1a>
 8003082:	1b18      	subs	r0, r3, r4
 8003084:	bd30      	pop	{r4, r5, pc}
 8003086:	002c      	movs	r4, r5
 8003088:	e7f2      	b.n	8003070 <memcmp+0x4>

0800308a <memset>:
 800308a:	0003      	movs	r3, r0
 800308c:	1812      	adds	r2, r2, r0
 800308e:	4293      	cmp	r3, r2
 8003090:	d100      	bne.n	8003094 <memset+0xa>
 8003092:	4770      	bx	lr
 8003094:	7019      	strb	r1, [r3, #0]
 8003096:	3301      	adds	r3, #1
 8003098:	e7f9      	b.n	800308e <memset+0x4>
	...

0800309c <_init>:
 800309c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800309e:	46c0      	nop			; (mov r8, r8)
 80030a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030a2:	bc08      	pop	{r3}
 80030a4:	469e      	mov	lr, r3
 80030a6:	4770      	bx	lr

080030a8 <_fini>:
 80030a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030aa:	46c0      	nop			; (mov r8, r8)
 80030ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030ae:	bc08      	pop	{r3}
 80030b0:	469e      	mov	lr, r3
 80030b2:	4770      	bx	lr
